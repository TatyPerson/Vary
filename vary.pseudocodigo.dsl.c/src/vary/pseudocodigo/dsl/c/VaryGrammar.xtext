// automatically generated by Xtext
grammar vary.pseudocodigo.dsl.c.VaryGrammar with org.eclipse.xtext.common.Terminals

import "http://diagramapseudocodigo/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Codigo returns Codigo:
	Algoritmo | Modulo;
	
Algoritmo returns Algoritmo:
	'Algoritmo' nombre=EString
	(comentarios+=Comentario (comentarios+=Comentario)* )?
	'importa'
	(importaciones+=[Modulo] (importaciones+=[Modulo])* )?
	'fin_importa'
	('const'
		( constantes+=Constantes (constantes+=Constantes)* )? )?
	('tipo'
		( tipocomplejo+=TipoComplejo (tipocomplejo+=TipoComplejo)* )? )?
	('var'
		( global+=Declaracion ( global+=Declaracion)* )? )?
	(funcion+=Subproceso (funcion+=Subproceso)* )?
	tiene=Inicio
	'fin_algoritmo';
	
Modulo returns Modulo:
	'Modulo' nombre=ID
	'importa'
	(importaciones+=[Modulo] (importaciones+=[Modulo])* )?
	'fin_importa'
	'exporta'
	('const'
	(exporta_constantes+=EString (exporta_constantes+=EString)* )? )?
	('tipo'
	(exporta_tipos+=EString (exporta_tipos+=EString)* )? )?
	('var'
		( exporta_globales+=Declaracion ( exporta_globales+=Declaracion)* )? )?
	(exporta_funciones+=CabeceraSubproceso (exporta_funciones+=CabeceraSubproceso)* )?
	'fin_exporta'
	implementacion=Implementacion
	'fin_modulo';

Implementacion returns Implementacion:
	{Implementacion}
	'implementacion'
	('const'
		( constantes+=Constantes (constantes+=Constantes)* )? )?
	('tipo'
		( tipocomplejo+=TipoComplejo (tipocomplejo+=TipoComplejo)* )? )?
	('var'
		( global+=Declaracion ( global+=Declaracion)* )? )?
	(funcion+=Subproceso (funcion+=Subproceso)* )?
	'fin_implementacion'
;

CabeceraSubproceso returns CabeceraSubproceso:
	CabeceraProcedimiento | CabeceraFuncion;
	
CabeceraProcedimiento returns CabeceraProcedimiento:
	'procedimiento'
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')';
	
CabeceraFuncion returns CabeceraFuncion:
	tipo=TipoVariable 'funcion'
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')';
	
TipoComplejo returns TipoComplejo:
	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;


Subproceso returns Subproceso:
	Funcion | Procedimiento;

//terminal ML_COMMENT : '/*' (!'*') -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;

Comentario returns Comentario:
	{Comentario}/* ML_COMMENT | */ SL_COMMENT mensaje= COMENT;

Sentencias returns Sentencias:
	 Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;

Bloque returns Bloque:
	Si | mientras | repetir | desde | segun;

Declaracion returns Declaracion:
	DeclaracionVariable | DeclaracionPropia;
	
FuncionFicheroAbrir returns FuncionFicheroAbrir:
	'abrir'
	'('
		(variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
	')'
;

FuncionFicheroCerrar returns FuncionFicheroCerrar:
	'cerrar'
	'('
		(variable=Primaria)
	')'
;
	
ModoApertura returns ModoApertura:
	'escritura' | 'lectura';


NombreInterna returns NombreInterna:
	'cos' | 'cuadrado' | 'exp' | 'ln' | 'log' | 'sen' | 'sqrt' | 'longitud' | 'concatena';


EInt returns ecore::EInt:
	INT;
	 
//terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

EFloat returns ecore::EFloat:
	INT '.' INT (('E'|'e') ('+'|'-')? INT)?;   
	//('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    //|   '.' ('0'..'9')+ EXPONENT?
    //|   ('0'..'9')+ EXPONENT
    //;

//ValorRegistro returns ValorRegistro:
//	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
	
//ValorVector returns ValorVector:
//	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;
	
CampoRegistro returns CampoRegistro:
	nombre_campo=EString;

Tipo returns Tipo:
	TipoDefinido | TipoExistente;
	
TipoDefinido returns TipoDefinido:
	tipo=EString;

TipoExistente returns TipoExistente:
	tipo=TipoVariable;

Constantes returns Constantes:
	variable=Variable '=' valor=Primaria;

Vector returns Vector:
	'vector' '['(valor=Primaria)']' 'de'  tipo=Tipo ': ' nombre=EString;

Matriz returns Matriz:
	'matriz' '['(valor+=Primaria)']['(valor+=Primaria)']' 'de' tipo=Tipo ': ' nombre=EString;
	

Registro returns Registro:
	'registro:' nombre=EString
			(variable+=Declaracion (variable+=Declaracion)* )
	'fin_registro';
	
Archivo returns Archivo:
	'archivo de ' tipo=Tipo': ' nombre=EString;
	

Enumerado returns Enumerado:
	nombre=EString '=' '{'(valor+=Primaria (',' valor+=Primaria )* )'}';
	
Subrango returns Subrango:
	SubrangoNumerico | SubrangoEnumerado;

SubrangoNumerico returns SubrangoNumerico:
	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
	
SubrangoEnumerado returns SubrangoEnumerado:
	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);

Inicio returns Inicio:
	'principal'
	{Inicio}
	'var'
	( declaracion+=Declaracion ( declaracion+=Declaracion)* )?
	'inicio'
		(tiene+=Sentencias (  tiene+=Sentencias)*  )?
	'fin_inicio';

EString returns ecore::EString:
	STRING | ID;

DeclaracionVariable returns DeclaracionVariable:
	tipo=TipoVariable ': '
	variable+=Variable ( ',' variable+=Variable)*;
	
DeclaracionPropia returns DeclaracionPropia:
	tipo=EString ': '
	variable+=Variable (',' variable+=Variable)*;

Asignacion returns Asignacion:
	AsignacionNormal | AsignacionCompleja;
	
AsignacionNormal returns AsignacionNormal:
	valor_asignacion=EString
//	 Mat+=MAT*
	'<-'
	operador=operacion;
	
AsignacionCompleja returns AsignacionCompleja:
	valor_asignacion=VariablesComplejas
	'<-'
	operador=operacion;

//AsignacionCompleja returns AsignacionCompleja:
//	operadores+=Primaria
//	Mat+=MAT*
//	 '='
//	operadores+=Primaria;

Escribir returns Escribir:
	'escribir'
	'('
		 operador+=Primaria ( "," operador+=Primaria | operador+=operacion)* 
	')';

Leer returns Leer:
	'leer'
	'('
		variable=Primaria
	')';

Si returns Si:
	'si'valor=operacion 'entonces'
		(sentencias+=Sentencias ( sentencias+=Sentencias)* )?
		(devuelve=Devolver)?
	(sino=Sino)?
	'fin_si';

mientras returns mientras:
	'mientras'
	valor=operacion 'hacer'
		(sentencias+=Sentencias ( sentencias+=Sentencias)*  )?
	'fin_mientras';

repetir returns repetir:
	'repetir'
		(sentencias+=Sentencias ( sentencias+=Sentencias)*)?
	 'hasta_que' valor=operacion;

desde returns desde:
	'desde' asignacion=AsignacionNormal 'hasta' valor=operacion 'hacer'
		(sentencias+=Sentencias ( sentencias+=Sentencias)* )?
	'fin_desde';
	
Caso returns Caso:
	'caso' operador=Primaria ': ' (sentencias+=Sentencias ( sentencias+=Sentencias )* )?
	(devuelve=Devolver)?
;
	
segun returns segun:
	'segun_sea''('valor=Primaria')' 'hacer'
		(caso+=Caso ( caso+=Caso )* )?
		'en_otro_caso:'
		(sentencias+=Sentencias ( sentencias+=Sentencias )* )?
		(devuelve=Devolver)?
	'fin_segun';

//negacion returns negacion:
//	nombre=EString
//	ssigno=neg;
	
//unaria returns unaria:
//	ssigno=neg
//	variable=Primaria;

TipoVariable returns ecore::EString:
	'entero' | 'caracter' | 'real' | 'logico' | 'cadena';
	
Variable returns Variable:
	 {Variable} nombre=EString;
//	 Mat+=MAT*;

//VariableID returns VariableID:
//	{VariableID} nombre=EString;
	//Mat+=MAT*;

terminal CAD: '"' ('a'..'z'|'A'..'Z'|'_'|'-'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9'|':'|','|'.')* '"';
terminal CAR: "'" ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9') "'";
terminal COMENT: '/*' ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9')* '*/';

//terminal MAT: 
//'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;


//ConstCadena returns ConstCadena:
//	{ConstCadena} contenido=CAD;

//NumeroEntero returns NumeroEntero:
//	 {NumeroEntero} valor=INTEGER;

//NumeroDecimal returns NumeroDecimal:
//	 {NumeroDecimal} valor=FLOAT;

//ValorBooleano returns ValorBooleano:
//	 {ValorBooleano} valor=booleano;

booleano returns booleano:
	'verdadero' | 'falso';

signo returns signo:
	('+' | '-' | '*' | '/' | '<' | '>' | '>=' | '<=' | 'y' | 'o' | '=' | '!=')
 /* TODO: implement this rule and an appropriate IValueConverter */;
 
signoOr returns signo:
	'o';

signoAnd returns signo:
	'y';
	
signoIgualdad returns signo:
	'==' | '!=';
	
signoComparacion returns signo:
	'<' | '>' | '>=' | '<=';

signoSuma returns signo:
	'+';
	
signoResta returns signo:
	'-';
	
signoMultiplicacion returns signo:
	'*';
	
signoDivision returns signo:
	'/';

operacion returns operacion:
	Or;

Or returns operacion:
	And ({Or.left=current} signo_op=signoOr right=And)*;

And returns operacion:
	Igualdad ({And.left=current} signo_op=signoAnd right=Igualdad)*;

Igualdad returns operacion:
	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad right=Comparacion)*;

Comparacion returns operacion:
	SumaResta ({Comparacion.left=current} signo_op=signoComparacion right=SumaResta)*;

SumaResta returns operacion:
	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) right=MultiplicacionDivision)*;

MultiplicacionDivision returns operacion:
	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision) right=Primaria)*;


Primaria returns operacion:
	'|' operacion '|'
	| VariablesBasicas
	| {Negativa} '-(' valor_operacion=operacion ')'
	| {Negacion} 'no''(' valor_operacion=operacion ')'
	| Funciones
	| VariablesComplejas;
	
Funciones returns operacion:
	{LlamadaFuncion} nombre=EString '(' (operadores+=operacion ( ',' operadores+=operacion)* )? ')'
	| {Internas} nombre=NombreInterna '(' (operadores+=operacion ( ',' operadores+=operacion)* )? ')';
	
VariablesComplejas returns operacion:
	{ValorVector} ((nombre_vector=EString)'['(indice=VariablesBasicas)']') ('.' (campo+=CampoRegistro) )?
	| {ValorMatriz} ((nombre_matriz=EString)'['(primerIndice=VariablesBasicas)']['(segundoIndice=VariablesBasicas)']') ('.' (campo+=CampoRegistro) )?
	| {ValorRegistro} nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
	
VariablesBasicas returns operacion:
	 {NumeroEntero} valor=EInt
	| {NumeroDecimal} valor=EFloat
	| {ConstCadena} contenido=CAD
	| {Caracter} contenido=CAR
	| {ValorBooleano} valor=booleano
	| {VariableID} nombre=EString;

Sino returns Sino:
	{Sino}
	'sino'
	(sentencias+=Sentencias ( sentencias+=Sentencias)* )?
	(devuelve=Devolver)?;

Devolver returns Devolver:
	{Devolver}
	'devolver' devuelve=Primaria;

//neg returns neg:
//	"no" /* TODO: implement this rule and an appropriate IValueConverter */;
	
ParametroFuncion returns ParametroFuncion:
	paso=TipoPaso
	tipo=Tipo ": "
	variable=Variable;

Funcion returns Funcion:
	(tipo=TipoVariable)
	'funcion'
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	'const'?
	'tipo'?
	'var'
	( declaracion+=Declaracion ( declaracion+=Declaracion)* )?
	'inicio'
	( sentencias+=Sentencias (  sentencias+=Sentencias)*  )?
	devuelve=Devolver
	'fin_funcion';
	
Procedimiento returns Procedimiento:
	'procedimiento'
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	'const'?
	'tipo'?
	'var'
	( declaracion+=Declaracion ( declaracion+=Declaracion)* )?
	'inicio'
	( sentencias+=Sentencias (  sentencias+=Sentencias)*  )?
	'fin_procedimiento';
	
TipoPaso returns TipoPaso:
	'E' | 'E/S' | 'S'/* TODO: implement this rule and an appropriate IValueConverter */;