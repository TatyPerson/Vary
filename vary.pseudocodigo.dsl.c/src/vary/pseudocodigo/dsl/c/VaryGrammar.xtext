// automatically generated by Xtext
grammar vary.pseudocodigo.dsl.c.VaryGrammar with org.eclipse.xtext.common.Terminals

import "http://diagramapseudocodigo/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Codigo returns Codigo:
	Algoritmo | Modulo;
	
Algoritmo returns Algoritmo:
	'Algoritmo' nombre=EString
	('importa'
	(importaciones+=[Modulo])*
	'fin_importa')?
	('const'
		(constantes+=Constantes)* )? 
	('tipo'
		(tipocomplejo+=TipoComplejo)* )?
	('var'
		(global+=Declaracion)* )? 
	(funcion+=Subproceso)*
	tiene=Inicio
	'fin_algoritmo';
	
Modulo returns Modulo:
	'Modulo' nombre=ID
	'importa'
	(importaciones+=[Modulo])* 
	'fin_importa'
	('exporta'
	('const'
		(exporta_constantes+=EString)* )? 
	('tipo'
		(exporta_tipos+=EString)* )?
	('var'
		(exporta_global+=Declaracion)* )? 
	(exporta_funciones+=CabeceraSubproceso)* 
	'fin_exporta')
	implementacion=Implementacion
	'fin_modulo';

Implementacion returns Implementacion:
	{Implementacion}
	('implementacion'
	('const'
		(constantes+=Constantes)* )?
	('tipo'
		(tipocomplejo+=TipoComplejo)* )?
	('var'
		(global+=Declaracion)* )?
	(funcion+=Subproceso)*
	'fin_implementacion')
;

CabeceraSubproceso returns CabeceraSubproceso:
	CabeceraProcedimiento | CabeceraFuncion;
	
CabeceraProcedimiento returns CabeceraProcedimiento:
	'procedimiento'
	nombre=NOMBRE_FUN
	(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')';
	
CabeceraFuncion returns CabeceraFuncion:
	tipo=TipoVariable 'funcion'
	nombre=NOMBRE_FUN
	(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')';
	
TipoComplejo returns TipoComplejo:
	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;


Subproceso returns Subproceso:
	Funcion | Procedimiento;

//terminal ML_COMMENT : '/*' (!'*') -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;

Comentario returns Comentario:
	{Comentario} /* ML_COMMENT | SL_COMMENT */ mensaje= COMENT;

Sentencias returns Sentencias:
	 Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;

Bloque returns Bloque:
	Si | mientras | repetir | desde | segun;

Declaracion returns Declaracion:
	DeclaracionVariable | DeclaracionPropia;
	
FuncionFicheroAbrir returns FuncionFicheroAbrir:
	'abrir('
		(variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
	')'
;

FuncionFicheroCerrar returns FuncionFicheroCerrar:
	'cerrar('
		(variable=Primaria)
	')'
;
	
ModoApertura returns ModoApertura:
	'escritura' | 'lectura';
	

terminal NOMBRE_FUN: ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ('(');


NombreInterna returns ecore::EString:
	'cos(' | 'cuadrado(' | 'exp(' | 'ln(' | 'log(' | 'sen(' | 'sqrt(' | 'longitud(' | 'concatena(' | 'copiar(';


EInt returns ecore::EInt:
	INT;
	 
//terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

EFloat returns ecore::EFloat:
	INT '.' INT (('E'|'e') INT)?;   
	//('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    //|   '.' ('0'..'9')+ EXPONENT?
    //|   ('0'..'9')+ EXPONENT
    //;

//ValorRegistro returns ValorRegistro:
//	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
	
//ValorVector returns ValorVector:
//	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;

Tipo returns Tipo:
	TipoDefinido | TipoExistente;
	
TipoDefinido returns TipoDefinido:
	tipo=EString;

TipoExistente returns TipoExistente:
	tipo=TipoVariable;

Constantes returns Constantes:
	variable=Variable '=' valor=Primaria;

Vector returns Vector:
	'vector' '['(valor=Primaria)']' 'de'  tipo=Tipo ': ' nombre=EString;

Matriz returns Matriz:
	'matriz' '['(valor+=Primaria)']['(valor+=Primaria)']' 'de' tipo=Tipo ': ' nombre=EString;
	

Registro returns Registro:
	'registro:' nombre=EString
			(variable+=Declaracion)+
	'fin_registro';
	
Archivo returns Archivo:
	'archivo de ' tipo=Tipo': ' nombre=EString;
	

Enumerado returns Enumerado:
	nombre=EString '=' '{'(valor+=Primaria (',' valor+=Primaria )* )'}';
	
Subrango returns Subrango:
	SubrangoNumerico | SubrangoEnumerado;

SubrangoNumerico returns SubrangoNumerico:
	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
	
SubrangoEnumerado returns SubrangoEnumerado:
	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);

Inicio returns Inicio:
	'principal'
	{Inicio}
	'var'
	(declaracion+=Declaracion)*
	'inicio'
		(tiene+=Sentencias)*
	'fin_principal';

EString returns ecore::EString:
	STRING | ID;

DeclaracionVariable returns DeclaracionVariable:
	tipo=TipoVariable ': '
	variable+=Variable ( ',' variable+=Variable)*;
	
DeclaracionPropia returns DeclaracionPropia:
	tipo=EString ': '
	variable+=Variable (',' variable+=Variable)*;

Asignacion returns Asignacion:
	AsignacionNormal | AsignacionCompleja;
	
AsignacionNormal returns AsignacionNormal:
	valor_asignacion=EString
//	 Mat+=MAT*
	'<-'
	operador=OperacionCompleta;
	
AsignacionCompleja returns AsignacionCompleja:
	valor_asignacion=VariablesComplejas
	'<-'
	operador=OperacionCompleta;

//AsignacionCompleja returns AsignacionCompleja:
//	operadores+=Primaria
//	Mat+=MAT*
//	 '='
//	operadores+=Primaria;

Escribir returns Escribir:
	'escribir('
		 operador+=Primaria ( "," operador+=OperacionCompleta)* 
	')';

Leer returns Leer:
	'leer(' 
		variable+=Primaria ( "," variable+=Primaria)*
	')';

Si returns Si:
	('si' 
	'(' | 'si(') valor=OperacionCompleta
	')' 'entonces'
		(sentencias+=Sentencias)*
		(devuelve=Devolver)?
	(sino=Sino)?
	'fin_si';

mientras returns mientras:
	('mientras'
	'(' | 'mientras(')
	valor=OperacionCompleta
	')' 'hacer'
		(sentencias+=Sentencias)* 
	'fin_mientras';

repetir returns repetir:
	'repetir'
		(sentencias+=Sentencias)*
	 ('hasta_que' '(' | 'hasta_que(')
	 valor=OperacionCompleta
	 ')';

desde returns desde:
	'desde' asignacion=AsignacionNormal 'hasta' valor=OperacionCompleta 'hacer'
		(sentencias+=Sentencias)*
	'fin_desde';
	
Caso returns Caso:
	'caso' operador=Primaria ': ' (sentencias+=Sentencias )* 
	(devuelve=Devolver)?
;
	
segun returns segun:
	('segun_sea''(' | 'segun_sea(') valor=OperacionCompleta')' 'hacer'
		(caso+=Caso )*
		'en_otro_caso:'
		(sentencias+=Sentencias )*
		(devuelve=Devolver)?
	'fin_segun';

//negacion returns negacion:
//	nombre=EString
//	ssigno=neg;
	
//unaria returns unaria:
//	ssigno=neg
//	variable=Primaria;

TipoVariable returns ecore::EString:
	'entero' | 'caracter' | 'real' | 'logico' | 'cadena';
	
Variable returns Variable:
	 {Variable} nombre=EString;
//	 Mat+=MAT*;

//VariableID returns VariableID:
//	{VariableID} nombre=EString;
	//Mat+=MAT*;

terminal CAD: '"' ('a'..'z'|'A'..'Z'|'_'|'-'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9'|':'|','|'.'|'á'|'é'|'í'|'ó'|'ú'|'ñ'|'Á'|'É'|'Í'|'Ó'|'Ú'|'Ñ')* '"';
terminal CAR: "'" ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9') "'";
terminal COMENT: '/*' ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9')* '*/';
 
signoOr returns signo:
	'o';

signoAnd returns signo:
	'y';
	
signoIgualdad returns signo:
	'=' | '!=';
	
signoComparacion returns signo:
	'<' | '>' | '>=' | '<=';

signoSuma returns signo:
	'+';
		
signoResta returns signo:
	'-';
	
signoMultiplicacion returns signo:
	'*';
	
signoDivision returns signo:
	'/';
	
signoModulo returns signo:
	'mod';
	
signoDiv returns signo:
	'div';
	
signoNo returns signo:
	'no';

operacion returns operacion:
	Or;

Or returns operacion:
	And ({Or.left=current} signo_op=signoOr negacionesFinales+=('-')* negacionesFinales+=('no')* right=And)*;

And returns operacion:
	Mod ({And.left=current} signo_op=signoAnd negacionesFinales+=('-')* negacionesFinales+=('no')* right=Mod)*;
	
Mod returns operacion:
	Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+=('-')* negacionesFinales+=('no')* right=Igualdad)*;

Igualdad returns operacion:
	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+=('-')* negacionesFinales+=('no')* right=Comparacion)*;

Comparacion returns operacion:
	SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+=('-')* negacionesFinales+=('no')* right=SumaResta)*;

SumaResta returns operacion:
	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) negacionesFinales+=('-')* negacionesFinales+=('no')* right=MultiplicacionDivision)*;

MultiplicacionDivision returns operacion:
	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision | {Div.left=current} signo_op=signoDiv) negacionesFinales+=('-')* negacionesFinales+=('no')* right=Primaria)*;
	
	
operacionIndice returns operacion:
	OrIndice;

OrIndice returns operacion:
	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*;

AndIndice returns operacion:
	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*;

IgualdadIndice returns operacion:
	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*;

ComparacionIndice returns operacion:
	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*;

SumaRestaIndice returns operacion:
	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) right=MultiplicacionDivisionIndice)*;

MultiplicacionDivisionIndice returns operacion:
	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision | {Div.left=current} signo_op=signoDiv) right=PrimariaIndice)*;

PrimariaIndice returns operacion:
	{NumeroEntero} valor=EInt
	| {VariableID} nombre=EString;

Primaria returns operacion:
	VariablesBasicas |
	VariablesComplejas
	| Funciones
	| OperacionParentesis;
	
OperacionCompleta returns operacion:
	{OperacionCompleta} negacionesIniciales+=('-')* negacionesIniciales+=('no')* valor_operacion=operacion;
	
OperacionParentesis returns operacion:
	{OperacionParentesis} '(' negacionesFinales+=('-')* negacionesFinales+=('no')* valor_operacion=operacion ')';
	
Funciones returns operacion:
	({LlamadaFuncion} (nombre=NOMBRE_FUN) (operadores+=OperacionCompleta ( ',' operadores+=OperacionCompleta)* )? ')') |
	({Internas} (nombre=NombreInterna) (operadores+=OperacionCompleta ( ',' operadores+=OperacionCompleta)* )? ')');
	
CampoRegistro returns CampoRegistro:
	'.' nombre_campo=EString | '.' nombre_campo=EString '['(primerIndice=operacionIndice)']' | '.' nombre_campo=EString '['(primerIndice=operacionIndice)']['(segundoIndice=operacionIndice)']';
	
VariablesComplejas returns operacion:
	{ValorVector} ((nombre_vector=EString)'['(indice=operacionIndice)']') (campo+=CampoRegistro)*
	| {ValorMatriz} ((nombre_matriz=EString)'['(primerIndice=operacionIndice)']['(segundoIndice=operacionIndice)']') (campo+=CampoRegistro)*
	| {ValorRegistro} nombre_registro=EString (campo+=CampoRegistro)+;
	
VariablesBasicas returns operacion:
	 {NumeroEntero} valor=EInt
	| {NumeroDecimal} valor=EFloat
	| {ConstCadena} contenido=CAD
	| {Caracter} contenido=CAR
	| {ValorBooleano} valor=Booleano
	| {VariableID} nombre=EString;

Sino returns Sino:
	{Sino}
	'si_no'
	(sentencias+=Sentencias)*
	(devuelve=Devolver)?;

Devolver returns Devolver:
	{Devolver}
	'devolver' devuelve=OperacionCompleta;
	
ParametroFuncion returns ParametroFuncion:
	paso=TipoPaso
	tipo=Tipo ": "
	variable=Variable;

Funcion returns Funcion:
	(tipo=TipoVariable)
	'funcion'
	nombre=NOMBRE_FUN(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	('var'
	(declaracion+=Declaracion)* )? 
	'inicio'
	(sentencias+=Sentencias)*
	(devuelve=Devolver)?
	'fin_funcion';
	
Procedimiento returns Procedimiento:
	'procedimiento'
	nombre=NOMBRE_FUN(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	('var'
	(declaracion+=Declaracion)* )?
	'inicio'
	(sentencias+=Sentencias)*
	'fin_procedimiento';
	
TipoPaso returns ecore::EString:
	'E' | 'E/S' | 'S';
	
Booleano returns ecore::EString:
	'verdadero' | 'falso';