package vary.pseudocodigo.dsl.c.generator;

import java.util.List;

import org.eclipse.emf.common.util.EList;

import diagramapseudocodigo.Algoritmo;
import diagramapseudocodigo.And;
import diagramapseudocodigo.Archivo;
import diagramapseudocodigo.AsignacionCompleja;
import diagramapseudocodigo.AsignacionNormal;
import diagramapseudocodigo.CampoRegistro;
import diagramapseudocodigo.Caracter;
import diagramapseudocodigo.Caso;
import diagramapseudocodigo.Codigo;
import diagramapseudocodigo.Comparacion;
import diagramapseudocodigo.CadenaCaracteres;
import diagramapseudocodigo.Constante;
import diagramapseudocodigo.Declaracion;
import diagramapseudocodigo.DeclaracionDefinida;
import diagramapseudocodigo.DeclaracionBasica;
import diagramapseudocodigo.Devolver;
import diagramapseudocodigo.DivisionEntera;
import diagramapseudocodigo.DivisionReal;
import diagramapseudocodigo.Enumerado;
import diagramapseudocodigo.Escribir;
import diagramapseudocodigo.Funcion;
import diagramapseudocodigo.FuncionFicheroAbrir;
import diagramapseudocodigo.FuncionFicheroCerrar;
import diagramapseudocodigo.Igualdad;
import diagramapseudocodigo.Inicio;
import diagramapseudocodigo.FuncionInterna;
import diagramapseudocodigo.Leer;
import diagramapseudocodigo.LlamadaFuncion;
import diagramapseudocodigo.Matriz;
import diagramapseudocodigo.Modulo;
import diagramapseudocodigo.Multiplicacion;
import diagramapseudocodigo.Real;
import diagramapseudocodigo.Entero;
import diagramapseudocodigo.Or;
import diagramapseudocodigo.Parametro;
import diagramapseudocodigo.Procedimiento;
import diagramapseudocodigo.Registro;
import diagramapseudocodigo.Resta;
import diagramapseudocodigo.Sentencia;
import diagramapseudocodigo.Si;
import diagramapseudocodigo.Sino;
import diagramapseudocodigo.Subproceso;
import diagramapseudocodigo.SubrangoEnumerado;
import diagramapseudocodigo.SubrangoNumerico;
import diagramapseudocodigo.Suma;
import diagramapseudocodigo.Tipo;
import diagramapseudocodigo.TipoComplejo;
import diagramapseudocodigo.TipoDefinido;
import diagramapseudocodigo.TipoFuncion;
import diagramapseudocodigo.TipoProcedimiento;
import diagramapseudocodigo.TipoBasico;
import diagramapseudocodigo.Logico;
import diagramapseudocodigo.ValorComplejo;
import diagramapseudocodigo.ValorMatriz;
import diagramapseudocodigo.ValorRegistro;
import diagramapseudocodigo.ValorVector;
import diagramapseudocodigo.VariableID;
import diagramapseudocodigo.Vector;
import diagramapseudocodigo.Desde;
import diagramapseudocodigo.Mientras;
import diagramapseudocodigo.Mod;
import diagramapseudocodigo.Operacion;
import diagramapseudocodigo.OperacionCompleta;
import diagramapseudocodigo.OperacionParentesis;
import diagramapseudocodigo.Repetir;
import diagramapseudocodigo.Segun;

public interface VaryGeneratorInterface {
	CharSequence generate(Codigo codigo);
	CharSequence generate(Algoritmo algoritmo);
	CharSequence generate(Modulo modulo);
	CharSequence generate(TipoComplejo complejo);
	CharSequence generate(Vector vector);
	CharSequence generate(Matriz matriz);
	CharSequence generate(Registro registro);
	CharSequence generate(Archivo archivo);
	CharSequence generate(Enumerado enumerado);
	CharSequence generate(SubrangoNumerico subrango);
	CharSequence generate(SubrangoEnumerado subrango);
	CharSequence generate(TipoFuncion tipoFuncion);
	CharSequence generate(TipoProcedimiento tipoProcedimiento);
	CharSequence generate(Tipo tipo);
	CharSequence generate(TipoBasico tipo);
	CharSequence generate(TipoDefinido tipo);
	CharSequence generate(Subproceso subproceso);
	CharSequence generate(Funcion funcion);
	CharSequence generate(Procedimiento procedimiento);
	CharSequence generate(Declaracion declaracion);
	CharSequence generate(DeclaracionBasica declaracion);
	CharSequence generate(DeclaracionDefinida declaracion);
	CharSequence generate(FuncionInterna interna, boolean sentencia, List<String> punteros);
	CharSequence generate(Si si, List<String> punteros);
	CharSequence generate(Sino sino, List<String> punteros);
	CharSequence generate(Segun segun, List<String> punteros);
	CharSequence generate(Caso caso, List<String> punteros);
	CharSequence generate(Mientras mientras, List<String> punteros);
	CharSequence generate(Desde desde, List<String> punteros);
	CharSequence generate(Repetir repetir, List<String> punteros);
	CharSequence generate(Devolver devolver, List<String> punteros);
	CharSequence generate(Inicio inicio);
	CharSequence generate(Sentencia sentencia, List<String> punteros);
	CharSequence generate(ValorComplejo valor);
	CharSequence generate(ValorRegistro valor);
	CharSequence generate(CampoRegistro campo);
	CharSequence generate(ValorVector valor);
	CharSequence generate(ValorMatriz valor);
	CharSequence generate(Operacion operacion, List<String> punteros);
	CharSequence generate(Entero entero);
	CharSequence generate(Real decimal);
	CharSequence generate(Logico booleano);
	CharSequence generate(CadenaCaracteres cadena);
	CharSequence generate(Caracter caracter);
	CharSequence generate(VariableID variable);
	CharSequence generate(Suma suma, List<String> punteros);
	CharSequence generate(Resta resta, List<String> punteros);
	CharSequence generate(DivisionEntera divisionEntera, List<String> punteros);
	CharSequence generate(Multiplicacion multiplicacion, List<String> punteros);
	CharSequence generate(OperacionParentesis operacionParentesis, List<String> punteros);
	CharSequence generate(DivisionReal divisionReal, List<String> punteros);
	CharSequence generate(Mod mod, List<String> punteros);
	CharSequence generate(Or or, List<String> punteros);
	CharSequence generate(And and, List<String> punteros);
	CharSequence generate(Comparacion comparacion, List<String> punteros);
	CharSequence generate(Igualdad igualdad, List<String> punteros);
	CharSequence generate(OperacionCompleta operacionCompleta, List<String> punteros);
	CharSequence generate(Constante constante);
	CharSequence generate(AsignacionNormal asignacionNormal, List<String> punteros);
	CharSequence generate(AsignacionCompleja asignacionCompleja, List<String> punteros);
	CharSequence generate(LlamadaFuncion llamadaFuncion, boolean sentencia, List<String> punteros);
	CharSequence generate(FuncionFicheroAbrir funcion);
	CharSequence generate(FuncionFicheroCerrar funcion);
	CharSequence generate(Escribir escribir, List<String> punteros, List<Sentencia> sentencias, List<Subproceso> subprocesos, boolean inicio);
	CharSequence generate(Leer leer, List<Sentencia> sentencias, List<Subproceso> subprocesos, boolean inicio);
	CharSequence generate(EList<Parametro> parametros);
}
