/*
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import vary.pseudocodigo.dsl.c.generator.util.ReadFileProperties
import vary.pseudocodigo.dsl.c.generator.util.ProjectLocationFolder
import java.io.IOException
import diagramapseudocodigo.Codigo
import vary.pseudocodigo.dsl.c.generator.c.VaryGrammarGeneratorC
import vary.pseudocodigo.dsl.c.generator.cpp.VaryGrammarGeneratorCPP

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class VaryGrammarGenerator implements IGenerator {
	
	static ReadFileProperties readerFileProperties = new ReadFileProperties();

	//EMap<String, TipoVariable> tablaSimbolos;
	override void doGenerate(Resource resource, IFileSystemAccess myCFile) {

		for (myPseudo : resource.allContents.toIterable.filter(typeof(Codigo))) {
			
			ProjectLocationFolder.setResource(resource);
			
			System.out.println("La uri cogida es:"+ProjectLocationFolder.getPath())
			var contenidoFichero = new String();
			
			try {
					
				if(ProjectLocationFolder.getOS().equals("WIN32")) {
					contenidoFichero = readerFileProperties.readFilePropertiesWindows(ProjectLocationFolder.getPath() + ".varyproject", 2);
				}
					
				else {
					contenidoFichero = readerFileProperties.readFilePropertiesUnix("file:"+ProjectLocationFolder.getPath(), 2);
				}
					
			} catch(IOException e) {
				e.printStackTrace();
			}
			
			//Recogemos la selecci√≥n del lenguaje desde el fichero oculto
			
			var tipoProyecto = contenidoFichero.replaceAll("lenguajeGeneracion=","");
			
			if(tipoProyecto == "C") {
				var generadorC = new VaryGrammarGeneratorC()
				generadorC.doGenerate(resource, myCFile)
			}
			else {
				var generadorCPP = new VaryGrammarGeneratorCPP()
				generadorCPP.doGenerate(resource, myCFile)
			}
		}
	}
}
