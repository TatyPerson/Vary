/*
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import vary.pseudocodigo.dsl.c.services.VaryGrammarGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class VaryGrammarFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension VaryGrammarGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		for(pair: findKeywordPairs('{', '}')) {
			c.setIndentation(pair.first, pair.second)
			c.setLinewrap(1).after(pair.first)
			c.setLinewrap(1).before(pair.second)
			c.setLinewrap(1).after(pair.second)
		}
		for(comma: findKeywords(',')) {
			c.setNoLinewrap().before(comma)
			c.setNoSpace().before(comma)
			c.setLinewrap().after(comma)
		}
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
		
		for(comma: findKeywords(",")) {
            c.setNoLinewrap().before(comma);
            c.setNoSpace().before(comma);
            c.setSpace(" ").after(comma);
        }
        
        for(comentario: findKeywords("//")) {
        	c.setLinewrap(2).before(comentario);
        }
        
        for(dosPuntos: findKeywords(":")) {
        	c.setNoSpace().before(dosPuntos);
        	c.setNoSpace().after(dosPuntos);
        }
        
        for(menosMenos: findKeywords("--")) {
        	c.setNoSpace().before(menosMenos);
        }
        
        for(masMas: findKeywords("++")) {
        	c.setNoSpace().before(masMas);
        }
        
        //Para el formato de los registros:
        for(registro: findKeywords("registro:")) {
        	c.setLinewrap(1).before(registro);
        }
        for(finRegistro: findKeywords("fin_registro")) {
        	c.setLinewrap(2).after(finRegistro);
        }
        c.setLinewrap(1).after(getRegistroAccess().getNombreEStringParserRuleCall_1_0());
        c.setLinewrap(2).after(getTipoComplejoRule());
        c.setLinewrap(1).after(getDeclaracionRule());
        
        
        c.setLinewrap(1).after(getDeclaracionVariableRule());
        
        for(variable: findKeywords(".")) {
        	c.setNoSpace().before(variable);
        	c.setNoSpace().after(variable);
        }
        
        c.setLinewrap(2).after(getSentenciasRule());
        
        for(keyEntonces: findKeywords("entonces")) {
        	c.setLinewrap(2).after(keyEntonces);
        }
        
        for(llave: findKeywords("[")) {
        	c.setNoSpace().before(llave);
        	c.setNoSpace().after(llave);
        }
        
        for(llave: findKeywords("]")) {
        	c.setNoSpace().before(llave);
        }
        
        for(llave: findKeywords("][")) {
        	c.setNoSpace().before(llave);
        	c.setNoSpace().after(llave);
        }
        
        for(llave: findKeywords("(")) {
        	c.setNoSpace().after(llave);
        	c.setNoSpace().before(llave);
        }
        
        for(llave: findKeywords(")")) {
        	c.setNoSpace().before(llave);
        }
        
        for(keyConst: findKeywords("const")) {
        	c.setLinewrap(2).before(keyConst);
        }
        
        for(keyTipo: findKeywords("tipo")) {
        	c.setLinewrap(2).before(keyTipo);
        }
        
        
        for(keyInicio: findKeywords("inicio")) {
        	c.setLinewrap(2).before(keyInicio);
        }
        
        for(keyFinDesde: findKeywords("fin_desde")) {
        	c.setLinewrap(2).after(keyFinDesde);
        }
        
        for(keyConst: findKeywords("const")) {
        	c.setIndentationIncrement().after(keyConst);
        }
        
        for(keyTipo: findKeywords("tipo")) {
        	c.setIndentationDecrement().before(keyTipo);
        	c.setIndentationIncrement().after(keyTipo);
        }
        
        c.setIndentationDecrement().before(getSubprocesoRule());
        
        
        for(keyVar: findKeywords("var")) {
        	c.setLinewrap(2).before(keyVar);
        	c.setLinewrap(2).after(keyVar);
        	c.setIndentationIncrement().before(keyVar);
        	c.setIndentationIncrement().after(keyVar);
        }
        
        c.setLinewrap(2).after(getSubprocesoRule());

        c.setLinewrap(2).after(getTipoComplejoRule());
        
        for(keyInicio: findKeywords("inicio")) {
        	c.setIndentationDecrement().before(keyInicio);
        	c.setIndentationIncrement().after(keyInicio);
        }
        
        c.setLinewrap(2).after(getDevolverRule());
        
        for(keyFinFuncion: findKeywords("fin_funcion")) {
        	c.setIndentationDecrement().before(keyFinFuncion);
        }
        
        c.setIndentationDecrement().between(getSubprocesoRule(), getInicioRule());
        c.setIndentationDecrement().between(getSubprocesoRule(), getInicioRule());
        
        for(keyFinProc: findKeywords("fin_procedimiento")) {
        	c.setIndentationDecrement().before(keyFinProc);
        }
        
        for(keyFinInicio: findKeywords("fin_inicio")) {
        	c.setIndentationDecrement().before(keyFinInicio);
        }
        
        for(keyHacerDesde: findKeywords("hacer")) {
        	c.setLinewrap(1).after(keyHacerDesde);
        	c.setIndentationIncrement().before(keyHacerDesde);
        }
        
        for(keyFinDesde: findKeywords("fin_desde")) {
        	c.setIndentationDecrement().before(keyFinDesde);
        }
        
        for(keyEntoncesSi: findKeywords("entonces")) {
        	c.setIndentationIncrement().before(keyEntoncesSi);
        }
        
        for(keySinoSi: findKeywords("sino")) {
        	c.setIndentationDecrement().before(keySinoSi);
        	c.setIndentationIncrement().after(keySinoSi);
        }
        
        for(keyFinSi: findKeywords("fin_si")) {
        	c.setIndentationDecrement().before(keyFinSi);
        }
        
        for(keyFinMientras: findKeywords("fin_mientras")) {
        	c.setIndentationDecrement().before(keyFinMientras);
        }
        
        for(keyRepetir: findKeywords("repetir")) {
        	c.setIndentationIncrement().after(keyRepetir);
        }
        
        for(keyHastaQueRepetir: findKeywords("hasta_que")) {
        	c.setIndentationDecrement().before(keyHastaQueRepetir);
        }
        
        for(keyFinSegun: findKeywords("fin_segun")) {
        	c.setIndentationDecrement().before(keyFinSegun);
        }
        
        c.setLinewrap(1).after(getSentenciasRule());
	}
}
