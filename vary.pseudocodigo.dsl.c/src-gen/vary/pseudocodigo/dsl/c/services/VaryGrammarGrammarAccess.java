/*
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VaryGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodigoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Codigo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlgoritmoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuloParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Codigo:
		//	Algoritmo | Modulo;
		@Override public ParserRule getRule() { return rule; }

		//Algoritmo | Modulo
		public Alternatives getAlternatives() { return cAlternatives; }

		//Algoritmo
		public RuleCall getAlgoritmoParserRuleCall_0() { return cAlgoritmoParserRuleCall_0; }

		//Modulo
		public RuleCall getModuloParserRuleCall_1() { return cModuloParserRuleCall_1; }
	}

	public class AlgoritmoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Algoritmo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgoritmoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportacionesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportacionesModuloCrossReference_2_1_0 = (CrossReference)cImportacionesAssignment_2_1.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_2_1_0_1 = (RuleCall)cImportacionesModuloCrossReference_2_1_0.eContents().get(1);
		private final Keyword cFin_importaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstantesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstantesConstanteParserRuleCall_3_1_0 = (RuleCall)cConstantesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTipoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComplejosAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComplejosTipoComplejoParserRuleCall_4_1_0 = (RuleCall)cComplejosAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGlobalesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGlobalesDeclaracionParserRuleCall_5_1_0 = (RuleCall)cGlobalesAssignment_5_1.eContents().get(0);
		private final Assignment cSubprocesosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubprocesosSubprocesoParserRuleCall_6_0 = (RuleCall)cSubprocesosAssignment_6.eContents().get(0);
		private final Assignment cInicioAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInicioInicioParserRuleCall_7_0 = (RuleCall)cInicioAssignment_7.eContents().get(0);
		private final Keyword cFin_algoritmoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Algoritmo:
		//	'Algoritmo' nombre=EString ('importa'
		//	importaciones+=[Modulo]*
		//	'fin_importa')? ('const'
		//	constantes+=Constante*)? ('tipo'
		//	complejos+=TipoComplejo*)? ('var'
		//	globales+=Declaracion*)?
		//	subprocesos+=Subproceso*
		//	inicio=Inicio
		//	'fin_algoritmo';
		@Override public ParserRule getRule() { return rule; }

		//'Algoritmo' nombre=EString ('importa' importaciones+=[Modulo]* 'fin_importa')? ('const' constantes+=Constante*)? ('tipo'
		//complejos+=TipoComplejo*)? ('var' globales+=Declaracion*)? subprocesos+=Subproceso* inicio=Inicio 'fin_algoritmo'
		public Group getGroup() { return cGroup; }

		//'Algoritmo'
		public Keyword getAlgoritmoKeyword_0() { return cAlgoritmoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//('importa' importaciones+=[Modulo]* 'fin_importa')?
		public Group getGroup_2() { return cGroup_2; }

		//'importa'
		public Keyword getImportaKeyword_2_0() { return cImportaKeyword_2_0; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_2_1() { return cImportacionesAssignment_2_1; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_2_1_0() { return cImportacionesModuloCrossReference_2_1_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_2_1_0_1() { return cImportacionesModuloIDTerminalRuleCall_2_1_0_1; }

		//'fin_importa'
		public Keyword getFin_importaKeyword_2_2() { return cFin_importaKeyword_2_2; }

		//('const' constantes+=Constante*)?
		public Group getGroup_3() { return cGroup_3; }

		//'const'
		public Keyword getConstKeyword_3_0() { return cConstKeyword_3_0; }

		//constantes+=Constante*
		public Assignment getConstantesAssignment_3_1() { return cConstantesAssignment_3_1; }

		//Constante
		public RuleCall getConstantesConstanteParserRuleCall_3_1_0() { return cConstantesConstanteParserRuleCall_3_1_0; }

		//('tipo' complejos+=TipoComplejo*)?
		public Group getGroup_4() { return cGroup_4; }

		//'tipo'
		public Keyword getTipoKeyword_4_0() { return cTipoKeyword_4_0; }

		//complejos+=TipoComplejo*
		public Assignment getComplejosAssignment_4_1() { return cComplejosAssignment_4_1; }

		//TipoComplejo
		public RuleCall getComplejosTipoComplejoParserRuleCall_4_1_0() { return cComplejosTipoComplejoParserRuleCall_4_1_0; }

		//('var' globales+=Declaracion*)?
		public Group getGroup_5() { return cGroup_5; }

		//'var'
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }

		//globales+=Declaracion*
		public Assignment getGlobalesAssignment_5_1() { return cGlobalesAssignment_5_1; }

		//Declaracion
		public RuleCall getGlobalesDeclaracionParserRuleCall_5_1_0() { return cGlobalesDeclaracionParserRuleCall_5_1_0; }

		//subprocesos+=Subproceso*
		public Assignment getSubprocesosAssignment_6() { return cSubprocesosAssignment_6; }

		//Subproceso
		public RuleCall getSubprocesosSubprocesoParserRuleCall_6_0() { return cSubprocesosSubprocesoParserRuleCall_6_0; }

		//inicio=Inicio
		public Assignment getInicioAssignment_7() { return cInicioAssignment_7; }

		//Inicio
		public RuleCall getInicioInicioParserRuleCall_7_0() { return cInicioInicioParserRuleCall_7_0; }

		//'fin_algoritmo'
		public Keyword getFin_algoritmoKeyword_8() { return cFin_algoritmoKeyword_8; }
	}

	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cImportaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportacionesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cImportacionesModuloCrossReference_3_0 = (CrossReference)cImportacionesAssignment_3.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_3_0_1 = (RuleCall)cImportacionesModuloCrossReference_3_0.eContents().get(1);
		private final Keyword cFin_importaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExportaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cConstKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cExporta_constantesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cExporta_constantesEStringParserRuleCall_5_1_1_0 = (RuleCall)cExporta_constantesAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cTipoKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cExporta_tiposAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cExporta_tiposEStringParserRuleCall_5_2_1_0 = (RuleCall)cExporta_tiposAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cVarKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cExporta_globalesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cExporta_globalesDeclaracionParserRuleCall_5_3_1_0 = (RuleCall)cExporta_globalesAssignment_5_3_1.eContents().get(0);
		private final Assignment cExporta_subprocesosAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExporta_subprocesosCabeceraSubprocesoParserRuleCall_5_4_0 = (RuleCall)cExporta_subprocesosAssignment_5_4.eContents().get(0);
		private final Keyword cFin_exportaKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cImplementacionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImplementacionImplementacionParserRuleCall_6_0 = (RuleCall)cImplementacionAssignment_6.eContents().get(0);
		private final Keyword cFin_moduloKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Modulo:
		//	'Modulo' nombre=ID
		//	'importa'
		//	importaciones+=[Modulo]*
		//	'fin_importa' ('exporta' ('const'
		//	exporta_constantes+=EString*)? ('tipo'
		//	exporta_tipos+=EString*)? ('var'
		//	exporta_globales+=Declaracion*)?
		//	exporta_subprocesos+=CabeceraSubproceso*
		//	'fin_exporta') implementacion=Implementacion
		//	'fin_modulo';
		@Override public ParserRule getRule() { return rule; }

		//'Modulo' nombre=ID 'importa' importaciones+=[Modulo]* 'fin_importa' ('exporta' ('const' exporta_constantes+=EString*)?
		//('tipo' exporta_tipos+=EString*)? ('var' exporta_globales+=Declaracion*)? exporta_subprocesos+=CabeceraSubproceso*
		//'fin_exporta') implementacion=Implementacion 'fin_modulo'
		public Group getGroup() { return cGroup; }

		//'Modulo'
		public Keyword getModuloKeyword_0() { return cModuloKeyword_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//'importa'
		public Keyword getImportaKeyword_2() { return cImportaKeyword_2; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_3() { return cImportacionesAssignment_3; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_3_0() { return cImportacionesModuloCrossReference_3_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_3_0_1() { return cImportacionesModuloIDTerminalRuleCall_3_0_1; }

		//'fin_importa'
		public Keyword getFin_importaKeyword_4() { return cFin_importaKeyword_4; }

		//('exporta' ('const' exporta_constantes+=EString*)? ('tipo' exporta_tipos+=EString*)? ('var'
		//exporta_globales+=Declaracion*)? exporta_subprocesos+=CabeceraSubproceso* 'fin_exporta')
		public Group getGroup_5() { return cGroup_5; }

		//'exporta'
		public Keyword getExportaKeyword_5_0() { return cExportaKeyword_5_0; }

		//('const' exporta_constantes+=EString*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'const'
		public Keyword getConstKeyword_5_1_0() { return cConstKeyword_5_1_0; }

		//exporta_constantes+=EString*
		public Assignment getExporta_constantesAssignment_5_1_1() { return cExporta_constantesAssignment_5_1_1; }

		//EString
		public RuleCall getExporta_constantesEStringParserRuleCall_5_1_1_0() { return cExporta_constantesEStringParserRuleCall_5_1_1_0; }

		//('tipo' exporta_tipos+=EString*)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//'tipo'
		public Keyword getTipoKeyword_5_2_0() { return cTipoKeyword_5_2_0; }

		//exporta_tipos+=EString*
		public Assignment getExporta_tiposAssignment_5_2_1() { return cExporta_tiposAssignment_5_2_1; }

		//EString
		public RuleCall getExporta_tiposEStringParserRuleCall_5_2_1_0() { return cExporta_tiposEStringParserRuleCall_5_2_1_0; }

		//('var' exporta_globales+=Declaracion*)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//'var'
		public Keyword getVarKeyword_5_3_0() { return cVarKeyword_5_3_0; }

		//exporta_globales+=Declaracion*
		public Assignment getExporta_globalesAssignment_5_3_1() { return cExporta_globalesAssignment_5_3_1; }

		//Declaracion
		public RuleCall getExporta_globalesDeclaracionParserRuleCall_5_3_1_0() { return cExporta_globalesDeclaracionParserRuleCall_5_3_1_0; }

		//exporta_subprocesos+=CabeceraSubproceso*
		public Assignment getExporta_subprocesosAssignment_5_4() { return cExporta_subprocesosAssignment_5_4; }

		//CabeceraSubproceso
		public RuleCall getExporta_subprocesosCabeceraSubprocesoParserRuleCall_5_4_0() { return cExporta_subprocesosCabeceraSubprocesoParserRuleCall_5_4_0; }

		//'fin_exporta'
		public Keyword getFin_exportaKeyword_5_5() { return cFin_exportaKeyword_5_5; }

		//implementacion=Implementacion
		public Assignment getImplementacionAssignment_6() { return cImplementacionAssignment_6; }

		//Implementacion
		public RuleCall getImplementacionImplementacionParserRuleCall_6_0() { return cImplementacionImplementacionParserRuleCall_6_0; }

		//'fin_modulo'
		public Keyword getFin_moduloKeyword_7() { return cFin_moduloKeyword_7; }
	}

	public class ImplementacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Implementacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementacionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImplementacionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cConstKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cConstantesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstantesConstanteParserRuleCall_1_1_1_0 = (RuleCall)cConstantesAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cTipoKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cComplejosAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cComplejosTipoComplejoParserRuleCall_1_2_1_0 = (RuleCall)cComplejosAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cVarKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cGlobalesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cGlobalesDeclaracionParserRuleCall_1_3_1_0 = (RuleCall)cGlobalesAssignment_1_3_1.eContents().get(0);
		private final Assignment cSubprocesosAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSubprocesosSubprocesoParserRuleCall_1_4_0 = (RuleCall)cSubprocesosAssignment_1_4.eContents().get(0);
		private final Keyword cFin_implementacionKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Implementacion:
		//	{Implementacion} ('implementacion' ('const'
		//	constantes+=Constante*)? ('tipo'
		//	complejos+=TipoComplejo*)? ('var'
		//	globales+=Declaracion*)?
		//	subprocesos+=Subproceso*
		//	'fin_implementacion');
		@Override public ParserRule getRule() { return rule; }

		//{Implementacion} ('implementacion' ('const' constantes+=Constante*)? ('tipo' complejos+=TipoComplejo*)? ('var'
		//globales+=Declaracion*)? subprocesos+=Subproceso* 'fin_implementacion')
		public Group getGroup() { return cGroup; }

		//{Implementacion}
		public Action getImplementacionAction_0() { return cImplementacionAction_0; }

		//('implementacion' ('const' constantes+=Constante*)? ('tipo' complejos+=TipoComplejo*)? ('var' globales+=Declaracion*)?
		//subprocesos+=Subproceso* 'fin_implementacion')
		public Group getGroup_1() { return cGroup_1; }

		//'implementacion'
		public Keyword getImplementacionKeyword_1_0() { return cImplementacionKeyword_1_0; }

		//('const' constantes+=Constante*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'const'
		public Keyword getConstKeyword_1_1_0() { return cConstKeyword_1_1_0; }

		//constantes+=Constante*
		public Assignment getConstantesAssignment_1_1_1() { return cConstantesAssignment_1_1_1; }

		//Constante
		public RuleCall getConstantesConstanteParserRuleCall_1_1_1_0() { return cConstantesConstanteParserRuleCall_1_1_1_0; }

		//('tipo' complejos+=TipoComplejo*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'tipo'
		public Keyword getTipoKeyword_1_2_0() { return cTipoKeyword_1_2_0; }

		//complejos+=TipoComplejo*
		public Assignment getComplejosAssignment_1_2_1() { return cComplejosAssignment_1_2_1; }

		//TipoComplejo
		public RuleCall getComplejosTipoComplejoParserRuleCall_1_2_1_0() { return cComplejosTipoComplejoParserRuleCall_1_2_1_0; }

		//('var' globales+=Declaracion*)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//'var'
		public Keyword getVarKeyword_1_3_0() { return cVarKeyword_1_3_0; }

		//globales+=Declaracion*
		public Assignment getGlobalesAssignment_1_3_1() { return cGlobalesAssignment_1_3_1; }

		//Declaracion
		public RuleCall getGlobalesDeclaracionParserRuleCall_1_3_1_0() { return cGlobalesDeclaracionParserRuleCall_1_3_1_0; }

		//subprocesos+=Subproceso*
		public Assignment getSubprocesosAssignment_1_4() { return cSubprocesosAssignment_1_4; }

		//Subproceso
		public RuleCall getSubprocesosSubprocesoParserRuleCall_1_4_0() { return cSubprocesosSubprocesoParserRuleCall_1_4_0; }

		//'fin_implementacion'
		public Keyword getFin_implementacionKeyword_1_5() { return cFin_implementacionKeyword_1_5; }
	}

	public class CabeceraSubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CabeceraSubproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCabeceraProcedimientoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCabeceraFuncionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CabeceraSubproceso:
		//	CabeceraProcedimiento | CabeceraFuncion;
		@Override public ParserRule getRule() { return rule; }

		//CabeceraProcedimiento | CabeceraFuncion
		public Alternatives getAlternatives() { return cAlternatives; }

		//CabeceraProcedimiento
		public RuleCall getCabeceraProcedimientoParserRuleCall_0() { return cCabeceraProcedimientoParserRuleCall_0; }

		//CabeceraFuncion
		public RuleCall getCabeceraFuncionParserRuleCall_1() { return cCabeceraFuncionParserRuleCall_1; }
	}

	public class CabeceraProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CabeceraProcedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametrosAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_2_0_0 = (RuleCall)cParametrosAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametrosAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_2_1_1_0 = (RuleCall)cParametrosAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CabeceraProcedimiento:
		//	'procedimiento'
		//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//'procedimiento' nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')'
		public Group getGroup() { return cGroup; }

		//'procedimiento'
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_1_0; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_0() { return cParametrosAssignment_2_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_0_0() { return cParametrosParametroParserRuleCall_2_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_1_1() { return cParametrosAssignment_2_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_1_1_0() { return cParametrosParametroParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CabeceraFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CabeceraFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrosAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_3_0_0 = (RuleCall)cParametrosAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrosAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_3_1_1_0 = (RuleCall)cParametrosAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CabeceraFuncion:
		//	tipo=TipoVariable 'funcion'
		//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable 'funcion' nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')'
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//'funcion'
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_2_0() { return cNombreNOMBRE_FUNTerminalRuleCall_2_0; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_0() { return cParametrosAssignment_3_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_0_0() { return cParametrosParametroParserRuleCall_3_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_1_1() { return cParametrosAssignment_3_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_1_1_0() { return cParametrosParametroParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TipoComplejoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoComplejo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatrizParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegistroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArchivoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumeradoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubrangoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTipoSubprocesoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//TipoComplejo:
		//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango | TipoSubproceso;
		@Override public ParserRule getRule() { return rule; }

		//Vector | Matriz | Registro | Archivo | Enumerado | Subrango | TipoSubproceso
		public Alternatives getAlternatives() { return cAlternatives; }

		//Vector
		public RuleCall getVectorParserRuleCall_0() { return cVectorParserRuleCall_0; }

		//Matriz
		public RuleCall getMatrizParserRuleCall_1() { return cMatrizParserRuleCall_1; }

		//Registro
		public RuleCall getRegistroParserRuleCall_2() { return cRegistroParserRuleCall_2; }

		//Archivo
		public RuleCall getArchivoParserRuleCall_3() { return cArchivoParserRuleCall_3; }

		//Enumerado
		public RuleCall getEnumeradoParserRuleCall_4() { return cEnumeradoParserRuleCall_4; }

		//Subrango
		public RuleCall getSubrangoParserRuleCall_5() { return cSubrangoParserRuleCall_5; }

		//TipoSubproceso
		public RuleCall getTipoSubprocesoParserRuleCall_6() { return cTipoSubprocesoParserRuleCall_6; }
	}

	public class TipoSubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoSubproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TipoSubproceso:
		//	TipoFuncion | TipoProcedimiento;
		@Override public ParserRule getRule() { return rule; }

		//TipoFuncion | TipoProcedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//TipoFuncion
		public RuleCall getTipoFuncionParserRuleCall_0() { return cTipoFuncionParserRuleCall_0; }

		//TipoProcedimiento
		public RuleCall getTipoProcedimientoParserRuleCall_1() { return cTipoProcedimientoParserRuleCall_1; }
	}

	public class TipoFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrosAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_3_0_0 = (RuleCall)cParametrosAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrosAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_3_1_1_0 = (RuleCall)cParametrosAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonSpaceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNombreAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNombreEStringParserRuleCall_6_0 = (RuleCall)cNombreAssignment_6.eContents().get(0);
		
		//TipoFuncion:
		//	tipo=TipoVariable 'funcion'
		//	'(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable 'funcion' '(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//'funcion'
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_0() { return cParametrosAssignment_3_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_0_0() { return cParametrosParametroParserRuleCall_3_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_1_1() { return cParametrosAssignment_3_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_1_1_0() { return cParametrosParametroParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//': '
		public Keyword getColonSpaceKeyword_5() { return cColonSpaceKeyword_5; }

		//nombre=EString
		public Assignment getNombreAssignment_6() { return cNombreAssignment_6; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_6_0() { return cNombreEStringParserRuleCall_6_0; }
	}

	public class TipoProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoProcedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametrosAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_2_0_0 = (RuleCall)cParametrosAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametrosAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_2_1_1_0 = (RuleCall)cParametrosAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonSpaceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNombreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNombreEStringParserRuleCall_5_0 = (RuleCall)cNombreAssignment_5.eContents().get(0);
		
		//TipoProcedimiento:
		//	'procedimiento'
		//	'(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'procedimiento' '(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'procedimiento'
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_0() { return cParametrosAssignment_2_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_0_0() { return cParametrosParametroParserRuleCall_2_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_1_1() { return cParametrosAssignment_2_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_1_1_0() { return cParametrosParametroParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//': '
		public Keyword getColonSpaceKeyword_4() { return cColonSpaceKeyword_4; }

		//nombre=EString
		public Assignment getNombreAssignment_5() { return cNombreAssignment_5; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_5_0() { return cNombreEStringParserRuleCall_5_0; }
	}

	public class SubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Subproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subproceso:
		//	Funcion | Procedimiento;
		@Override public ParserRule getRule() { return rule; }

		//Funcion | Procedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//Funcion
		public RuleCall getFuncionParserRuleCall_0() { return cFuncionParserRuleCall_0; }

		//Procedimiento
		public RuleCall getProcedimientoParserRuleCall_1() { return cProcedimientoParserRuleCall_1; }
	}

	public class ComentarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Comentario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMensajeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMensajeSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cMensajeAssignment_0.eContents().get(0);
		private final Assignment cMensajeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMensajeML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cMensajeAssignment_1.eContents().get(0);
		
		//Comentario:
		//	mensaje=SL_COMMENT | mensaje=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//mensaje=SL_COMMENT | mensaje=ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//mensaje=SL_COMMENT
		public Assignment getMensajeAssignment_0() { return cMensajeAssignment_0; }

		//SL_COMMENT
		public RuleCall getMensajeSL_COMMENTTerminalRuleCall_0_0() { return cMensajeSL_COMMENTTerminalRuleCall_0_0; }

		//mensaje=ML_COMMENT
		public Assignment getMensajeAssignment_1() { return cMensajeAssignment_1; }

		//ML_COMMENT
		public RuleCall getMensajeML_COMMENTTerminalRuleCall_1_0() { return cMensajeML_COMMENTTerminalRuleCall_1_0; }
	}

	public class SentenciaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Sentencia");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEscribirParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBloqueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncionFicheroAbrirParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuncionFicheroCerrarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAsignacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFuncionesParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Sentencia:
		//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
		@Override public ParserRule getRule() { return rule; }

		//Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones
		public Alternatives getAlternatives() { return cAlternatives; }

		//Escribir
		public RuleCall getEscribirParserRuleCall_0() { return cEscribirParserRuleCall_0; }

		//Leer
		public RuleCall getLeerParserRuleCall_1() { return cLeerParserRuleCall_1; }

		//Bloque
		public RuleCall getBloqueParserRuleCall_2() { return cBloqueParserRuleCall_2; }

		//FuncionFicheroAbrir
		public RuleCall getFuncionFicheroAbrirParserRuleCall_3() { return cFuncionFicheroAbrirParserRuleCall_3; }

		//FuncionFicheroCerrar
		public RuleCall getFuncionFicheroCerrarParserRuleCall_4() { return cFuncionFicheroCerrarParserRuleCall_4; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_5() { return cAsignacionParserRuleCall_5; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_6() { return cFuncionesParserRuleCall_6; }
	}

	public class BloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Bloque");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMientrasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepetirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDesdeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSegunParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Bloque:
		//	Si | Mientras | Repetir | Desde | Segun;
		@Override public ParserRule getRule() { return rule; }

		//Si | Mientras | Repetir | Desde | Segun
		public Alternatives getAlternatives() { return cAlternatives; }

		//Si
		public RuleCall getSiParserRuleCall_0() { return cSiParserRuleCall_0; }

		//Mientras
		public RuleCall getMientrasParserRuleCall_1() { return cMientrasParserRuleCall_1; }

		//Repetir
		public RuleCall getRepetirParserRuleCall_2() { return cRepetirParserRuleCall_2; }

		//Desde
		public RuleCall getDesdeParserRuleCall_3() { return cDesdeParserRuleCall_3; }

		//Segun
		public RuleCall getSegunParserRuleCall_4() { return cSegunParserRuleCall_4; }
	}

	public class DeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Declaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracionBasicaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracionDefinidaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaracion:
		//	DeclaracionBasica | DeclaracionDefinida;
		@Override public ParserRule getRule() { return rule; }

		//DeclaracionBasica | DeclaracionDefinida
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaracionBasica
		public RuleCall getDeclaracionBasicaParserRuleCall_0() { return cDeclaracionBasicaParserRuleCall_0; }

		//DeclaracionDefinida
		public RuleCall getDeclaracionDefinidaParserRuleCall_1() { return cDeclaracionDefinidaParserRuleCall_1; }
	}

	public class FuncionFicheroAbrirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.FuncionFicheroAbrir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbrirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariablePrimariaParserRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cModoModoAperturaParserRuleCall_1_2_0 = (RuleCall)cModoAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVariableAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVariablePrimariaParserRuleCall_1_4_0 = (RuleCall)cVariableAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FuncionFicheroAbrir:
		//	'abrir(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'abrir(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria) ')'
		public Group getGroup() { return cGroup; }

		//'abrir('
		public Keyword getAbrirKeyword_0() { return cAbrirKeyword_0; }

		//(variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
		public Group getGroup_1() { return cGroup_1; }

		//variable+=Primaria
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_1_0_0() { return cVariablePrimariaParserRuleCall_1_0_0; }

		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//modo=ModoApertura
		public Assignment getModoAssignment_1_2() { return cModoAssignment_1_2; }

		//ModoApertura
		public RuleCall getModoModoAperturaParserRuleCall_1_2_0() { return cModoModoAperturaParserRuleCall_1_2_0; }

		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//variable+=Primaria
		public Assignment getVariableAssignment_1_4() { return cVariableAssignment_1_4; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_1_4_0() { return cVariablePrimariaParserRuleCall_1_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FuncionFicheroCerrarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.FuncionFicheroCerrar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCerrarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablePrimariaParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FuncionFicheroCerrar:
		//	'cerrar('
		//	variable=Primaria ')';
		@Override public ParserRule getRule() { return rule; }

		//'cerrar(' variable=Primaria ')'
		public Group getGroup() { return cGroup; }

		//'cerrar('
		public Keyword getCerrarKeyword_0() { return cCerrarKeyword_0; }

		//variable=Primaria
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_1_0() { return cVariablePrimariaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ModoAperturaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.ModoApertura");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEscrituraKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLecturaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ModoApertura ModoApertura:
		//	'escritura' | 'lectura'
		@Override public ParserRule getRule() { return rule; }

		//'escritura' | 'lectura'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'escritura'
		public Keyword getEscrituraKeyword_0() { return cEscrituraKeyword_0; }

		//'lectura'
		public Keyword getLecturaKeyword_1() { return cLecturaKeyword_1; }
	}

	public class NombreInternaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.NombreInterna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCuadradoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExpKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLnKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSenKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSqrtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLongitudKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConcatenaKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCopiarKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//NombreInterna:
		//	'cos(' | 'cuadrado(' | 'exp(' | 'ln(' | 'log(' | 'sen(' | 'sqrt(' | 'longitud(' | 'concatena(' | 'copiar(';
		@Override public ParserRule getRule() { return rule; }

		//'cos(' | 'cuadrado(' | 'exp(' | 'ln(' | 'log(' | 'sen(' | 'sqrt(' | 'longitud(' | 'concatena(' | 'copiar('
		public Alternatives getAlternatives() { return cAlternatives; }

		//'cos('
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }

		//'cuadrado('
		public Keyword getCuadradoKeyword_1() { return cCuadradoKeyword_1; }

		//'exp('
		public Keyword getExpKeyword_2() { return cExpKeyword_2; }

		//'ln('
		public Keyword getLnKeyword_3() { return cLnKeyword_3; }

		//'log('
		public Keyword getLogKeyword_4() { return cLogKeyword_4; }

		//'sen('
		public Keyword getSenKeyword_5() { return cSenKeyword_5; }

		//'sqrt('
		public Keyword getSqrtKeyword_6() { return cSqrtKeyword_6; }

		//'longitud('
		public Keyword getLongitudKeyword_7() { return cLongitudKeyword_7; }

		//'concatena('
		public Keyword getConcatenaKeyword_8() { return cConcatenaKeyword_8; }

		//'copiar('
		public Keyword getCopiarKeyword_9() { return cCopiarKeyword_9; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//EFloat ecore::EFloat:
		//	INT '.' INT (('E' | 'e') INT)?
		@Override public ParserRule getRule() { return rule; }

		//INT '.' INT (('E' | 'e') INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//(('E' | 'e') INT)?
		public Group getGroup_3() { return cGroup_3; }

		//('E' | 'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_1() { return cINTTerminalRuleCall_3_1; }
	}

	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoDefinidoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoBasicoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Tipo:
		//	TipoDefinido | TipoBasico;
		@Override public ParserRule getRule() { return rule; }

		//TipoDefinido | TipoBasico
		public Alternatives getAlternatives() { return cAlternatives; }

		//TipoDefinido
		public RuleCall getTipoDefinidoParserRuleCall_0() { return cTipoDefinidoParserRuleCall_0; }

		//TipoBasico
		public RuleCall getTipoBasicoParserRuleCall_1() { return cTipoBasicoParserRuleCall_1; }
	}

	public class TipoDefinidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoDefinido");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_0 = (RuleCall)cNombreAssignment.eContents().get(0);
		
		//TipoDefinido:
		//	nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString
		public Assignment getNombreAssignment() { return cNombreAssignment; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0() { return cNombreEStringParserRuleCall_0; }
	}

	public class TipoBasicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoBasico");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombreTipoVariableParserRuleCall_0 = (RuleCall)cNombreAssignment.eContents().get(0);
		
		//TipoBasico:
		//	nombre=TipoVariable;
		@Override public ParserRule getRule() { return rule; }

		//nombre=TipoVariable
		public Assignment getNombreAssignment() { return cNombreAssignment; }

		//TipoVariable
		public RuleCall getNombreTipoVariableParserRuleCall_0() { return cNombreTipoVariableParserRuleCall_0; }
	}

	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Constante");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//Constante:
		//	variable=Variable '=' valor=Primaria;
		@Override public ParserRule getRule() { return rule; }

		//variable=Variable '=' valor=Primaria
		public Group getGroup() { return cGroup; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTipoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoTipoParserRuleCall_5_0 = (RuleCall)cTipoAssignment_5.eContents().get(0);
		private final Keyword cColonSpaceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNombreAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNombreEStringParserRuleCall_7_0 = (RuleCall)cNombreAssignment_7.eContents().get(0);
		
		//Vector:
		//	'vector' '[' valor=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'vector' '[' valor=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'vector'
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//'de'
		public Keyword getDeKeyword_4() { return cDeKeyword_4; }

		//tipo=Tipo
		public Assignment getTipoAssignment_5() { return cTipoAssignment_5; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_5_0() { return cTipoTipoParserRuleCall_5_0; }

		//': '
		public Keyword getColonSpaceKeyword_6() { return cColonSpaceKeyword_6; }

		//nombre=EString
		public Assignment getNombreAssignment_7() { return cNombreAssignment_7; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_7_0() { return cNombreEStringParserRuleCall_7_0; }
	}

	public class MatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Matriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrizKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorPrimariaParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTipoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTipoTipoParserRuleCall_7_0 = (RuleCall)cTipoAssignment_7.eContents().get(0);
		private final Keyword cColonSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNombreAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNombreEStringParserRuleCall_9_0 = (RuleCall)cNombreAssignment_9.eContents().get(0);
		
		//Matriz:
		//	'matriz' '[' valor+=Primaria '][' valor+=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'matriz' '[' valor+=Primaria '][' valor+=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'matriz'
		public Keyword getMatrizKeyword_0() { return cMatrizKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor+=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//']['
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_3() { return cRightSquareBracketLeftSquareBracketKeyword_3; }

		//valor+=Primaria
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_4_0() { return cValorPrimariaParserRuleCall_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//'de'
		public Keyword getDeKeyword_6() { return cDeKeyword_6; }

		//tipo=Tipo
		public Assignment getTipoAssignment_7() { return cTipoAssignment_7; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_7_0() { return cTipoTipoParserRuleCall_7_0; }

		//': '
		public Keyword getColonSpaceKeyword_8() { return cColonSpaceKeyword_8; }

		//nombre=EString
		public Assignment getNombreAssignment_9() { return cNombreAssignment_9; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_9_0() { return cNombreEStringParserRuleCall_9_0; }
	}

	public class RegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Registro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Assignment cCamposAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCamposDeclaracionParserRuleCall_2_0 = (RuleCall)cCamposAssignment_2.eContents().get(0);
		private final Keyword cFin_registroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Registro:
		//	'registro:' nombre=EString
		//	campos+=Declaracion+
		//	'fin_registro';
		@Override public ParserRule getRule() { return rule; }

		//'registro:' nombre=EString campos+=Declaracion+ 'fin_registro'
		public Group getGroup() { return cGroup; }

		//'registro:'
		public Keyword getRegistroKeyword_0() { return cRegistroKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//campos+=Declaracion+
		public Assignment getCamposAssignment_2() { return cCamposAssignment_2; }

		//Declaracion
		public RuleCall getCamposDeclaracionParserRuleCall_2_0() { return cCamposDeclaracionParserRuleCall_2_0; }

		//'fin_registro'
		public Keyword getFin_registroKeyword_3() { return cFin_registroKeyword_3; }
	}

	public class ArchivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Archivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchivoDeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNombreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNombreEStringParserRuleCall_3_0 = (RuleCall)cNombreAssignment_3.eContents().get(0);
		
		//Archivo:
		//	'archivo de ' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'archivo de ' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'archivo de '
		public Keyword getArchivoDeKeyword_0() { return cArchivoDeKeyword_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//': '
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//nombre=EString
		public Assignment getNombreAssignment_3() { return cNombreAssignment_3; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_3_0() { return cNombreEStringParserRuleCall_3_0; }
	}

	public class EnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Enumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPosiblesValoresAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPosiblesValoresPrimariaParserRuleCall_3_0_0 = (RuleCall)cPosiblesValoresAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPosiblesValoresAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPosiblesValoresPrimariaParserRuleCall_3_1_1_0 = (RuleCall)cPosiblesValoresAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumerado:
		//	nombre=EString '=' '{' (posiblesValores+=Primaria (',' posiblesValores+=Primaria)*) '}';
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' '{' (posiblesValores+=Primaria (',' posiblesValores+=Primaria)*) '}'
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(posiblesValores+=Primaria (',' posiblesValores+=Primaria)*)
		public Group getGroup_3() { return cGroup_3; }

		//posiblesValores+=Primaria
		public Assignment getPosiblesValoresAssignment_3_0() { return cPosiblesValoresAssignment_3_0; }

		//Primaria
		public RuleCall getPosiblesValoresPrimariaParserRuleCall_3_0_0() { return cPosiblesValoresPrimariaParserRuleCall_3_0_0; }

		//(',' posiblesValores+=Primaria)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//posiblesValores+=Primaria
		public Assignment getPosiblesValoresAssignment_3_1_1() { return cPosiblesValoresAssignment_3_1_1; }

		//Primaria
		public RuleCall getPosiblesValoresPrimariaParserRuleCall_3_1_1_0() { return cPosiblesValoresPrimariaParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubrangoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Subrango");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrangoNumericoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubrangoEnumeradoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subrango:
		//	SubrangoNumerico | SubrangoEnumerado;
		@Override public ParserRule getRule() { return rule; }

		//SubrangoNumerico | SubrangoEnumerado
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubrangoNumerico
		public RuleCall getSubrangoNumericoParserRuleCall_0() { return cSubrangoNumericoParserRuleCall_0; }

		//SubrangoEnumerado
		public RuleCall getSubrangoEnumeradoParserRuleCall_1() { return cSubrangoEnumeradoParserRuleCall_1; }
	}

	public class SubrangoNumericoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.SubrangoNumerico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEIntParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEIntParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoNumerico:
		//	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(limite_inf=EInt '..' limite_sup=EInt)
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EInt
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EInt
		public RuleCall getLimite_infEIntParserRuleCall_2_0_0() { return cLimite_infEIntParserRuleCall_2_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EInt
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EInt
		public RuleCall getLimite_supEIntParserRuleCall_2_2_0() { return cLimite_supEIntParserRuleCall_2_2_0; }
	}

	public class SubrangoEnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.SubrangoEnumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEStringParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEStringParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoEnumerado:
		//	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' (limite_inf=EString '..' limite_sup=EString)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(limite_inf=EString '..' limite_sup=EString)
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EString
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EString
		public RuleCall getLimite_infEStringParserRuleCall_2_0_0() { return cLimite_infEStringParserRuleCall_2_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EString
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EString
		public RuleCall getLimite_supEStringParserRuleCall_2_2_0() { return cLimite_supEStringParserRuleCall_2_2_0; }
	}

	public class InicioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Inicio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrincipalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInicioAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaracionesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaracionesDeclaracionParserRuleCall_3_0 = (RuleCall)cDeclaracionesAssignment_3.eContents().get(0);
		private final Keyword cInicioKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSentenciasAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSentenciasSentenciaParserRuleCall_5_0 = (RuleCall)cSentenciasAssignment_5.eContents().get(0);
		private final Keyword cFin_principalKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inicio:
		//	'principal' {Inicio}
		//	'var'
		//	declaraciones+=Declaracion*
		//	'inicio'
		//	sentencias+=Sentencia*
		//	'fin_principal';
		@Override public ParserRule getRule() { return rule; }

		//'principal' {Inicio} 'var' declaraciones+=Declaracion* 'inicio' sentencias+=Sentencia* 'fin_principal'
		public Group getGroup() { return cGroup; }

		//'principal'
		public Keyword getPrincipalKeyword_0() { return cPrincipalKeyword_0; }

		//{Inicio}
		public Action getInicioAction_1() { return cInicioAction_1; }

		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//declaraciones+=Declaracion*
		public Assignment getDeclaracionesAssignment_3() { return cDeclaracionesAssignment_3; }

		//Declaracion
		public RuleCall getDeclaracionesDeclaracionParserRuleCall_3_0() { return cDeclaracionesDeclaracionParserRuleCall_3_0; }

		//'inicio'
		public Keyword getInicioKeyword_4() { return cInicioKeyword_4; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_5() { return cSentenciasAssignment_5; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_5_0() { return cSentenciasSentenciaParserRuleCall_5_0; }

		//'fin_principal'
		public Keyword getFin_principalKeyword_6() { return cFin_principalKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DeclaracionBasicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.DeclaracionBasica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		
		//DeclaracionBasica:
		//	tipo=TipoVariable ': '
		//	variables+=Variable (',' variables+=Variable)*;
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable ': ' variables+=Variable (',' variables+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//': '
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//(',' variables+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_1_0() { return cVariablesVariableParserRuleCall_3_1_0; }
	}

	public class DeclaracionDefinidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.DeclaracionDefinida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoEStringParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		
		//DeclaracionDefinida:
		//	tipo=EString ': '
		//	variables+=Variable (',' variables+=Variable)*;
		@Override public ParserRule getRule() { return rule; }

		//tipo=EString ': ' variables+=Variable (',' variables+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=EString
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0_0() { return cTipoEStringParserRuleCall_0_0; }

		//': '
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//(',' variables+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_1_0() { return cVariablesVariableParserRuleCall_3_1_0; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Asignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsignacionNormalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionComplejaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Asignacion:
		//	AsignacionNormal | AsignacionCompleja;
		@Override public ParserRule getRule() { return rule; }

		//AsignacionNormal | AsignacionCompleja
		public Alternatives getAlternatives() { return cAlternatives; }

		//AsignacionNormal
		public RuleCall getAsignacionNormalParserRuleCall_0() { return cAsignacionNormalParserRuleCall_0; }

		//AsignacionCompleja
		public RuleCall getAsignacionComplejaParserRuleCall_1() { return cAsignacionComplejaParserRuleCall_1; }
	}

	public class AsignacionNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.AsignacionNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionEStringParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionCompletaParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionNormal:
		//	valor_asignacion=EString
		//	'<-'
		//	operador=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//valor_asignacion=EString '<-' operador=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//valor_asignacion=EString
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//EString
		public RuleCall getValor_asignacionEStringParserRuleCall_0_0() { return cValor_asignacionEStringParserRuleCall_0_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=OperacionCompleta
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//OperacionCompleta
		public RuleCall getOperadorOperacionCompletaParserRuleCall_2_0() { return cOperadorOperacionCompletaParserRuleCall_2_0; }
	}

	public class AsignacionComplejaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.AsignacionCompleja");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionVariablesComplejasParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionCompletaParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionCompleja:
		//	valor_asignacion=VariablesComplejas
		//	'<-'
		//	operador=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//valor_asignacion=VariablesComplejas '<-' operador=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//valor_asignacion=VariablesComplejas
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//VariablesComplejas
		public RuleCall getValor_asignacionVariablesComplejasParserRuleCall_0_0() { return cValor_asignacionVariablesComplejasParserRuleCall_0_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=OperacionCompleta
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//OperacionCompleta
		public RuleCall getOperadorOperacionCompletaParserRuleCall_2_0() { return cOperadorOperacionCompletaParserRuleCall_2_0; }
	}

	public class EscribirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Escribir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEscribirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_1_0 = (RuleCall)cOperadorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperadorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperadorOperacionCompletaParserRuleCall_2_1_0 = (RuleCall)cOperadorAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Escribir:
		//	'escribir('
		//	operador+=Primaria ("," operador+=OperacionCompleta)*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'escribir(' operador+=Primaria ("," operador+=OperacionCompleta)* ')'
		public Group getGroup() { return cGroup; }

		//'escribir('
		public Keyword getEscribirKeyword_0() { return cEscribirKeyword_0; }

		//operador+=Primaria
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_1_0() { return cOperadorPrimariaParserRuleCall_1_0; }

		//("," operador+=OperacionCompleta)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//operador+=OperacionCompleta
		public Assignment getOperadorAssignment_2_1() { return cOperadorAssignment_2_1; }

		//OperacionCompleta
		public RuleCall getOperadorOperacionCompletaParserRuleCall_2_1_0() { return cOperadorOperacionCompletaParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Leer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablePrimariaParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablePrimariaParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Leer:
		//	'leer('
		//	variable+=Primaria ("," variable+=Primaria)*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'leer(' variable+=Primaria ("," variable+=Primaria)* ')'
		public Group getGroup() { return cGroup; }

		//'leer('
		public Keyword getLeerKeyword_0() { return cLeerKeyword_0; }

		//variable+=Primaria
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_1_0() { return cVariablePrimariaParserRuleCall_1_0; }

		//("," variable+=Primaria)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_1_0() { return cVariablePrimariaParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Si");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSiKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cSiKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionOperacionCompletaParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEntoncesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSentenciasSentenciaParserRuleCall_4_0 = (RuleCall)cSentenciasAssignment_4.eContents().get(0);
		private final Assignment cDevuelveAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDevuelveDevolverParserRuleCall_5_0 = (RuleCall)cDevuelveAssignment_5.eContents().get(0);
		private final Assignment cSinoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSinoSinoParserRuleCall_6_0 = (RuleCall)cSinoAssignment_6.eContents().get(0);
		private final Keyword cFin_siKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Si:
		//	('si'
		//	'(' | 'si(') condicion=OperacionCompleta
		//	')' 'entonces'
		//	sentencias+=Sentencia*
		//	devuelve=Devolver?
		//	sino=Sino?
		//	'fin_si';
		@Override public ParserRule getRule() { return rule; }

		//('si' '(' | 'si(') condicion=OperacionCompleta ')' 'entonces' sentencias+=Sentencia* devuelve=Devolver? sino=Sino?
		//'fin_si'
		public Group getGroup() { return cGroup; }

		//('si' '(' | 'si(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'si' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'si'
		public Keyword getSiKeyword_0_0_0() { return cSiKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'si('
		public Keyword getSiKeyword_0_1() { return cSiKeyword_0_1; }

		//condicion=OperacionCompleta
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }

		//OperacionCompleta
		public RuleCall getCondicionOperacionCompletaParserRuleCall_1_0() { return cCondicionOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'entonces'
		public Keyword getEntoncesKeyword_3() { return cEntoncesKeyword_3; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_4() { return cSentenciasAssignment_4; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_4_0() { return cSentenciasSentenciaParserRuleCall_4_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_5() { return cDevuelveAssignment_5; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_5_0() { return cDevuelveDevolverParserRuleCall_5_0; }

		//sino=Sino?
		public Assignment getSinoAssignment_6() { return cSinoAssignment_6; }

		//Sino
		public RuleCall getSinoSinoParserRuleCall_6_0() { return cSinoSinoParserRuleCall_6_0; }

		//'fin_si'
		public Keyword getFin_siKeyword_7() { return cFin_siKeyword_7; }
	}

	public class MientrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Mientras");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cMientrasKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cMientrasKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionOperacionCompletaParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHacerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSentenciasSentenciaParserRuleCall_4_0 = (RuleCall)cSentenciasAssignment_4.eContents().get(0);
		private final Keyword cFin_mientrasKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mientras:
		//	('mientras'
		//	'(' | 'mientras(') condicion=OperacionCompleta
		//	')' 'hacer'
		//	sentencias+=Sentencia*
		//	'fin_mientras';
		@Override public ParserRule getRule() { return rule; }

		//('mientras' '(' | 'mientras(') condicion=OperacionCompleta ')' 'hacer' sentencias+=Sentencia* 'fin_mientras'
		public Group getGroup() { return cGroup; }

		//('mientras' '(' | 'mientras(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'mientras' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'mientras'
		public Keyword getMientrasKeyword_0_0_0() { return cMientrasKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'mientras('
		public Keyword getMientrasKeyword_0_1() { return cMientrasKeyword_0_1; }

		//condicion=OperacionCompleta
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }

		//OperacionCompleta
		public RuleCall getCondicionOperacionCompletaParserRuleCall_1_0() { return cCondicionOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'hacer'
		public Keyword getHacerKeyword_3() { return cHacerKeyword_3; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_4() { return cSentenciasAssignment_4; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_4_0() { return cSentenciasSentenciaParserRuleCall_4_0; }

		//'fin_mientras'
		public Keyword getFin_mientrasKeyword_5() { return cFin_mientrasKeyword_5; }
	}

	public class RepetirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Repetir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSentenciasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentenciasSentenciaParserRuleCall_1_0 = (RuleCall)cSentenciasAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cHasta_queKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cHasta_queKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cCondicionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondicionOperacionCompletaParserRuleCall_3_0 = (RuleCall)cCondicionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Repetir:
		//	'repetir'
		//	sentencias+=Sentencia* ('hasta_que' '(' | 'hasta_que(') condicion=OperacionCompleta
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'repetir' sentencias+=Sentencia* ('hasta_que' '(' | 'hasta_que(') condicion=OperacionCompleta ')'
		public Group getGroup() { return cGroup; }

		//'repetir'
		public Keyword getRepetirKeyword_0() { return cRepetirKeyword_0; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_1() { return cSentenciasAssignment_1; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_1_0() { return cSentenciasSentenciaParserRuleCall_1_0; }

		//('hasta_que' '(' | 'hasta_que(')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'hasta_que' '('
		public Group getGroup_2_0() { return cGroup_2_0; }

		//'hasta_que'
		public Keyword getHasta_queKeyword_2_0_0() { return cHasta_queKeyword_2_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }

		//'hasta_que('
		public Keyword getHasta_queKeyword_2_1() { return cHasta_queKeyword_2_1; }

		//condicion=OperacionCompleta
		public Assignment getCondicionAssignment_3() { return cCondicionAssignment_3; }

		//OperacionCompleta
		public RuleCall getCondicionOperacionCompletaParserRuleCall_3_0() { return cCondicionOperacionCompletaParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DesdeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Desde");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAsignacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsignacionAsignacionNormalParserRuleCall_1_0 = (RuleCall)cAsignacionAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondicionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondicionOperacionCompletaParserRuleCall_3_0 = (RuleCall)cCondicionAssignment_3.eContents().get(0);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSentenciasAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSentenciasSentenciaParserRuleCall_5_0 = (RuleCall)cSentenciasAssignment_5.eContents().get(0);
		private final Keyword cFin_desdeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Desde:
		//	'desde' asignacion=AsignacionNormal 'hasta' condicion=OperacionCompleta 'hacer'
		//	sentencias+=Sentencia*
		//	'fin_desde';
		@Override public ParserRule getRule() { return rule; }

		//'desde' asignacion=AsignacionNormal 'hasta' condicion=OperacionCompleta 'hacer' sentencias+=Sentencia* 'fin_desde'
		public Group getGroup() { return cGroup; }

		//'desde'
		public Keyword getDesdeKeyword_0() { return cDesdeKeyword_0; }

		//asignacion=AsignacionNormal
		public Assignment getAsignacionAssignment_1() { return cAsignacionAssignment_1; }

		//AsignacionNormal
		public RuleCall getAsignacionAsignacionNormalParserRuleCall_1_0() { return cAsignacionAsignacionNormalParserRuleCall_1_0; }

		//'hasta'
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }

		//condicion=OperacionCompleta
		public Assignment getCondicionAssignment_3() { return cCondicionAssignment_3; }

		//OperacionCompleta
		public RuleCall getCondicionOperacionCompletaParserRuleCall_3_0() { return cCondicionOperacionCompletaParserRuleCall_3_0; }

		//'hacer'
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_5() { return cSentenciasAssignment_5; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_5_0() { return cSentenciasSentenciaParserRuleCall_5_0; }

		//'fin_desde'
		public Keyword getFin_desdeKeyword_6() { return cFin_desdeKeyword_6; }
	}

	public class CasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Caso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCasoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_1_0 = (RuleCall)cOperadorAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentenciasSentenciaParserRuleCall_3_0 = (RuleCall)cSentenciasAssignment_3.eContents().get(0);
		private final Assignment cDevuelveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevuelveDevolverParserRuleCall_4_0 = (RuleCall)cDevuelveAssignment_4.eContents().get(0);
		
		//Caso:
		//	'caso' operador=Primaria ': ' sentencias+=Sentencia*
		//	devuelve=Devolver?;
		@Override public ParserRule getRule() { return rule; }

		//'caso' operador=Primaria ': ' sentencias+=Sentencia* devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//'caso'
		public Keyword getCasoKeyword_0() { return cCasoKeyword_0; }

		//operador=Primaria
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_1_0() { return cOperadorPrimariaParserRuleCall_1_0; }

		//': '
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_3() { return cSentenciasAssignment_3; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_3_0() { return cSentenciasSentenciaParserRuleCall_3_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_4() { return cDevuelveAssignment_4; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_4_0() { return cDevuelveDevolverParserRuleCall_4_0; }
	}

	public class SegunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Segun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSegun_seaKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cSegun_seaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionOperacionCompletaParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHacerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasosCasoParserRuleCall_4_0 = (RuleCall)cCasosAssignment_4.eContents().get(0);
		private final Keyword cEn_otro_casoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSentenciasSentenciaParserRuleCall_6_0 = (RuleCall)cSentenciasAssignment_6.eContents().get(0);
		private final Assignment cDevuelveAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDevuelveDevolverParserRuleCall_7_0 = (RuleCall)cDevuelveAssignment_7.eContents().get(0);
		private final Keyword cFin_segunKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Segun:
		//	('segun_sea' '(' | 'segun_sea(') condicion=OperacionCompleta ')' 'hacer'
		//	casos+=Caso*
		//	'en_otro_caso:'
		//	sentencias+=Sentencia*
		//	devuelve=Devolver?
		//	'fin_segun';
		@Override public ParserRule getRule() { return rule; }

		//('segun_sea' '(' | 'segun_sea(') condicion=OperacionCompleta ')' 'hacer' casos+=Caso* 'en_otro_caso:'
		//sentencias+=Sentencia* devuelve=Devolver? 'fin_segun'
		public Group getGroup() { return cGroup; }

		//('segun_sea' '(' | 'segun_sea(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'segun_sea' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'segun_sea'
		public Keyword getSegun_seaKeyword_0_0_0() { return cSegun_seaKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'segun_sea('
		public Keyword getSegun_seaKeyword_0_1() { return cSegun_seaKeyword_0_1; }

		//condicion=OperacionCompleta
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }

		//OperacionCompleta
		public RuleCall getCondicionOperacionCompletaParserRuleCall_1_0() { return cCondicionOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'hacer'
		public Keyword getHacerKeyword_3() { return cHacerKeyword_3; }

		//casos+=Caso*
		public Assignment getCasosAssignment_4() { return cCasosAssignment_4; }

		//Caso
		public RuleCall getCasosCasoParserRuleCall_4_0() { return cCasosCasoParserRuleCall_4_0; }

		//'en_otro_caso:'
		public Keyword getEn_otro_casoKeyword_5() { return cEn_otro_casoKeyword_5; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_6() { return cSentenciasAssignment_6; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_6_0() { return cSentenciasSentenciaParserRuleCall_6_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_7() { return cDevuelveAssignment_7; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_7_0() { return cDevuelveDevolverParserRuleCall_7_0; }

		//'fin_segun'
		public Keyword getFin_segunKeyword_8() { return cFin_segunKeyword_8; }
	}

	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnteroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCaracterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCadenaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TipoVariable:
		//	'entero' | 'caracter' | 'real' | 'logico' | 'cadena';
		@Override public ParserRule getRule() { return rule; }

		//'entero' | 'caracter' | 'real' | 'logico' | 'cadena'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'entero'
		public Keyword getEnteroKeyword_0() { return cEnteroKeyword_0; }

		//'caracter'
		public Keyword getCaracterKeyword_1() { return cCaracterKeyword_1; }

		//'real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//'logico'
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }

		//'cadena'
		public Keyword getCadenaKeyword_4() { return cCadenaKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Variable:
		//	{Variable} nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Variable} nombre=EString
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }
	}

	public class SignoOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoOr");
		private final Keyword cOKeyword = (Keyword)rule.eContents().get(1);
		
		//signoOr signo:
		//	'o'
		@Override public ParserRule getRule() { return rule; }

		//'o'
		public Keyword getOKeyword() { return cOKeyword; }
	}

	public class SignoAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoAnd");
		private final Keyword cYKeyword = (Keyword)rule.eContents().get(1);
		
		//signoAnd signo:
		//	'y'
		@Override public ParserRule getRule() { return rule; }

		//'y'
		public Keyword getYKeyword() { return cYKeyword; }
	}

	public class SignoIgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoIgualdad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//signoIgualdad signo:
		//	'=' | '!='
		@Override public ParserRule getRule() { return rule; }

		//'=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class SignoComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoComparacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//signoComparacion signo:
		//	'<' | '>' | '>=' | '<='
		@Override public ParserRule getRule() { return rule; }

		//'<' | '>' | '>=' | '<='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}

	public class SignoSumaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoSuma");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//signoSuma signo:
		//	'+'
		@Override public ParserRule getRule() { return rule; }

		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SignoRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoResta");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoResta signo:
		//	'-'
		@Override public ParserRule getRule() { return rule; }

		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignoMultiplicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoMultiplicacion");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//signoMultiplicacion signo:
		//	'*'
		@Override public ParserRule getRule() { return rule; }

		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class SignoDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoDivision");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoDivision signo:
		//	'/'
		@Override public ParserRule getRule() { return rule; }

		//'/'
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class SignoModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoModulo");
		private final Keyword cModKeyword = (Keyword)rule.eContents().get(1);
		
		//signoModulo signo:
		//	'mod'
		@Override public ParserRule getRule() { return rule; }

		//'mod'
		public Keyword getModKeyword() { return cModKeyword; }
	}

	public class SignoDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoDiv");
		private final Keyword cDivKeyword = (Keyword)rule.eContents().get(1);
		
		//signoDiv signo:
		//	'div'
		@Override public ParserRule getRule() { return rule; }

		//'div'
		public Keyword getDivKeyword() { return cDivKeyword; }
	}

	public class SignoNoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.signoNo");
		private final Keyword cNoKeyword = (Keyword)rule.eContents().get(1);
		
		//signoNo signo:
		//	'no'
		@Override public ParserRule getRule() { return rule; }

		//'no'
		public Keyword getNoKeyword() { return cNoKeyword; }
	}

	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Operacion");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Operacion:
		//	Or;
		@Override public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightAndParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Or Operacion:
		//	And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		@Override public ParserRule getRule() { return rule; }

		//And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=And
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//And
		public RuleCall getRightAndParserRuleCall_1_4_0() { return cRightAndParserRuleCall_1_4_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightModParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//And Operacion:
		//	Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		@Override public ParserRule getRule() { return rule; }

		//Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		public Group getGroup() { return cGroup; }

		//Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Mod
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Mod
		public RuleCall getRightModParserRuleCall_1_4_0() { return cRightModParserRuleCall_1_4_0; }
	}

	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoModuloParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightIgualdadParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Mod Operacion:
		//	Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		@Override public ParserRule getRule() { return rule; }

		//Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		public Group getGroup() { return cGroup; }

		//Igualdad
		public RuleCall getIgualdadParserRuleCall_0() { return cIgualdadParserRuleCall_0; }

		//({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mod.left=current}
		public Action getModLeftAction_1_0() { return cModLeftAction_1_0; }

		//signo_op=signoModulo
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoModulo
		public RuleCall getSigno_opSignoModuloParserRuleCall_1_1_0() { return cSigno_opSignoModuloParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Igualdad
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Igualdad
		public RuleCall getRightIgualdadParserRuleCall_1_4_0() { return cRightIgualdadParserRuleCall_1_4_0; }
	}

	public class IgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Igualdad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightComparacionParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Igualdad Operacion:
		//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
		//	right=Comparacion)*
		@Override public ParserRule getRule() { return rule; }

		//Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
		//right=Comparacion)*
		public Group getGroup() { return cGroup; }

		//Comparacion
		public RuleCall getComparacionParserRuleCall_0() { return cComparacionParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'* right=Comparacion)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Comparacion
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Comparacion
		public RuleCall getRightComparacionParserRuleCall_1_4_0() { return cRightComparacionParserRuleCall_1_4_0; }
	}

	public class ComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Comparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightSumaRestaParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Comparacion Operacion:
		//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
		//	right=SumaResta)*
		@Override public ParserRule getRule() { return rule; }

		//SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
		//right=SumaResta)*
		public Group getGroup() { return cGroup; }

		//SumaResta
		public RuleCall getSumaRestaParserRuleCall_0() { return cSumaRestaParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'* right=SumaResta)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=SumaResta
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//SumaResta
		public RuleCall getRightSumaRestaParserRuleCall_1_4_0() { return cRightSumaRestaParserRuleCall_1_4_0; }
	}

	public class SumaRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.SumaResta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_1_0 = (Keyword)cNegacionesFinalesAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesNoKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightMultiplicacionDivisionParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//SumaResta Operacion:
		//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivision
		public RuleCall getMultiplicacionDivisionParserRuleCall_0() { return cMultiplicacionDivisionParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) negacionesFinales+='-'*
		//negacionesFinales+='no'* right=MultiplicacionDivision)*
		public Group getGroup_1() { return cGroup_1; }

		//({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_1() { return cNegacionesFinalesAssignment_1_1; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_1_0() { return cNegacionesFinalesHyphenMinusKeyword_1_1_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_2_0() { return cNegacionesFinalesNoKeyword_1_2_0; }

		//right=MultiplicacionDivision
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//MultiplicacionDivision
		public RuleCall getRightMultiplicacionDivisionParserRuleCall_1_3_0() { return cRightMultiplicacionDivisionParserRuleCall_1_3_0; }
	}

	public class MultiplicacionDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.MultiplicacionDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionEnteraLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cDivisionRealLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cSigno_opSignoDivParserRuleCall_1_0_2_1_0 = (RuleCall)cSigno_opAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_1_0 = (Keyword)cNegacionesFinalesAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesNoKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPrimariaParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//MultiplicacionDivision Operacion:
		//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
		//	signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) negacionesFinales+='-'*
		//	negacionesFinales+='no'* right=Primaria)*
		@Override public ParserRule getRule() { return rule; }

		//Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
		//signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) negacionesFinales+='-'*
		//negacionesFinales+='no'* right=Primaria)*
		public Group getGroup() { return cGroup; }

		//Primaria
		public RuleCall getPrimariaParserRuleCall_0() { return cPrimariaParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current} signo_op=signoDivision |
		//{DivisionReal.left=current} signo_op=signoDiv) negacionesFinales+='-'* negacionesFinales+='no'* right=Primaria)*
		public Group getGroup_1() { return cGroup_1; }

		//({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current} signo_op=signoDivision |
		//{DivisionReal.left=current} signo_op=signoDiv)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{DivisionEntera.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{DivisionEntera.left=current}
		public Action getDivisionEnteraLeftAction_1_0_1_0() { return cDivisionEnteraLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//{DivisionReal.left=current} signo_op=signoDiv
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{DivisionReal.left=current}
		public Action getDivisionRealLeftAction_1_0_2_0() { return cDivisionRealLeftAction_1_0_2_0; }

		//signo_op=signoDiv
		public Assignment getSigno_opAssignment_1_0_2_1() { return cSigno_opAssignment_1_0_2_1; }

		//signoDiv
		public RuleCall getSigno_opSignoDivParserRuleCall_1_0_2_1_0() { return cSigno_opSignoDivParserRuleCall_1_0_2_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_1() { return cNegacionesFinalesAssignment_1_1; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_1_0() { return cNegacionesFinalesHyphenMinusKeyword_1_1_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_2_0() { return cNegacionesFinalesNoKeyword_1_2_0; }

		//right=Primaria
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//Primaria
		public RuleCall getRightPrimariaParserRuleCall_1_3_0() { return cRightPrimariaParserRuleCall_1_3_0; }
	}

	public class OperacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.OperacionIndice");
		private final RuleCall cOrIndiceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperacionIndice Operacion:
		//	OrIndice
		@Override public ParserRule getRule() { return rule; }

		//OrIndice
		public RuleCall getOrIndiceParserRuleCall() { return cOrIndiceParserRuleCall; }
	}

	public class OrIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.OrIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrIndice Operacion:
		//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
		@Override public ParserRule getRule() { return rule; }

		//AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup() { return cGroup; }

		//AndIndice
		public RuleCall getAndIndiceParserRuleCall_0() { return cAndIndiceParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//right=AndIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndIndice
		public RuleCall getRightAndIndiceParserRuleCall_1_2_0() { return cRightAndIndiceParserRuleCall_1_2_0; }
	}

	public class AndIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.AndIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIgualdadIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndIndice Operacion:
		//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		@Override public ParserRule getRule() { return rule; }

		//IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup() { return cGroup; }

		//IgualdadIndice
		public RuleCall getIgualdadIndiceParserRuleCall_0() { return cIgualdadIndiceParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//right=IgualdadIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//IgualdadIndice
		public RuleCall getRightIgualdadIndiceParserRuleCall_1_2_0() { return cRightIgualdadIndiceParserRuleCall_1_2_0; }
	}

	public class IgualdadIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.IgualdadIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparacionIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IgualdadIndice Operacion:
		//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		@Override public ParserRule getRule() { return rule; }

		//ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup() { return cGroup; }

		//ComparacionIndice
		public RuleCall getComparacionIndiceParserRuleCall_0() { return cComparacionIndiceParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//right=ComparacionIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparacionIndice
		public RuleCall getRightComparacionIndiceParserRuleCall_1_2_0() { return cRightComparacionIndiceParserRuleCall_1_2_0; }
	}

	public class ComparacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.ComparacionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSumaRestaIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparacionIndice Operacion:
		//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		@Override public ParserRule getRule() { return rule; }

		//SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup() { return cGroup; }

		//SumaRestaIndice
		public RuleCall getSumaRestaIndiceParserRuleCall_0() { return cSumaRestaIndiceParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//right=SumaRestaIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SumaRestaIndice
		public RuleCall getRightSumaRestaIndiceParserRuleCall_1_2_0() { return cRightSumaRestaIndiceParserRuleCall_1_2_0; }
	}

	public class SumaRestaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.SumaRestaIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SumaRestaIndice Operacion:
		//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	right=MultiplicacionDivisionIndice)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivisionIndice
		public RuleCall getMultiplicacionDivisionIndiceParserRuleCall_0() { return cMultiplicacionDivisionIndiceParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//right=MultiplicacionDivisionIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicacionDivisionIndice
		public RuleCall getRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0() { return cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0; }
	}

	public class MultiplicacionDivisionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.MultiplicacionDivisionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionEnteraLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cDivisionRealLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cSigno_opSignoDivParserRuleCall_1_0_2_1_0 = (RuleCall)cSigno_opAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimariaIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicacionDivisionIndice Operacion:
		//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
		//	signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		@Override public ParserRule getRule() { return rule; }

		//PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
		//signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		public Group getGroup() { return cGroup; }

		//PrimariaIndice
		public RuleCall getPrimariaIndiceParserRuleCall_0() { return cPrimariaIndiceParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current} signo_op=signoDivision |
		//{DivisionReal.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current} signo_op=signoDivision |
		//{DivisionReal.left=current} signo_op=signoDiv)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{DivisionEntera.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{DivisionEntera.left=current}
		public Action getDivisionEnteraLeftAction_1_0_1_0() { return cDivisionEnteraLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//{DivisionReal.left=current} signo_op=signoDiv
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{DivisionReal.left=current}
		public Action getDivisionRealLeftAction_1_0_2_0() { return cDivisionRealLeftAction_1_0_2_0; }

		//signo_op=signoDiv
		public Assignment getSigno_opAssignment_1_0_2_1() { return cSigno_opAssignment_1_0_2_1; }

		//signoDiv
		public RuleCall getSigno_opSignoDivParserRuleCall_1_0_2_1_0() { return cSigno_opSignoDivParserRuleCall_1_0_2_1_0; }

		//right=PrimariaIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimariaIndice
		public RuleCall getRightPrimariaIndiceParserRuleCall_1_1_0() { return cRightPrimariaIndiceParserRuleCall_1_1_0; }
	}

	public class PrimariaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.PrimariaIndice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableIDAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		
		//PrimariaIndice Operacion:
		//	{Entero} valor=EInt
		//	| {VariableID} nombre=EString
		@Override public ParserRule getRule() { return rule; }

		//{Entero} valor=EInt | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Entero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{Entero}
		public Action getEnteroAction_0_0() { return cEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_1() { return cGroup_1; }

		//{VariableID}
		public Action getVariableIDAction_1_0() { return cVariableIDAction_1_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_1_0() { return cNombreEStringParserRuleCall_1_1_0; }
	}

	public class PrimariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Primaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariablesBasicasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariablesComplejasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncionesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperacionParentesisParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primaria Operacion:
		//	VariablesBasicas | VariablesComplejas
		//	| Funciones
		//	| OperacionParentesis
		@Override public ParserRule getRule() { return rule; }

		//VariablesBasicas | VariablesComplejas | Funciones | OperacionParentesis
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariablesBasicas
		public RuleCall getVariablesBasicasParserRuleCall_0() { return cVariablesBasicasParserRuleCall_0; }

		//VariablesComplejas
		public RuleCall getVariablesComplejasParserRuleCall_1() { return cVariablesComplejasParserRuleCall_1; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_2() { return cFuncionesParserRuleCall_2; }

		//OperacionParentesis
		public RuleCall getOperacionParentesisParserRuleCall_3() { return cOperacionParentesisParserRuleCall_3; }
	}

	public class OperacionCompletaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.OperacionCompleta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperacionCompletaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNegacionesInicialesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegacionesInicialesHyphenMinusKeyword_1_0 = (Keyword)cNegacionesInicialesAssignment_1.eContents().get(0);
		private final Assignment cNegacionesInicialesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegacionesInicialesNoKeyword_2_0 = (Keyword)cNegacionesInicialesAssignment_2.eContents().get(0);
		private final Assignment cValor_operacionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValor_operacionOperacionParserRuleCall_3_0 = (RuleCall)cValor_operacionAssignment_3.eContents().get(0);
		
		//OperacionCompleta Operacion:
		//	{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=Operacion
		@Override public ParserRule getRule() { return rule; }

		//{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=Operacion
		public Group getGroup() { return cGroup; }

		//{OperacionCompleta}
		public Action getOperacionCompletaAction_0() { return cOperacionCompletaAction_0; }

		//negacionesIniciales+='-'*
		public Assignment getNegacionesInicialesAssignment_1() { return cNegacionesInicialesAssignment_1; }

		//'-'
		public Keyword getNegacionesInicialesHyphenMinusKeyword_1_0() { return cNegacionesInicialesHyphenMinusKeyword_1_0; }

		//negacionesIniciales+='no'*
		public Assignment getNegacionesInicialesAssignment_2() { return cNegacionesInicialesAssignment_2; }

		//'no'
		public Keyword getNegacionesInicialesNoKeyword_2_0() { return cNegacionesInicialesNoKeyword_2_0; }

		//valor_operacion=Operacion
		public Assignment getValor_operacionAssignment_3() { return cValor_operacionAssignment_3; }

		//Operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_3_0() { return cValor_operacionOperacionParserRuleCall_3_0; }
	}

	public class OperacionParentesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.OperacionParentesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperacionParentesisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegacionesFinalesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_2_0 = (Keyword)cNegacionesFinalesAssignment_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_3_0 = (Keyword)cNegacionesFinalesAssignment_3.eContents().get(0);
		private final Assignment cValor_operacionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValor_operacionOperacionParserRuleCall_4_0 = (RuleCall)cValor_operacionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperacionParentesis Operacion:
		//	{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=Operacion ')'
		@Override public ParserRule getRule() { return rule; }

		//{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=Operacion ')'
		public Group getGroup() { return cGroup; }

		//{OperacionParentesis}
		public Action getOperacionParentesisAction_0() { return cOperacionParentesisAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_2() { return cNegacionesFinalesAssignment_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_2_0() { return cNegacionesFinalesHyphenMinusKeyword_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_3() { return cNegacionesFinalesAssignment_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_3_0() { return cNegacionesFinalesNoKeyword_3_0; }

		//valor_operacion=Operacion
		public Assignment getValor_operacionAssignment_4() { return cValor_operacionAssignment_4; }

		//Operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_4_0() { return cValor_operacionOperacionParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FuncionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Funciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLlamadaFuncionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNombreAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_0_1_0 = (RuleCall)cNombreAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cParametrosAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cParametrosOperacionCompletaParserRuleCall_0_2_0_0 = (RuleCall)cParametrosAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cParametrosAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cParametrosOperacionCompletaParserRuleCall_0_2_1_1_0 = (RuleCall)cParametrosAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFuncionInternaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreNombreInternaParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cParametrosAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cParametrosOperacionCompletaParserRuleCall_1_2_0_0 = (RuleCall)cParametrosAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cParametrosAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cParametrosOperacionCompletaParserRuleCall_1_2_1_1_0 = (RuleCall)cParametrosAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Funciones Operacion:
		//	{LlamadaFuncion} nombre=NOMBRE_FUN (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')' |
		//	{FuncionInterna} nombre=NombreInterna (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')'
		@Override public ParserRule getRule() { return rule; }

		//{LlamadaFuncion} nombre=NOMBRE_FUN (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')' |
		//{FuncionInterna} nombre=NombreInterna (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LlamadaFuncion} nombre=NOMBRE_FUN (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')'
		public Group getGroup_0() { return cGroup_0; }

		//{LlamadaFuncion}
		public Action getLlamadaFuncionAction_0_0() { return cLlamadaFuncionAction_0_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_0_1() { return cNombreAssignment_0_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_0_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_0_1_0; }

		//(parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//parametros+=OperacionCompleta
		public Assignment getParametrosAssignment_0_2_0() { return cParametrosAssignment_0_2_0; }

		//OperacionCompleta
		public RuleCall getParametrosOperacionCompletaParserRuleCall_0_2_0_0() { return cParametrosOperacionCompletaParserRuleCall_0_2_0_0; }

		//(',' parametros+=OperacionCompleta)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }

		//parametros+=OperacionCompleta
		public Assignment getParametrosAssignment_0_2_1_1() { return cParametrosAssignment_0_2_1_1; }

		//OperacionCompleta
		public RuleCall getParametrosOperacionCompletaParserRuleCall_0_2_1_1_0() { return cParametrosOperacionCompletaParserRuleCall_0_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//{FuncionInterna} nombre=NombreInterna (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')'
		public Group getGroup_1() { return cGroup_1; }

		//{FuncionInterna}
		public Action getFuncionInternaAction_1_0() { return cFuncionInternaAction_1_0; }

		//nombre=NombreInterna
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//NombreInterna
		public RuleCall getNombreNombreInternaParserRuleCall_1_1_0() { return cNombreNombreInternaParserRuleCall_1_1_0; }

		//(parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//parametros+=OperacionCompleta
		public Assignment getParametrosAssignment_1_2_0() { return cParametrosAssignment_1_2_0; }

		//OperacionCompleta
		public RuleCall getParametrosOperacionCompletaParserRuleCall_1_2_0_0() { return cParametrosOperacionCompletaParserRuleCall_1_2_0_0; }

		//(',' parametros+=OperacionCompleta)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//parametros+=OperacionCompleta
		public Assignment getParametrosAssignment_1_2_1_1() { return cParametrosAssignment_1_2_1_1; }

		//OperacionCompleta
		public RuleCall getParametrosOperacionCompletaParserRuleCall_1_2_1_1_0() { return cParametrosOperacionCompletaParserRuleCall_1_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class CampoRegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CampoRegistro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNombre_campoAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_0_1_0 = (RuleCall)cNombre_campoAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNombre_campoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_1_1_0 = (RuleCall)cNombre_campoAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPrimerIndiceAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPrimerIndiceOperacionIndiceParserRuleCall_1_3_0 = (RuleCall)cPrimerIndiceAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNombre_campoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_2_1_0 = (RuleCall)cNombre_campoAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPrimerIndiceAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cPrimerIndiceOperacionIndiceParserRuleCall_2_3_0 = (RuleCall)cPrimerIndiceAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cSegundoIndiceAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cSegundoIndiceOperacionIndiceParserRuleCall_2_5_0 = (RuleCall)cSegundoIndiceAssignment_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//CampoRegistro:
		//	'.' nombre_campo=EString | '.' nombre_campo=EString '[' primerIndice=OperacionIndice ']' | '.' nombre_campo=EString
		//	'[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']';
		@Override public ParserRule getRule() { return rule; }

		//'.' nombre_campo=EString | '.' nombre_campo=EString '[' primerIndice=OperacionIndice ']' | '.' nombre_campo=EString '['
		//primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'.' nombre_campo=EString
		public Group getGroup_0() { return cGroup_0; }

		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment_0_1() { return cNombre_campoAssignment_0_1; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_0_1_0() { return cNombre_campoEStringParserRuleCall_0_1_0; }

		//'.' nombre_campo=EString '[' primerIndice=OperacionIndice ']'
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment_1_1() { return cNombre_campoAssignment_1_1; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_1_1_0() { return cNombre_campoEStringParserRuleCall_1_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }

		//primerIndice=OperacionIndice
		public Assignment getPrimerIndiceAssignment_1_3() { return cPrimerIndiceAssignment_1_3; }

		//OperacionIndice
		public RuleCall getPrimerIndiceOperacionIndiceParserRuleCall_1_3_0() { return cPrimerIndiceOperacionIndiceParserRuleCall_1_3_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }

		//'.' nombre_campo=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']'
		public Group getGroup_2() { return cGroup_2; }

		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment_2_1() { return cNombre_campoAssignment_2_1; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_2_1_0() { return cNombre_campoEStringParserRuleCall_2_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//primerIndice=OperacionIndice
		public Assignment getPrimerIndiceAssignment_2_3() { return cPrimerIndiceAssignment_2_3; }

		//OperacionIndice
		public RuleCall getPrimerIndiceOperacionIndiceParserRuleCall_2_3_0() { return cPrimerIndiceOperacionIndiceParserRuleCall_2_3_0; }

		//']['
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_2_4() { return cRightSquareBracketLeftSquareBracketKeyword_2_4; }

		//segundoIndice=OperacionIndice
		public Assignment getSegundoIndiceAssignment_2_5() { return cSegundoIndiceAssignment_2_5; }

		//OperacionIndice
		public RuleCall getSegundoIndiceOperacionIndiceParserRuleCall_2_5_0() { return cSegundoIndiceOperacionIndiceParserRuleCall_2_5_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }
	}

	public class VariablesComplejasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.VariablesComplejas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValorVectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNombre_vectorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNombre_vectorEStringParserRuleCall_0_1_0_0 = (RuleCall)cNombre_vectorAssignment_0_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cIndiceAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cIndiceOperacionIndiceParserRuleCall_0_1_2_0 = (RuleCall)cIndiceAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cCamposAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCamposCampoRegistroParserRuleCall_0_2_0 = (RuleCall)cCamposAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValorMatrizAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cNombre_matrizAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNombre_matrizEStringParserRuleCall_1_1_0_0 = (RuleCall)cNombre_matrizAssignment_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPrimerIndiceAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0 = (RuleCall)cPrimerIndiceAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cSegundoIndiceAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0 = (RuleCall)cSegundoIndiceAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Assignment cCamposAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCamposCampoRegistroParserRuleCall_1_2_0 = (RuleCall)cCamposAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValorRegistroAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNombre_registroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNombre_registroEStringParserRuleCall_2_1_0 = (RuleCall)cNombre_registroAssignment_2_1.eContents().get(0);
		private final Assignment cCamposAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCamposCampoRegistroParserRuleCall_2_2_0 = (RuleCall)cCamposAssignment_2_2.eContents().get(0);
		
		//VariablesComplejas Operacion:
		//	{ValorVector} (nombre_vector=EString '[' indice=OperacionIndice ']') campos+=CampoRegistro*
		//	| {ValorMatriz} (nombre_matriz=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']')
		//	campos+=CampoRegistro*
		//	| {ValorRegistro} nombre_registro=EString campos+=CampoRegistro+
		@Override public ParserRule getRule() { return rule; }

		//{ValorVector} (nombre_vector=EString '[' indice=OperacionIndice ']') campos+=CampoRegistro* | {ValorMatriz}
		//(nombre_matriz=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']') campos+=CampoRegistro*
		//| {ValorRegistro} nombre_registro=EString campos+=CampoRegistro+
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ValorVector} (nombre_vector=EString '[' indice=OperacionIndice ']') campos+=CampoRegistro*
		public Group getGroup_0() { return cGroup_0; }

		//{ValorVector}
		public Action getValorVectorAction_0_0() { return cValorVectorAction_0_0; }

		//(nombre_vector=EString '[' indice=OperacionIndice ']')
		public Group getGroup_0_1() { return cGroup_0_1; }

		//nombre_vector=EString
		public Assignment getNombre_vectorAssignment_0_1_0() { return cNombre_vectorAssignment_0_1_0; }

		//EString
		public RuleCall getNombre_vectorEStringParserRuleCall_0_1_0_0() { return cNombre_vectorEStringParserRuleCall_0_1_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }

		//indice=OperacionIndice
		public Assignment getIndiceAssignment_0_1_2() { return cIndiceAssignment_0_1_2; }

		//OperacionIndice
		public RuleCall getIndiceOperacionIndiceParserRuleCall_0_1_2_0() { return cIndiceOperacionIndiceParserRuleCall_0_1_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }

		//campos+=CampoRegistro*
		public Assignment getCamposAssignment_0_2() { return cCamposAssignment_0_2; }

		//CampoRegistro
		public RuleCall getCamposCampoRegistroParserRuleCall_0_2_0() { return cCamposCampoRegistroParserRuleCall_0_2_0; }

		//{ValorMatriz} (nombre_matriz=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']')
		//campos+=CampoRegistro*
		public Group getGroup_1() { return cGroup_1; }

		//{ValorMatriz}
		public Action getValorMatrizAction_1_0() { return cValorMatrizAction_1_0; }

		//(nombre_matriz=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']')
		public Group getGroup_1_1() { return cGroup_1_1; }

		//nombre_matriz=EString
		public Assignment getNombre_matrizAssignment_1_1_0() { return cNombre_matrizAssignment_1_1_0; }

		//EString
		public RuleCall getNombre_matrizEStringParserRuleCall_1_1_0_0() { return cNombre_matrizEStringParserRuleCall_1_1_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//primerIndice=OperacionIndice
		public Assignment getPrimerIndiceAssignment_1_1_2() { return cPrimerIndiceAssignment_1_1_2; }

		//OperacionIndice
		public RuleCall getPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0() { return cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0; }

		//']['
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_1_1_3() { return cRightSquareBracketLeftSquareBracketKeyword_1_1_3; }

		//segundoIndice=OperacionIndice
		public Assignment getSegundoIndiceAssignment_1_1_4() { return cSegundoIndiceAssignment_1_1_4; }

		//OperacionIndice
		public RuleCall getSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0() { return cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_1_5() { return cRightSquareBracketKeyword_1_1_5; }

		//campos+=CampoRegistro*
		public Assignment getCamposAssignment_1_2() { return cCamposAssignment_1_2; }

		//CampoRegistro
		public RuleCall getCamposCampoRegistroParserRuleCall_1_2_0() { return cCamposCampoRegistroParserRuleCall_1_2_0; }

		//{ValorRegistro} nombre_registro=EString campos+=CampoRegistro+
		public Group getGroup_2() { return cGroup_2; }

		//{ValorRegistro}
		public Action getValorRegistroAction_2_0() { return cValorRegistroAction_2_0; }

		//nombre_registro=EString
		public Assignment getNombre_registroAssignment_2_1() { return cNombre_registroAssignment_2_1; }

		//EString
		public RuleCall getNombre_registroEStringParserRuleCall_2_1_0() { return cNombre_registroEStringParserRuleCall_2_1_0; }

		//campos+=CampoRegistro+
		public Assignment getCamposAssignment_2_2() { return cCamposAssignment_2_2; }

		//CampoRegistro
		public RuleCall getCamposCampoRegistroParserRuleCall_2_2_0() { return cCamposCampoRegistroParserRuleCall_2_2_0; }
	}

	public class VariablesBasicasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.VariablesBasicas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValorEFloatParserRuleCall_1_1_0 = (RuleCall)cValorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCadenaCaracteresAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValorCADTerminalRuleCall_2_1_0 = (RuleCall)cValorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCaracterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValorCARTerminalRuleCall_3_1_0 = (RuleCall)cValorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLogicoAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValorBooleanoParserRuleCall_4_1_0 = (RuleCall)cValorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableIDAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNombreAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_5_1_0 = (RuleCall)cNombreAssignment_5_1.eContents().get(0);
		
		//VariablesBasicas Operacion:
		//	{Entero} valor=EInt
		//	| {Real} valor=EFloat
		//	| {CadenaCaracteres} valor=CAD
		//	| {Caracter} valor=CAR
		//	| {Logico} valor=Booleano
		//	| {VariableID} nombre=EString
		@Override public ParserRule getRule() { return rule; }

		//{Entero} valor=EInt | {Real} valor=EFloat | {CadenaCaracteres} valor=CAD | {Caracter} valor=CAR | {Logico}
		//valor=Booleano | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Entero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{Entero}
		public Action getEnteroAction_0_0() { return cEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{Real} valor=EFloat
		public Group getGroup_1() { return cGroup_1; }

		//{Real}
		public Action getRealAction_1_0() { return cRealAction_1_0; }

		//valor=EFloat
		public Assignment getValorAssignment_1_1() { return cValorAssignment_1_1; }

		//EFloat
		public RuleCall getValorEFloatParserRuleCall_1_1_0() { return cValorEFloatParserRuleCall_1_1_0; }

		//{CadenaCaracteres} valor=CAD
		public Group getGroup_2() { return cGroup_2; }

		//{CadenaCaracteres}
		public Action getCadenaCaracteresAction_2_0() { return cCadenaCaracteresAction_2_0; }

		//valor=CAD
		public Assignment getValorAssignment_2_1() { return cValorAssignment_2_1; }

		//CAD
		public RuleCall getValorCADTerminalRuleCall_2_1_0() { return cValorCADTerminalRuleCall_2_1_0; }

		//{Caracter} valor=CAR
		public Group getGroup_3() { return cGroup_3; }

		//{Caracter}
		public Action getCaracterAction_3_0() { return cCaracterAction_3_0; }

		//valor=CAR
		public Assignment getValorAssignment_3_1() { return cValorAssignment_3_1; }

		//CAR
		public RuleCall getValorCARTerminalRuleCall_3_1_0() { return cValorCARTerminalRuleCall_3_1_0; }

		//{Logico} valor=Booleano
		public Group getGroup_4() { return cGroup_4; }

		//{Logico}
		public Action getLogicoAction_4_0() { return cLogicoAction_4_0; }

		//valor=Booleano
		public Assignment getValorAssignment_4_1() { return cValorAssignment_4_1; }

		//Booleano
		public RuleCall getValorBooleanoParserRuleCall_4_1_0() { return cValorBooleanoParserRuleCall_4_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_5() { return cGroup_5; }

		//{VariableID}
		public Action getVariableIDAction_5_0() { return cVariableIDAction_5_0; }

		//nombre=EString
		public Assignment getNombreAssignment_5_1() { return cNombreAssignment_5_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_5_1_0() { return cNombreEStringParserRuleCall_5_1_0; }
	}

	public class SinoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Sino");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSinoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSi_noKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSentenciasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSentenciasSentenciaParserRuleCall_2_0 = (RuleCall)cSentenciasAssignment_2.eContents().get(0);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveDevolverParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		
		//Sino:
		//	{Sino}
		//	'si_no'
		//	sentencias+=Sentencia*
		//	devuelve=Devolver?;
		@Override public ParserRule getRule() { return rule; }

		//{Sino} 'si_no' sentencias+=Sentencia* devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//{Sino}
		public Action getSinoAction_0() { return cSinoAction_0; }

		//'si_no'
		public Keyword getSi_noKeyword_1() { return cSi_noKeyword_1; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_2() { return cSentenciasAssignment_2; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_2_0() { return cSentenciasSentenciaParserRuleCall_2_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_3_0() { return cDevuelveDevolverParserRuleCall_3_0; }
	}

	public class DevolverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Devolver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDevolverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevolverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDevuelveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDevuelveOperacionCompletaParserRuleCall_2_0 = (RuleCall)cDevuelveAssignment_2.eContents().get(0);
		
		//Devolver:
		//	{Devolver}
		//	'devolver' devuelve=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//{Devolver} 'devolver' devuelve=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//{Devolver}
		public Action getDevolverAction_0() { return cDevolverAction_0; }

		//'devolver'
		public Keyword getDevolverKeyword_1() { return cDevolverKeyword_1; }

		//devuelve=OperacionCompleta
		public Assignment getDevuelveAssignment_2() { return cDevuelveAssignment_2; }

		//OperacionCompleta
		public RuleCall getDevuelveOperacionCompletaParserRuleCall_2_0() { return cDevuelveOperacionCompletaParserRuleCall_2_0; }
	}

	public class ParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Parametro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPasoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPasoTipoPasoParserRuleCall_0_0 = (RuleCall)cPasoAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//Parametro:
		//	paso=TipoPaso
		//	tipo=Tipo ": "
		//	variable=Variable;
		@Override public ParserRule getRule() { return rule; }

		//paso=TipoPaso tipo=Tipo ": " variable=Variable
		public Group getGroup() { return cGroup; }

		//paso=TipoPaso
		public Assignment getPasoAssignment_0() { return cPasoAssignment_0; }

		//TipoPaso
		public RuleCall getPasoTipoPasoParserRuleCall_0_0() { return cPasoTipoPasoParserRuleCall_0_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}

	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrosAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_3_0_0 = (RuleCall)cParametrosAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrosAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_3_1_1_0 = (RuleCall)cParametrosAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclaracionesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclaracionesDeclaracionParserRuleCall_5_1_0 = (RuleCall)cDeclaracionesAssignment_5_1.eContents().get(0);
		private final Keyword cInicioKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSentenciasAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSentenciasSentenciaParserRuleCall_7_0 = (RuleCall)cSentenciasAssignment_7.eContents().get(0);
		private final Assignment cDevuelveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDevuelveDevolverParserRuleCall_8_0 = (RuleCall)cDevuelveAssignment_8.eContents().get(0);
		private final Keyword cFin_funcionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Funcion:
		//	tipo=TipoVariable 'funcion'
		//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
		//	declaraciones+=Declaracion*)?
		//	'inicio'
		//	sentencias+=Sentencia*
		//	devuelve=Devolver?
		//	'fin_funcion';
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable 'funcion' nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
		//declaraciones+=Declaracion*)? 'inicio' sentencias+=Sentencia* devuelve=Devolver? 'fin_funcion'
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//'funcion'
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_2_0() { return cNombreNOMBRE_FUNTerminalRuleCall_2_0; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_0() { return cParametrosAssignment_3_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_0_0() { return cParametrosParametroParserRuleCall_3_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_3_1_1() { return cParametrosAssignment_3_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_3_1_1_0() { return cParametrosParametroParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//('var' declaraciones+=Declaracion*)?
		public Group getGroup_5() { return cGroup_5; }

		//'var'
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }

		//declaraciones+=Declaracion*
		public Assignment getDeclaracionesAssignment_5_1() { return cDeclaracionesAssignment_5_1; }

		//Declaracion
		public RuleCall getDeclaracionesDeclaracionParserRuleCall_5_1_0() { return cDeclaracionesDeclaracionParserRuleCall_5_1_0; }

		//'inicio'
		public Keyword getInicioKeyword_6() { return cInicioKeyword_6; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_7() { return cSentenciasAssignment_7; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_7_0() { return cSentenciasSentenciaParserRuleCall_7_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_8() { return cDevuelveAssignment_8; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_8_0() { return cDevuelveDevolverParserRuleCall_8_0; }

		//'fin_funcion'
		public Keyword getFin_funcionKeyword_9() { return cFin_funcionKeyword_9; }
	}

	public class ProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Procedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametrosAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_2_0_0 = (RuleCall)cParametrosAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametrosAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_2_1_1_0 = (RuleCall)cParametrosAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclaracionesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclaracionesDeclaracionParserRuleCall_4_1_0 = (RuleCall)cDeclaracionesAssignment_4_1.eContents().get(0);
		private final Keyword cInicioKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSentenciasSentenciaParserRuleCall_6_0 = (RuleCall)cSentenciasAssignment_6.eContents().get(0);
		private final Keyword cFin_procedimientoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Procedimiento:
		//	'procedimiento'
		//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
		//	declaraciones+=Declaracion*)?
		//	'inicio'
		//	sentencias+=Sentencia*
		//	'fin_procedimiento';
		@Override public ParserRule getRule() { return rule; }

		//'procedimiento' nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
		//declaraciones+=Declaracion*)? 'inicio' sentencias+=Sentencia* 'fin_procedimiento'
		public Group getGroup() { return cGroup; }

		//'procedimiento'
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_1_0; }

		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_0() { return cParametrosAssignment_2_0; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_0_0() { return cParametrosParametroParserRuleCall_2_0_0; }

		//("," parametros+=Parametro)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parametros+=Parametro
		public Assignment getParametrosAssignment_2_1_1() { return cParametrosAssignment_2_1_1; }

		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_2_1_1_0() { return cParametrosParametroParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//('var' declaraciones+=Declaracion*)?
		public Group getGroup_4() { return cGroup_4; }

		//'var'
		public Keyword getVarKeyword_4_0() { return cVarKeyword_4_0; }

		//declaraciones+=Declaracion*
		public Assignment getDeclaracionesAssignment_4_1() { return cDeclaracionesAssignment_4_1; }

		//Declaracion
		public RuleCall getDeclaracionesDeclaracionParserRuleCall_4_1_0() { return cDeclaracionesDeclaracionParserRuleCall_4_1_0; }

		//'inicio'
		public Keyword getInicioKeyword_5() { return cInicioKeyword_5; }

		//sentencias+=Sentencia*
		public Assignment getSentenciasAssignment_6() { return cSentenciasAssignment_6; }

		//Sentencia
		public RuleCall getSentenciasSentenciaParserRuleCall_6_0() { return cSentenciasSentenciaParserRuleCall_6_0; }

		//'fin_procedimiento'
		public Keyword getFin_procedimientoKeyword_7() { return cFin_procedimientoKeyword_7; }
	}

	public class TipoPasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.TipoPaso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TipoPaso:
		//	'E' | 'E/S' | 'S';
		@Override public ParserRule getRule() { return rule; }

		//'E' | 'E/S' | 'S'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'E'
		public Keyword getEKeyword_0() { return cEKeyword_0; }

		//'E/S'
		public Keyword getESKeyword_1() { return cESKeyword_1; }

		//'S'
		public Keyword getSKeyword_2() { return cSKeyword_2; }
	}

	public class BooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.Booleano");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerdaderoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalsoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Booleano:
		//	'verdadero' | 'falso';
		@Override public ParserRule getRule() { return rule; }

		//'verdadero' | 'falso'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'verdadero'
		public Keyword getVerdaderoKeyword_0() { return cVerdaderoKeyword_0; }

		//'falso'
		public Keyword getFalsoKeyword_1() { return cFalsoKeyword_1; }
	}
	
	
	private final CodigoElements pCodigo;
	private final AlgoritmoElements pAlgoritmo;
	private final ModuloElements pModulo;
	private final ImplementacionElements pImplementacion;
	private final CabeceraSubprocesoElements pCabeceraSubproceso;
	private final CabeceraProcedimientoElements pCabeceraProcedimiento;
	private final CabeceraFuncionElements pCabeceraFuncion;
	private final TipoComplejoElements pTipoComplejo;
	private final TipoSubprocesoElements pTipoSubproceso;
	private final TipoFuncionElements pTipoFuncion;
	private final TipoProcedimientoElements pTipoProcedimiento;
	private final SubprocesoElements pSubproceso;
	private final ComentarioElements pComentario;
	private final SentenciaElements pSentencia;
	private final BloqueElements pBloque;
	private final DeclaracionElements pDeclaracion;
	private final FuncionFicheroAbrirElements pFuncionFicheroAbrir;
	private final FuncionFicheroCerrarElements pFuncionFicheroCerrar;
	private final ModoAperturaElements pModoApertura;
	private final TerminalRule tNOMBRE_FUN;
	private final NombreInternaElements pNombreInterna;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final TipoElements pTipo;
	private final TipoDefinidoElements pTipoDefinido;
	private final TipoBasicoElements pTipoBasico;
	private final ConstanteElements pConstante;
	private final VectorElements pVector;
	private final MatrizElements pMatriz;
	private final RegistroElements pRegistro;
	private final ArchivoElements pArchivo;
	private final EnumeradoElements pEnumerado;
	private final SubrangoElements pSubrango;
	private final SubrangoNumericoElements pSubrangoNumerico;
	private final SubrangoEnumeradoElements pSubrangoEnumerado;
	private final InicioElements pInicio;
	private final EStringElements pEString;
	private final DeclaracionBasicaElements pDeclaracionBasica;
	private final DeclaracionDefinidaElements pDeclaracionDefinida;
	private final AsignacionElements pAsignacion;
	private final AsignacionNormalElements pAsignacionNormal;
	private final AsignacionComplejaElements pAsignacionCompleja;
	private final EscribirElements pEscribir;
	private final LeerElements pLeer;
	private final SiElements pSi;
	private final MientrasElements pMientras;
	private final RepetirElements pRepetir;
	private final DesdeElements pDesde;
	private final CasoElements pCaso;
	private final SegunElements pSegun;
	private final TipoVariableElements pTipoVariable;
	private final VariableElements pVariable;
	private final TerminalRule tCAD;
	private final TerminalRule tCAR;
	private final SignoOrElements pSignoOr;
	private final SignoAndElements pSignoAnd;
	private final SignoIgualdadElements pSignoIgualdad;
	private final SignoComparacionElements pSignoComparacion;
	private final SignoSumaElements pSignoSuma;
	private final SignoRestaElements pSignoResta;
	private final SignoMultiplicacionElements pSignoMultiplicacion;
	private final SignoDivisionElements pSignoDivision;
	private final SignoModuloElements pSignoModulo;
	private final SignoDivElements pSignoDiv;
	private final SignoNoElements pSignoNo;
	private final OperacionElements pOperacion;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final ModElements pMod;
	private final IgualdadElements pIgualdad;
	private final ComparacionElements pComparacion;
	private final SumaRestaElements pSumaResta;
	private final MultiplicacionDivisionElements pMultiplicacionDivision;
	private final OperacionIndiceElements pOperacionIndice;
	private final OrIndiceElements pOrIndice;
	private final AndIndiceElements pAndIndice;
	private final IgualdadIndiceElements pIgualdadIndice;
	private final ComparacionIndiceElements pComparacionIndice;
	private final SumaRestaIndiceElements pSumaRestaIndice;
	private final MultiplicacionDivisionIndiceElements pMultiplicacionDivisionIndice;
	private final PrimariaIndiceElements pPrimariaIndice;
	private final PrimariaElements pPrimaria;
	private final OperacionCompletaElements pOperacionCompleta;
	private final OperacionParentesisElements pOperacionParentesis;
	private final FuncionesElements pFunciones;
	private final CampoRegistroElements pCampoRegistro;
	private final VariablesComplejasElements pVariablesComplejas;
	private final VariablesBasicasElements pVariablesBasicas;
	private final SinoElements pSino;
	private final DevolverElements pDevolver;
	private final ParametroElements pParametro;
	private final FuncionElements pFuncion;
	private final ProcedimientoElements pProcedimiento;
	private final TipoPasoElements pTipoPaso;
	private final BooleanoElements pBooleano;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VaryGrammarGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCodigo = new CodigoElements();
		this.pAlgoritmo = new AlgoritmoElements();
		this.pModulo = new ModuloElements();
		this.pImplementacion = new ImplementacionElements();
		this.pCabeceraSubproceso = new CabeceraSubprocesoElements();
		this.pCabeceraProcedimiento = new CabeceraProcedimientoElements();
		this.pCabeceraFuncion = new CabeceraFuncionElements();
		this.pTipoComplejo = new TipoComplejoElements();
		this.pTipoSubproceso = new TipoSubprocesoElements();
		this.pTipoFuncion = new TipoFuncionElements();
		this.pTipoProcedimiento = new TipoProcedimientoElements();
		this.pSubproceso = new SubprocesoElements();
		this.pComentario = new ComentarioElements();
		this.pSentencia = new SentenciaElements();
		this.pBloque = new BloqueElements();
		this.pDeclaracion = new DeclaracionElements();
		this.pFuncionFicheroAbrir = new FuncionFicheroAbrirElements();
		this.pFuncionFicheroCerrar = new FuncionFicheroCerrarElements();
		this.pModoApertura = new ModoAperturaElements();
		this.tNOMBRE_FUN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.NOMBRE_FUN");
		this.pNombreInterna = new NombreInternaElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.pTipo = new TipoElements();
		this.pTipoDefinido = new TipoDefinidoElements();
		this.pTipoBasico = new TipoBasicoElements();
		this.pConstante = new ConstanteElements();
		this.pVector = new VectorElements();
		this.pMatriz = new MatrizElements();
		this.pRegistro = new RegistroElements();
		this.pArchivo = new ArchivoElements();
		this.pEnumerado = new EnumeradoElements();
		this.pSubrango = new SubrangoElements();
		this.pSubrangoNumerico = new SubrangoNumericoElements();
		this.pSubrangoEnumerado = new SubrangoEnumeradoElements();
		this.pInicio = new InicioElements();
		this.pEString = new EStringElements();
		this.pDeclaracionBasica = new DeclaracionBasicaElements();
		this.pDeclaracionDefinida = new DeclaracionDefinidaElements();
		this.pAsignacion = new AsignacionElements();
		this.pAsignacionNormal = new AsignacionNormalElements();
		this.pAsignacionCompleja = new AsignacionComplejaElements();
		this.pEscribir = new EscribirElements();
		this.pLeer = new LeerElements();
		this.pSi = new SiElements();
		this.pMientras = new MientrasElements();
		this.pRepetir = new RepetirElements();
		this.pDesde = new DesdeElements();
		this.pCaso = new CasoElements();
		this.pSegun = new SegunElements();
		this.pTipoVariable = new TipoVariableElements();
		this.pVariable = new VariableElements();
		this.tCAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CAD");
		this.tCAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.VaryGrammar.CAR");
		this.pSignoOr = new SignoOrElements();
		this.pSignoAnd = new SignoAndElements();
		this.pSignoIgualdad = new SignoIgualdadElements();
		this.pSignoComparacion = new SignoComparacionElements();
		this.pSignoSuma = new SignoSumaElements();
		this.pSignoResta = new SignoRestaElements();
		this.pSignoMultiplicacion = new SignoMultiplicacionElements();
		this.pSignoDivision = new SignoDivisionElements();
		this.pSignoModulo = new SignoModuloElements();
		this.pSignoDiv = new SignoDivElements();
		this.pSignoNo = new SignoNoElements();
		this.pOperacion = new OperacionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pMod = new ModElements();
		this.pIgualdad = new IgualdadElements();
		this.pComparacion = new ComparacionElements();
		this.pSumaResta = new SumaRestaElements();
		this.pMultiplicacionDivision = new MultiplicacionDivisionElements();
		this.pOperacionIndice = new OperacionIndiceElements();
		this.pOrIndice = new OrIndiceElements();
		this.pAndIndice = new AndIndiceElements();
		this.pIgualdadIndice = new IgualdadIndiceElements();
		this.pComparacionIndice = new ComparacionIndiceElements();
		this.pSumaRestaIndice = new SumaRestaIndiceElements();
		this.pMultiplicacionDivisionIndice = new MultiplicacionDivisionIndiceElements();
		this.pPrimariaIndice = new PrimariaIndiceElements();
		this.pPrimaria = new PrimariaElements();
		this.pOperacionCompleta = new OperacionCompletaElements();
		this.pOperacionParentesis = new OperacionParentesisElements();
		this.pFunciones = new FuncionesElements();
		this.pCampoRegistro = new CampoRegistroElements();
		this.pVariablesComplejas = new VariablesComplejasElements();
		this.pVariablesBasicas = new VariablesBasicasElements();
		this.pSino = new SinoElements();
		this.pDevolver = new DevolverElements();
		this.pParametro = new ParametroElements();
		this.pFuncion = new FuncionElements();
		this.pProcedimiento = new ProcedimientoElements();
		this.pTipoPaso = new TipoPasoElements();
		this.pBooleano = new BooleanoElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("vary.pseudocodigo.dsl.c.VaryGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Codigo:
	//	Algoritmo | Modulo;
	public CodigoElements getCodigoAccess() {
		return pCodigo;
	}
	
	public ParserRule getCodigoRule() {
		return getCodigoAccess().getRule();
	}

	//Algoritmo:
	//	'Algoritmo' nombre=EString ('importa'
	//	importaciones+=[Modulo]*
	//	'fin_importa')? ('const'
	//	constantes+=Constante*)? ('tipo'
	//	complejos+=TipoComplejo*)? ('var'
	//	globales+=Declaracion*)?
	//	subprocesos+=Subproceso*
	//	inicio=Inicio
	//	'fin_algoritmo';
	public AlgoritmoElements getAlgoritmoAccess() {
		return pAlgoritmo;
	}
	
	public ParserRule getAlgoritmoRule() {
		return getAlgoritmoAccess().getRule();
	}

	//Modulo:
	//	'Modulo' nombre=ID
	//	'importa'
	//	importaciones+=[Modulo]*
	//	'fin_importa' ('exporta' ('const'
	//	exporta_constantes+=EString*)? ('tipo'
	//	exporta_tipos+=EString*)? ('var'
	//	exporta_globales+=Declaracion*)?
	//	exporta_subprocesos+=CabeceraSubproceso*
	//	'fin_exporta') implementacion=Implementacion
	//	'fin_modulo';
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}

	//Implementacion:
	//	{Implementacion} ('implementacion' ('const'
	//	constantes+=Constante*)? ('tipo'
	//	complejos+=TipoComplejo*)? ('var'
	//	globales+=Declaracion*)?
	//	subprocesos+=Subproceso*
	//	'fin_implementacion');
	public ImplementacionElements getImplementacionAccess() {
		return pImplementacion;
	}
	
	public ParserRule getImplementacionRule() {
		return getImplementacionAccess().getRule();
	}

	//CabeceraSubproceso:
	//	CabeceraProcedimiento | CabeceraFuncion;
	public CabeceraSubprocesoElements getCabeceraSubprocesoAccess() {
		return pCabeceraSubproceso;
	}
	
	public ParserRule getCabeceraSubprocesoRule() {
		return getCabeceraSubprocesoAccess().getRule();
	}

	//CabeceraProcedimiento:
	//	'procedimiento'
	//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')';
	public CabeceraProcedimientoElements getCabeceraProcedimientoAccess() {
		return pCabeceraProcedimiento;
	}
	
	public ParserRule getCabeceraProcedimientoRule() {
		return getCabeceraProcedimientoAccess().getRule();
	}

	//CabeceraFuncion:
	//	tipo=TipoVariable 'funcion'
	//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')';
	public CabeceraFuncionElements getCabeceraFuncionAccess() {
		return pCabeceraFuncion;
	}
	
	public ParserRule getCabeceraFuncionRule() {
		return getCabeceraFuncionAccess().getRule();
	}

	//TipoComplejo:
	//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango | TipoSubproceso;
	public TipoComplejoElements getTipoComplejoAccess() {
		return pTipoComplejo;
	}
	
	public ParserRule getTipoComplejoRule() {
		return getTipoComplejoAccess().getRule();
	}

	//TipoSubproceso:
	//	TipoFuncion | TipoProcedimiento;
	public TipoSubprocesoElements getTipoSubprocesoAccess() {
		return pTipoSubproceso;
	}
	
	public ParserRule getTipoSubprocesoRule() {
		return getTipoSubprocesoAccess().getRule();
	}

	//TipoFuncion:
	//	tipo=TipoVariable 'funcion'
	//	'(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString;
	public TipoFuncionElements getTipoFuncionAccess() {
		return pTipoFuncion;
	}
	
	public ParserRule getTipoFuncionRule() {
		return getTipoFuncionAccess().getRule();
	}

	//TipoProcedimiento:
	//	'procedimiento'
	//	'(' (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ': ' nombre=EString;
	public TipoProcedimientoElements getTipoProcedimientoAccess() {
		return pTipoProcedimiento;
	}
	
	public ParserRule getTipoProcedimientoRule() {
		return getTipoProcedimientoAccess().getRule();
	}

	//Subproceso:
	//	Funcion | Procedimiento;
	public SubprocesoElements getSubprocesoAccess() {
		return pSubproceso;
	}
	
	public ParserRule getSubprocesoRule() {
		return getSubprocesoAccess().getRule();
	}

	//Comentario:
	//	mensaje=SL_COMMENT | mensaje=ML_COMMENT;
	public ComentarioElements getComentarioAccess() {
		return pComentario;
	}
	
	public ParserRule getComentarioRule() {
		return getComentarioAccess().getRule();
	}

	//Sentencia:
	//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
	public SentenciaElements getSentenciaAccess() {
		return pSentencia;
	}
	
	public ParserRule getSentenciaRule() {
		return getSentenciaAccess().getRule();
	}

	//Bloque:
	//	Si | Mientras | Repetir | Desde | Segun;
	public BloqueElements getBloqueAccess() {
		return pBloque;
	}
	
	public ParserRule getBloqueRule() {
		return getBloqueAccess().getRule();
	}

	//Declaracion:
	//	DeclaracionBasica | DeclaracionDefinida;
	public DeclaracionElements getDeclaracionAccess() {
		return pDeclaracion;
	}
	
	public ParserRule getDeclaracionRule() {
		return getDeclaracionAccess().getRule();
	}

	//FuncionFicheroAbrir:
	//	'abrir(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
	//	')';
	public FuncionFicheroAbrirElements getFuncionFicheroAbrirAccess() {
		return pFuncionFicheroAbrir;
	}
	
	public ParserRule getFuncionFicheroAbrirRule() {
		return getFuncionFicheroAbrirAccess().getRule();
	}

	//FuncionFicheroCerrar:
	//	'cerrar('
	//	variable=Primaria ')';
	public FuncionFicheroCerrarElements getFuncionFicheroCerrarAccess() {
		return pFuncionFicheroCerrar;
	}
	
	public ParserRule getFuncionFicheroCerrarRule() {
		return getFuncionFicheroCerrarAccess().getRule();
	}

	//ModoApertura ModoApertura:
	//	'escritura' | 'lectura'
	public ModoAperturaElements getModoAperturaAccess() {
		return pModoApertura;
	}
	
	public ParserRule getModoAperturaRule() {
		return getModoAperturaAccess().getRule();
	}

	//terminal NOMBRE_FUN:
	//	('a'..'z' | 'A'..'Z' | '0'..'9' | '_')* '(';
	public TerminalRule getNOMBRE_FUNRule() {
		return tNOMBRE_FUN;
	} 

	//NombreInterna:
	//	'cos(' | 'cuadrado(' | 'exp(' | 'ln(' | 'log(' | 'sen(' | 'sqrt(' | 'longitud(' | 'concatena(' | 'copiar(';
	public NombreInternaElements getNombreInternaAccess() {
		return pNombreInterna;
	}
	
	public ParserRule getNombreInternaRule() {
		return getNombreInternaAccess().getRule();
	}

	//EInt ecore::EInt:
	//	INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EFloat ecore::EFloat:
	//	INT '.' INT (('E' | 'e') INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	//Tipo:
	//	TipoDefinido | TipoBasico;
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}

	//TipoDefinido:
	//	nombre=EString;
	public TipoDefinidoElements getTipoDefinidoAccess() {
		return pTipoDefinido;
	}
	
	public ParserRule getTipoDefinidoRule() {
		return getTipoDefinidoAccess().getRule();
	}

	//TipoBasico:
	//	nombre=TipoVariable;
	public TipoBasicoElements getTipoBasicoAccess() {
		return pTipoBasico;
	}
	
	public ParserRule getTipoBasicoRule() {
		return getTipoBasicoAccess().getRule();
	}

	//Constante:
	//	variable=Variable '=' valor=Primaria;
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}

	//Vector:
	//	'vector' '[' valor=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString;
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Matriz:
	//	'matriz' '[' valor+=Primaria '][' valor+=Primaria ']' 'de' tipo=Tipo ': ' nombre=EString;
	public MatrizElements getMatrizAccess() {
		return pMatriz;
	}
	
	public ParserRule getMatrizRule() {
		return getMatrizAccess().getRule();
	}

	//Registro:
	//	'registro:' nombre=EString
	//	campos+=Declaracion+
	//	'fin_registro';
	public RegistroElements getRegistroAccess() {
		return pRegistro;
	}
	
	public ParserRule getRegistroRule() {
		return getRegistroAccess().getRule();
	}

	//Archivo:
	//	'archivo de ' tipo=Tipo ': ' nombre=EString;
	public ArchivoElements getArchivoAccess() {
		return pArchivo;
	}
	
	public ParserRule getArchivoRule() {
		return getArchivoAccess().getRule();
	}

	//Enumerado:
	//	nombre=EString '=' '{' (posiblesValores+=Primaria (',' posiblesValores+=Primaria)*) '}';
	public EnumeradoElements getEnumeradoAccess() {
		return pEnumerado;
	}
	
	public ParserRule getEnumeradoRule() {
		return getEnumeradoAccess().getRule();
	}

	//Subrango:
	//	SubrangoNumerico | SubrangoEnumerado;
	public SubrangoElements getSubrangoAccess() {
		return pSubrango;
	}
	
	public ParserRule getSubrangoRule() {
		return getSubrangoAccess().getRule();
	}

	//SubrangoNumerico:
	//	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
	public SubrangoNumericoElements getSubrangoNumericoAccess() {
		return pSubrangoNumerico;
	}
	
	public ParserRule getSubrangoNumericoRule() {
		return getSubrangoNumericoAccess().getRule();
	}

	//SubrangoEnumerado:
	//	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);
	public SubrangoEnumeradoElements getSubrangoEnumeradoAccess() {
		return pSubrangoEnumerado;
	}
	
	public ParserRule getSubrangoEnumeradoRule() {
		return getSubrangoEnumeradoAccess().getRule();
	}

	//Inicio:
	//	'principal' {Inicio}
	//	'var'
	//	declaraciones+=Declaracion*
	//	'inicio'
	//	sentencias+=Sentencia*
	//	'fin_principal';
	public InicioElements getInicioAccess() {
		return pInicio;
	}
	
	public ParserRule getInicioRule() {
		return getInicioAccess().getRule();
	}

	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DeclaracionBasica:
	//	tipo=TipoVariable ': '
	//	variables+=Variable (',' variables+=Variable)*;
	public DeclaracionBasicaElements getDeclaracionBasicaAccess() {
		return pDeclaracionBasica;
	}
	
	public ParserRule getDeclaracionBasicaRule() {
		return getDeclaracionBasicaAccess().getRule();
	}

	//DeclaracionDefinida:
	//	tipo=EString ': '
	//	variables+=Variable (',' variables+=Variable)*;
	public DeclaracionDefinidaElements getDeclaracionDefinidaAccess() {
		return pDeclaracionDefinida;
	}
	
	public ParserRule getDeclaracionDefinidaRule() {
		return getDeclaracionDefinidaAccess().getRule();
	}

	//Asignacion:
	//	AsignacionNormal | AsignacionCompleja;
	public AsignacionElements getAsignacionAccess() {
		return pAsignacion;
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//AsignacionNormal:
	//	valor_asignacion=EString
	//	'<-'
	//	operador=OperacionCompleta;
	public AsignacionNormalElements getAsignacionNormalAccess() {
		return pAsignacionNormal;
	}
	
	public ParserRule getAsignacionNormalRule() {
		return getAsignacionNormalAccess().getRule();
	}

	//AsignacionCompleja:
	//	valor_asignacion=VariablesComplejas
	//	'<-'
	//	operador=OperacionCompleta;
	public AsignacionComplejaElements getAsignacionComplejaAccess() {
		return pAsignacionCompleja;
	}
	
	public ParserRule getAsignacionComplejaRule() {
		return getAsignacionComplejaAccess().getRule();
	}

	//Escribir:
	//	'escribir('
	//	operador+=Primaria ("," operador+=OperacionCompleta)*
	//	')';
	public EscribirElements getEscribirAccess() {
		return pEscribir;
	}
	
	public ParserRule getEscribirRule() {
		return getEscribirAccess().getRule();
	}

	//Leer:
	//	'leer('
	//	variable+=Primaria ("," variable+=Primaria)*
	//	')';
	public LeerElements getLeerAccess() {
		return pLeer;
	}
	
	public ParserRule getLeerRule() {
		return getLeerAccess().getRule();
	}

	//Si:
	//	('si'
	//	'(' | 'si(') condicion=OperacionCompleta
	//	')' 'entonces'
	//	sentencias+=Sentencia*
	//	devuelve=Devolver?
	//	sino=Sino?
	//	'fin_si';
	public SiElements getSiAccess() {
		return pSi;
	}
	
	public ParserRule getSiRule() {
		return getSiAccess().getRule();
	}

	//Mientras:
	//	('mientras'
	//	'(' | 'mientras(') condicion=OperacionCompleta
	//	')' 'hacer'
	//	sentencias+=Sentencia*
	//	'fin_mientras';
	public MientrasElements getMientrasAccess() {
		return pMientras;
	}
	
	public ParserRule getMientrasRule() {
		return getMientrasAccess().getRule();
	}

	//Repetir:
	//	'repetir'
	//	sentencias+=Sentencia* ('hasta_que' '(' | 'hasta_que(') condicion=OperacionCompleta
	//	')';
	public RepetirElements getRepetirAccess() {
		return pRepetir;
	}
	
	public ParserRule getRepetirRule() {
		return getRepetirAccess().getRule();
	}

	//Desde:
	//	'desde' asignacion=AsignacionNormal 'hasta' condicion=OperacionCompleta 'hacer'
	//	sentencias+=Sentencia*
	//	'fin_desde';
	public DesdeElements getDesdeAccess() {
		return pDesde;
	}
	
	public ParserRule getDesdeRule() {
		return getDesdeAccess().getRule();
	}

	//Caso:
	//	'caso' operador=Primaria ': ' sentencias+=Sentencia*
	//	devuelve=Devolver?;
	public CasoElements getCasoAccess() {
		return pCaso;
	}
	
	public ParserRule getCasoRule() {
		return getCasoAccess().getRule();
	}

	//Segun:
	//	('segun_sea' '(' | 'segun_sea(') condicion=OperacionCompleta ')' 'hacer'
	//	casos+=Caso*
	//	'en_otro_caso:'
	//	sentencias+=Sentencia*
	//	devuelve=Devolver?
	//	'fin_segun';
	public SegunElements getSegunAccess() {
		return pSegun;
	}
	
	public ParserRule getSegunRule() {
		return getSegunAccess().getRule();
	}

	//TipoVariable:
	//	'entero' | 'caracter' | 'real' | 'logico' | 'cadena';
	public TipoVariableElements getTipoVariableAccess() {
		return pTipoVariable;
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}

	//Variable:
	//	{Variable} nombre=EString;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//terminal CAD:
	//	'"' ('a'..'z' | 'A'..'Z' | '_' | '-' | ' ' | '!' | '#' | '@' | '%' | '&' | '(' | ')' | '=' | '?' | '\\' | '0'..'9' |
	//	':' | ',' | '.' | 'á' | 'é' | 'í' | 'ó' | 'ú' | 'ñ' | 'Á' | 'É' | 'Í' | 'Ó' | 'Ú' | 'Ñ'
	//	| '/' | '+' | '*' | '¿' | '¡' | '[' | ']' | ';' | '^' | '{' | '}' | 'ç' | 'Ç' | '$' | '€' | '<' | '>' | '¬' | '¨')*
	//	'"';
	public TerminalRule getCADRule() {
		return tCAD;
	} 

	//terminal CAR:
	//	"'" ('a'..'z' | 'A'..'Z' | '_' | '-' | ' ' | '!' | '#' | '@' | '%' | '&' | '(' | ')' | '=' | '?' | '\\' | '0'..'9' |
	//	':' | ',' | '.' | 'á' | 'é' | 'í' | 'ó' | 'ú' | 'ñ' | 'Á' | 'É' | 'Í' | 'Ó' | 'Ú' | 'Ñ'
	//	| '/' | '+' | '*' | '¿' | '¡' | '[' | ']' | ';' | '^' | '{' | '}' | 'ç' | 'Ç' | '$' | '€' | '<' | '>' | '¬' | '¨')
	//	"'";
	public TerminalRule getCARRule() {
		return tCAR;
	} 

	//signoOr signo:
	//	'o'
	public SignoOrElements getSignoOrAccess() {
		return pSignoOr;
	}
	
	public ParserRule getSignoOrRule() {
		return getSignoOrAccess().getRule();
	}

	//signoAnd signo:
	//	'y'
	public SignoAndElements getSignoAndAccess() {
		return pSignoAnd;
	}
	
	public ParserRule getSignoAndRule() {
		return getSignoAndAccess().getRule();
	}

	//signoIgualdad signo:
	//	'=' | '!='
	public SignoIgualdadElements getSignoIgualdadAccess() {
		return pSignoIgualdad;
	}
	
	public ParserRule getSignoIgualdadRule() {
		return getSignoIgualdadAccess().getRule();
	}

	//signoComparacion signo:
	//	'<' | '>' | '>=' | '<='
	public SignoComparacionElements getSignoComparacionAccess() {
		return pSignoComparacion;
	}
	
	public ParserRule getSignoComparacionRule() {
		return getSignoComparacionAccess().getRule();
	}

	//signoSuma signo:
	//	'+'
	public SignoSumaElements getSignoSumaAccess() {
		return pSignoSuma;
	}
	
	public ParserRule getSignoSumaRule() {
		return getSignoSumaAccess().getRule();
	}

	//signoResta signo:
	//	'-'
	public SignoRestaElements getSignoRestaAccess() {
		return pSignoResta;
	}
	
	public ParserRule getSignoRestaRule() {
		return getSignoRestaAccess().getRule();
	}

	//signoMultiplicacion signo:
	//	'*'
	public SignoMultiplicacionElements getSignoMultiplicacionAccess() {
		return pSignoMultiplicacion;
	}
	
	public ParserRule getSignoMultiplicacionRule() {
		return getSignoMultiplicacionAccess().getRule();
	}

	//signoDivision signo:
	//	'/'
	public SignoDivisionElements getSignoDivisionAccess() {
		return pSignoDivision;
	}
	
	public ParserRule getSignoDivisionRule() {
		return getSignoDivisionAccess().getRule();
	}

	//signoModulo signo:
	//	'mod'
	public SignoModuloElements getSignoModuloAccess() {
		return pSignoModulo;
	}
	
	public ParserRule getSignoModuloRule() {
		return getSignoModuloAccess().getRule();
	}

	//signoDiv signo:
	//	'div'
	public SignoDivElements getSignoDivAccess() {
		return pSignoDiv;
	}
	
	public ParserRule getSignoDivRule() {
		return getSignoDivAccess().getRule();
	}

	//signoNo signo:
	//	'no'
	public SignoNoElements getSignoNoAccess() {
		return pSignoNo;
	}
	
	public ParserRule getSignoNoRule() {
		return getSignoNoAccess().getRule();
	}

	//Operacion:
	//	Or;
	public OperacionElements getOperacionAccess() {
		return pOperacion;
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}

	//Or Operacion:
	//	And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And Operacion:
	//	Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Mod Operacion:
	//	Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}

	//Igualdad Operacion:
	//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
	//	right=Comparacion)*
	public IgualdadElements getIgualdadAccess() {
		return pIgualdad;
	}
	
	public ParserRule getIgualdadRule() {
		return getIgualdadAccess().getRule();
	}

	//Comparacion Operacion:
	//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
	//	right=SumaResta)*
	public ComparacionElements getComparacionAccess() {
		return pComparacion;
	}
	
	public ParserRule getComparacionRule() {
		return getComparacionAccess().getRule();
	}

	//SumaResta Operacion:
	//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
	public SumaRestaElements getSumaRestaAccess() {
		return pSumaResta;
	}
	
	public ParserRule getSumaRestaRule() {
		return getSumaRestaAccess().getRule();
	}

	//MultiplicacionDivision Operacion:
	//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
	//	signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) negacionesFinales+='-'*
	//	negacionesFinales+='no'* right=Primaria)*
	public MultiplicacionDivisionElements getMultiplicacionDivisionAccess() {
		return pMultiplicacionDivision;
	}
	
	public ParserRule getMultiplicacionDivisionRule() {
		return getMultiplicacionDivisionAccess().getRule();
	}

	//OperacionIndice Operacion:
	//	OrIndice
	public OperacionIndiceElements getOperacionIndiceAccess() {
		return pOperacionIndice;
	}
	
	public ParserRule getOperacionIndiceRule() {
		return getOperacionIndiceAccess().getRule();
	}

	//OrIndice Operacion:
	//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
	public OrIndiceElements getOrIndiceAccess() {
		return pOrIndice;
	}
	
	public ParserRule getOrIndiceRule() {
		return getOrIndiceAccess().getRule();
	}

	//AndIndice Operacion:
	//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
	public AndIndiceElements getAndIndiceAccess() {
		return pAndIndice;
	}
	
	public ParserRule getAndIndiceRule() {
		return getAndIndiceAccess().getRule();
	}

	//IgualdadIndice Operacion:
	//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
	public IgualdadIndiceElements getIgualdadIndiceAccess() {
		return pIgualdadIndice;
	}
	
	public ParserRule getIgualdadIndiceRule() {
		return getIgualdadIndiceAccess().getRule();
	}

	//ComparacionIndice Operacion:
	//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
	public ComparacionIndiceElements getComparacionIndiceAccess() {
		return pComparacionIndice;
	}
	
	public ParserRule getComparacionIndiceRule() {
		return getComparacionIndiceAccess().getRule();
	}

	//SumaRestaIndice Operacion:
	//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	right=MultiplicacionDivisionIndice)*
	public SumaRestaIndiceElements getSumaRestaIndiceAccess() {
		return pSumaRestaIndice;
	}
	
	public ParserRule getSumaRestaIndiceRule() {
		return getSumaRestaIndiceAccess().getRule();
	}

	//MultiplicacionDivisionIndice Operacion:
	//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {DivisionEntera.left=current}
	//	signo_op=signoDivision | {DivisionReal.left=current} signo_op=signoDiv) right=PrimariaIndice)*
	public MultiplicacionDivisionIndiceElements getMultiplicacionDivisionIndiceAccess() {
		return pMultiplicacionDivisionIndice;
	}
	
	public ParserRule getMultiplicacionDivisionIndiceRule() {
		return getMultiplicacionDivisionIndiceAccess().getRule();
	}

	//PrimariaIndice Operacion:
	//	{Entero} valor=EInt
	//	| {VariableID} nombre=EString
	public PrimariaIndiceElements getPrimariaIndiceAccess() {
		return pPrimariaIndice;
	}
	
	public ParserRule getPrimariaIndiceRule() {
		return getPrimariaIndiceAccess().getRule();
	}

	//Primaria Operacion:
	//	VariablesBasicas | VariablesComplejas
	//	| Funciones
	//	| OperacionParentesis
	public PrimariaElements getPrimariaAccess() {
		return pPrimaria;
	}
	
	public ParserRule getPrimariaRule() {
		return getPrimariaAccess().getRule();
	}

	//OperacionCompleta Operacion:
	//	{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=Operacion
	public OperacionCompletaElements getOperacionCompletaAccess() {
		return pOperacionCompleta;
	}
	
	public ParserRule getOperacionCompletaRule() {
		return getOperacionCompletaAccess().getRule();
	}

	//OperacionParentesis Operacion:
	//	{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=Operacion ')'
	public OperacionParentesisElements getOperacionParentesisAccess() {
		return pOperacionParentesis;
	}
	
	public ParserRule getOperacionParentesisRule() {
		return getOperacionParentesisAccess().getRule();
	}

	//Funciones Operacion:
	//	{LlamadaFuncion} nombre=NOMBRE_FUN (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')' |
	//	{FuncionInterna} nombre=NombreInterna (parametros+=OperacionCompleta (',' parametros+=OperacionCompleta)*)? ')'
	public FuncionesElements getFuncionesAccess() {
		return pFunciones;
	}
	
	public ParserRule getFuncionesRule() {
		return getFuncionesAccess().getRule();
	}

	//CampoRegistro:
	//	'.' nombre_campo=EString | '.' nombre_campo=EString '[' primerIndice=OperacionIndice ']' | '.' nombre_campo=EString
	//	'[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']';
	public CampoRegistroElements getCampoRegistroAccess() {
		return pCampoRegistro;
	}
	
	public ParserRule getCampoRegistroRule() {
		return getCampoRegistroAccess().getRule();
	}

	//VariablesComplejas Operacion:
	//	{ValorVector} (nombre_vector=EString '[' indice=OperacionIndice ']') campos+=CampoRegistro*
	//	| {ValorMatriz} (nombre_matriz=EString '[' primerIndice=OperacionIndice '][' segundoIndice=OperacionIndice ']')
	//	campos+=CampoRegistro*
	//	| {ValorRegistro} nombre_registro=EString campos+=CampoRegistro+
	public VariablesComplejasElements getVariablesComplejasAccess() {
		return pVariablesComplejas;
	}
	
	public ParserRule getVariablesComplejasRule() {
		return getVariablesComplejasAccess().getRule();
	}

	//VariablesBasicas Operacion:
	//	{Entero} valor=EInt
	//	| {Real} valor=EFloat
	//	| {CadenaCaracteres} valor=CAD
	//	| {Caracter} valor=CAR
	//	| {Logico} valor=Booleano
	//	| {VariableID} nombre=EString
	public VariablesBasicasElements getVariablesBasicasAccess() {
		return pVariablesBasicas;
	}
	
	public ParserRule getVariablesBasicasRule() {
		return getVariablesBasicasAccess().getRule();
	}

	//Sino:
	//	{Sino}
	//	'si_no'
	//	sentencias+=Sentencia*
	//	devuelve=Devolver?;
	public SinoElements getSinoAccess() {
		return pSino;
	}
	
	public ParserRule getSinoRule() {
		return getSinoAccess().getRule();
	}

	//Devolver:
	//	{Devolver}
	//	'devolver' devuelve=OperacionCompleta;
	public DevolverElements getDevolverAccess() {
		return pDevolver;
	}
	
	public ParserRule getDevolverRule() {
		return getDevolverAccess().getRule();
	}

	//Parametro:
	//	paso=TipoPaso
	//	tipo=Tipo ": "
	//	variable=Variable;
	public ParametroElements getParametroAccess() {
		return pParametro;
	}
	
	public ParserRule getParametroRule() {
		return getParametroAccess().getRule();
	}

	//Funcion:
	//	tipo=TipoVariable 'funcion'
	//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
	//	declaraciones+=Declaracion*)?
	//	'inicio'
	//	sentencias+=Sentencia*
	//	devuelve=Devolver?
	//	'fin_funcion';
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}

	//Procedimiento:
	//	'procedimiento'
	//	nombre=NOMBRE_FUN (parametros+=Parametro ("," parametros+=Parametro)*)? ')' ('var'
	//	declaraciones+=Declaracion*)?
	//	'inicio'
	//	sentencias+=Sentencia*
	//	'fin_procedimiento';
	public ProcedimientoElements getProcedimientoAccess() {
		return pProcedimiento;
	}
	
	public ParserRule getProcedimientoRule() {
		return getProcedimientoAccess().getRule();
	}

	//TipoPaso:
	//	'E' | 'E/S' | 'S';
	public TipoPasoElements getTipoPasoAccess() {
		return pTipoPaso;
	}
	
	public ParserRule getTipoPasoRule() {
		return getTipoPasoAccess().getRule();
	}

	//Booleano:
	//	'verdadero' | 'falso';
	public BooleanoElements getBooleanoAccess() {
		return pBooleano;
	}
	
	public ParserRule getBooleanoRule() {
		return getBooleanoAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
