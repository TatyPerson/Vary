/*
* generated by Xtext
*/
package vary.pseudocodigo.dsl.c.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VaryGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodigoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Codigo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlgoritmoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuloParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Codigo:
		//	Algoritmo | Modulo;
		public ParserRule getRule() { return rule; }

		//Algoritmo | Modulo
		public Alternatives getAlternatives() { return cAlternatives; }

		//Algoritmo
		public RuleCall getAlgoritmoParserRuleCall_0() { return cAlgoritmoParserRuleCall_0; }

		//Modulo
		public RuleCall getModuloParserRuleCall_1() { return cModuloParserRuleCall_1; }
	}

	public class AlgoritmoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Algoritmo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgoritmoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComentariosAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComentariosComentarioParserRuleCall_2_0_0 = (RuleCall)cComentariosAssignment_2_0.eContents().get(0);
		private final Assignment cComentariosAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComentariosComentarioParserRuleCall_2_1_0 = (RuleCall)cComentariosAssignment_2_1.eContents().get(0);
		private final Keyword cImportaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cImportacionesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cImportacionesModuloCrossReference_4_0_0 = (CrossReference)cImportacionesAssignment_4_0.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_4_0_0_1 = (RuleCall)cImportacionesModuloCrossReference_4_0_0.eContents().get(1);
		private final Assignment cImportacionesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cImportacionesModuloCrossReference_4_1_0 = (CrossReference)cImportacionesAssignment_4_1.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_4_1_0_1 = (RuleCall)cImportacionesModuloCrossReference_4_1_0.eContents().get(1);
		private final Keyword cFin_importaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cConstantesAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cConstantesConstantesParserRuleCall_6_1_0_0 = (RuleCall)cConstantesAssignment_6_1_0.eContents().get(0);
		private final Assignment cConstantesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cConstantesConstantesParserRuleCall_6_1_1_0 = (RuleCall)cConstantesAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTipoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cTipocomplejoAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_7_1_0_0 = (RuleCall)cTipocomplejoAssignment_7_1_0.eContents().get(0);
		private final Assignment cTipocomplejoAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_7_1_1_0 = (RuleCall)cTipocomplejoAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVarKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cGlobalAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cGlobalDeclaracionParserRuleCall_8_1_0_0 = (RuleCall)cGlobalAssignment_8_1_0.eContents().get(0);
		private final Assignment cGlobalAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cGlobalDeclaracionParserRuleCall_8_1_1_0 = (RuleCall)cGlobalAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cFuncionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cFuncionSubprocesoParserRuleCall_9_0_0 = (RuleCall)cFuncionAssignment_9_0.eContents().get(0);
		private final Assignment cFuncionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFuncionSubprocesoParserRuleCall_9_1_0 = (RuleCall)cFuncionAssignment_9_1.eContents().get(0);
		private final Assignment cTieneAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTieneInicioParserRuleCall_10_0 = (RuleCall)cTieneAssignment_10.eContents().get(0);
		private final Keyword cFin_algoritmoKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Algoritmo:
		//	"Algoritmo" nombre=EString (comentarios+=Comentario comentarios+=Comentario*)? "importa" (importaciones+=[Modulo]
		//	importaciones+=[Modulo]*)? "fin_importa" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
		//	(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
		//	(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio "fin_algoritmo";
		public ParserRule getRule() { return rule; }

		//"Algoritmo" nombre=EString (comentarios+=Comentario comentarios+=Comentario*)? "importa" (importaciones+=[Modulo]
		//importaciones+=[Modulo]*)? "fin_importa" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
		//(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
		//(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio "fin_algoritmo"
		public Group getGroup() { return cGroup; }

		//"Algoritmo"
		public Keyword getAlgoritmoKeyword_0() { return cAlgoritmoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//(comentarios+=Comentario comentarios+=Comentario*)?
		public Group getGroup_2() { return cGroup_2; }

		//comentarios+=Comentario
		public Assignment getComentariosAssignment_2_0() { return cComentariosAssignment_2_0; }

		//Comentario
		public RuleCall getComentariosComentarioParserRuleCall_2_0_0() { return cComentariosComentarioParserRuleCall_2_0_0; }

		//comentarios+=Comentario*
		public Assignment getComentariosAssignment_2_1() { return cComentariosAssignment_2_1; }

		//Comentario
		public RuleCall getComentariosComentarioParserRuleCall_2_1_0() { return cComentariosComentarioParserRuleCall_2_1_0; }

		//"importa"
		public Keyword getImportaKeyword_3() { return cImportaKeyword_3; }

		//(importaciones+=[Modulo] importaciones+=[Modulo]*)?
		public Group getGroup_4() { return cGroup_4; }

		//importaciones+=[Modulo]
		public Assignment getImportacionesAssignment_4_0() { return cImportacionesAssignment_4_0; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_4_0_0() { return cImportacionesModuloCrossReference_4_0_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_4_0_0_1() { return cImportacionesModuloIDTerminalRuleCall_4_0_0_1; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_4_1() { return cImportacionesAssignment_4_1; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_4_1_0() { return cImportacionesModuloCrossReference_4_1_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_4_1_0_1() { return cImportacionesModuloIDTerminalRuleCall_4_1_0_1; }

		//"fin_importa"
		public Keyword getFin_importaKeyword_5() { return cFin_importaKeyword_5; }

		//("const" (constantes+=Constantes constantes+=Constantes*)?)?
		public Group getGroup_6() { return cGroup_6; }

		//"const"
		public Keyword getConstKeyword_6_0() { return cConstKeyword_6_0; }

		//(constantes+=Constantes constantes+=Constantes*)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//constantes+=Constantes
		public Assignment getConstantesAssignment_6_1_0() { return cConstantesAssignment_6_1_0; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_6_1_0_0() { return cConstantesConstantesParserRuleCall_6_1_0_0; }

		//constantes+=Constantes*
		public Assignment getConstantesAssignment_6_1_1() { return cConstantesAssignment_6_1_1; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_6_1_1_0() { return cConstantesConstantesParserRuleCall_6_1_1_0; }

		//("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)?
		public Group getGroup_7() { return cGroup_7; }

		//"tipo"
		public Keyword getTipoKeyword_7_0() { return cTipoKeyword_7_0; }

		//(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?
		public Group getGroup_7_1() { return cGroup_7_1; }

		//tipocomplejo+=TipoComplejo
		public Assignment getTipocomplejoAssignment_7_1_0() { return cTipocomplejoAssignment_7_1_0; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_7_1_0_0() { return cTipocomplejoTipoComplejoParserRuleCall_7_1_0_0; }

		//tipocomplejo+=TipoComplejo*
		public Assignment getTipocomplejoAssignment_7_1_1() { return cTipocomplejoAssignment_7_1_1; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_7_1_1_0() { return cTipocomplejoTipoComplejoParserRuleCall_7_1_1_0; }

		//("var" (global+=Declaracion global+=Declaracion*)?)?
		public Group getGroup_8() { return cGroup_8; }

		//"var"
		public Keyword getVarKeyword_8_0() { return cVarKeyword_8_0; }

		//(global+=Declaracion global+=Declaracion*)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//global+=Declaracion
		public Assignment getGlobalAssignment_8_1_0() { return cGlobalAssignment_8_1_0; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_8_1_0_0() { return cGlobalDeclaracionParserRuleCall_8_1_0_0; }

		//global+=Declaracion*
		public Assignment getGlobalAssignment_8_1_1() { return cGlobalAssignment_8_1_1; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_8_1_1_0() { return cGlobalDeclaracionParserRuleCall_8_1_1_0; }

		//(funcion+=Subproceso funcion+=Subproceso*)?
		public Group getGroup_9() { return cGroup_9; }

		//funcion+=Subproceso
		public Assignment getFuncionAssignment_9_0() { return cFuncionAssignment_9_0; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_9_0_0() { return cFuncionSubprocesoParserRuleCall_9_0_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_9_1() { return cFuncionAssignment_9_1; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_9_1_0() { return cFuncionSubprocesoParserRuleCall_9_1_0; }

		//tiene=Inicio
		public Assignment getTieneAssignment_10() { return cTieneAssignment_10; }

		//Inicio
		public RuleCall getTieneInicioParserRuleCall_10_0() { return cTieneInicioParserRuleCall_10_0; }

		//"fin_algoritmo"
		public Keyword getFin_algoritmoKeyword_11() { return cFin_algoritmoKeyword_11; }
	}

	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cImportaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cImportacionesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cImportacionesModuloCrossReference_3_0_0 = (CrossReference)cImportacionesAssignment_3_0.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_3_0_0_1 = (RuleCall)cImportacionesModuloCrossReference_3_0_0.eContents().get(1);
		private final Assignment cImportacionesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cImportacionesModuloCrossReference_3_1_0 = (CrossReference)cImportacionesAssignment_3_1.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_3_1_0_1 = (RuleCall)cImportacionesModuloCrossReference_3_1_0.eContents().get(1);
		private final Keyword cFin_importaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExportaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cConstKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Assignment cExporta_constantesAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cExporta_constantesEStringParserRuleCall_5_1_1_0_0 = (RuleCall)cExporta_constantesAssignment_5_1_1_0.eContents().get(0);
		private final Assignment cExporta_constantesAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cExporta_constantesEStringParserRuleCall_5_1_1_1_0 = (RuleCall)cExporta_constantesAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cTipoKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cGroup_5_2.eContents().get(1);
		private final Assignment cExporta_tiposAssignment_5_2_1_0 = (Assignment)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cExporta_tiposEStringParserRuleCall_5_2_1_0_0 = (RuleCall)cExporta_tiposAssignment_5_2_1_0.eContents().get(0);
		private final Assignment cExporta_tiposAssignment_5_2_1_1 = (Assignment)cGroup_5_2_1.eContents().get(1);
		private final RuleCall cExporta_tiposEStringParserRuleCall_5_2_1_1_0 = (RuleCall)cExporta_tiposAssignment_5_2_1_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cVarKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Assignment cExporta_globalAssignment_5_3_1_0 = (Assignment)cGroup_5_3_1.eContents().get(0);
		private final RuleCall cExporta_globalDeclaracionParserRuleCall_5_3_1_0_0 = (RuleCall)cExporta_globalAssignment_5_3_1_0.eContents().get(0);
		private final Assignment cExporta_globalAssignment_5_3_1_1 = (Assignment)cGroup_5_3_1.eContents().get(1);
		private final RuleCall cExporta_globalDeclaracionParserRuleCall_5_3_1_1_0 = (RuleCall)cExporta_globalAssignment_5_3_1_1.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Assignment cExporta_funcionesAssignment_5_4_0 = (Assignment)cGroup_5_4.eContents().get(0);
		private final RuleCall cExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_0_0 = (RuleCall)cExporta_funcionesAssignment_5_4_0.eContents().get(0);
		private final Assignment cExporta_funcionesAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_1_0 = (RuleCall)cExporta_funcionesAssignment_5_4_1.eContents().get(0);
		private final Keyword cFin_exportaKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cImplementacionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImplementacionImplementacionParserRuleCall_6_0 = (RuleCall)cImplementacionAssignment_6.eContents().get(0);
		private final Keyword cFin_moduloKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Modulo:
		//	"Modulo" nombre=ID "importa" (importaciones+=[Modulo] importaciones+=[Modulo]*)? "fin_importa" ("exporta" ("const"
		//	(exporta_constantes+=EString exporta_constantes+=EString*)?)? ("tipo" (exporta_tipos+=EString
		//	exporta_tipos+=EString*)?)? ("var" (exporta_global+=Declaracion exporta_global+=Declaracion*)?)?
		//	(exporta_funciones+=CabeceraSubproceso exporta_funciones+=CabeceraSubproceso*)? "fin_exporta")
		//	implementacion=Implementacion "fin_modulo";
		public ParserRule getRule() { return rule; }

		//"Modulo" nombre=ID "importa" (importaciones+=[Modulo] importaciones+=[Modulo]*)? "fin_importa" ("exporta" ("const"
		//(exporta_constantes+=EString exporta_constantes+=EString*)?)? ("tipo" (exporta_tipos+=EString
		//exporta_tipos+=EString*)?)? ("var" (exporta_global+=Declaracion exporta_global+=Declaracion*)?)?
		//(exporta_funciones+=CabeceraSubproceso exporta_funciones+=CabeceraSubproceso*)? "fin_exporta")
		//implementacion=Implementacion "fin_modulo"
		public Group getGroup() { return cGroup; }

		//"Modulo"
		public Keyword getModuloKeyword_0() { return cModuloKeyword_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//"importa"
		public Keyword getImportaKeyword_2() { return cImportaKeyword_2; }

		//(importaciones+=[Modulo] importaciones+=[Modulo]*)?
		public Group getGroup_3() { return cGroup_3; }

		//importaciones+=[Modulo]
		public Assignment getImportacionesAssignment_3_0() { return cImportacionesAssignment_3_0; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_3_0_0() { return cImportacionesModuloCrossReference_3_0_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_3_0_0_1() { return cImportacionesModuloIDTerminalRuleCall_3_0_0_1; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_3_1() { return cImportacionesAssignment_3_1; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_3_1_0() { return cImportacionesModuloCrossReference_3_1_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_3_1_0_1() { return cImportacionesModuloIDTerminalRuleCall_3_1_0_1; }

		//"fin_importa"
		public Keyword getFin_importaKeyword_4() { return cFin_importaKeyword_4; }

		//"exporta" ("const" (exporta_constantes+=EString exporta_constantes+=EString*)?)? ("tipo" (exporta_tipos+=EString
		//exporta_tipos+=EString*)?)? ("var" (exporta_global+=Declaracion exporta_global+=Declaracion*)?)?
		//(exporta_funciones+=CabeceraSubproceso exporta_funciones+=CabeceraSubproceso*)? "fin_exporta"
		public Group getGroup_5() { return cGroup_5; }

		//"exporta"
		public Keyword getExportaKeyword_5_0() { return cExportaKeyword_5_0; }

		//("const" (exporta_constantes+=EString exporta_constantes+=EString*)?)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"const"
		public Keyword getConstKeyword_5_1_0() { return cConstKeyword_5_1_0; }

		//(exporta_constantes+=EString exporta_constantes+=EString*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//exporta_constantes+=EString
		public Assignment getExporta_constantesAssignment_5_1_1_0() { return cExporta_constantesAssignment_5_1_1_0; }

		//EString
		public RuleCall getExporta_constantesEStringParserRuleCall_5_1_1_0_0() { return cExporta_constantesEStringParserRuleCall_5_1_1_0_0; }

		//exporta_constantes+=EString*
		public Assignment getExporta_constantesAssignment_5_1_1_1() { return cExporta_constantesAssignment_5_1_1_1; }

		//EString
		public RuleCall getExporta_constantesEStringParserRuleCall_5_1_1_1_0() { return cExporta_constantesEStringParserRuleCall_5_1_1_1_0; }

		//("tipo" (exporta_tipos+=EString exporta_tipos+=EString*)?)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"tipo"
		public Keyword getTipoKeyword_5_2_0() { return cTipoKeyword_5_2_0; }

		//(exporta_tipos+=EString exporta_tipos+=EString*)?
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }

		//exporta_tipos+=EString
		public Assignment getExporta_tiposAssignment_5_2_1_0() { return cExporta_tiposAssignment_5_2_1_0; }

		//EString
		public RuleCall getExporta_tiposEStringParserRuleCall_5_2_1_0_0() { return cExporta_tiposEStringParserRuleCall_5_2_1_0_0; }

		//exporta_tipos+=EString*
		public Assignment getExporta_tiposAssignment_5_2_1_1() { return cExporta_tiposAssignment_5_2_1_1; }

		//EString
		public RuleCall getExporta_tiposEStringParserRuleCall_5_2_1_1_0() { return cExporta_tiposEStringParserRuleCall_5_2_1_1_0; }

		//("var" (exporta_global+=Declaracion exporta_global+=Declaracion*)?)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"var"
		public Keyword getVarKeyword_5_3_0() { return cVarKeyword_5_3_0; }

		//(exporta_global+=Declaracion exporta_global+=Declaracion*)?
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }

		//exporta_global+=Declaracion
		public Assignment getExporta_globalAssignment_5_3_1_0() { return cExporta_globalAssignment_5_3_1_0; }

		//Declaracion
		public RuleCall getExporta_globalDeclaracionParserRuleCall_5_3_1_0_0() { return cExporta_globalDeclaracionParserRuleCall_5_3_1_0_0; }

		//exporta_global+=Declaracion*
		public Assignment getExporta_globalAssignment_5_3_1_1() { return cExporta_globalAssignment_5_3_1_1; }

		//Declaracion
		public RuleCall getExporta_globalDeclaracionParserRuleCall_5_3_1_1_0() { return cExporta_globalDeclaracionParserRuleCall_5_3_1_1_0; }

		//(exporta_funciones+=CabeceraSubproceso exporta_funciones+=CabeceraSubproceso*)?
		public Group getGroup_5_4() { return cGroup_5_4; }

		//exporta_funciones+=CabeceraSubproceso
		public Assignment getExporta_funcionesAssignment_5_4_0() { return cExporta_funcionesAssignment_5_4_0; }

		//CabeceraSubproceso
		public RuleCall getExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_0_0() { return cExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_0_0; }

		//exporta_funciones+=CabeceraSubproceso*
		public Assignment getExporta_funcionesAssignment_5_4_1() { return cExporta_funcionesAssignment_5_4_1; }

		//CabeceraSubproceso
		public RuleCall getExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_1_0() { return cExporta_funcionesCabeceraSubprocesoParserRuleCall_5_4_1_0; }

		//"fin_exporta"
		public Keyword getFin_exportaKeyword_5_5() { return cFin_exportaKeyword_5_5; }

		//implementacion=Implementacion
		public Assignment getImplementacionAssignment_6() { return cImplementacionAssignment_6; }

		//Implementacion
		public RuleCall getImplementacionImplementacionParserRuleCall_6_0() { return cImplementacionImplementacionParserRuleCall_6_0; }

		//"fin_modulo"
		public Keyword getFin_moduloKeyword_7() { return cFin_moduloKeyword_7; }
	}

	public class ImplementacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementacionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImplementacionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cConstKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cConstantesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cConstantesConstantesParserRuleCall_1_1_1_0_0 = (RuleCall)cConstantesAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cConstantesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cConstantesConstantesParserRuleCall_1_1_1_1_0 = (RuleCall)cConstantesAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cTipoKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Assignment cTipocomplejoAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_1_2_1_0_0 = (RuleCall)cTipocomplejoAssignment_1_2_1_0.eContents().get(0);
		private final Assignment cTipocomplejoAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_1_2_1_1_0 = (RuleCall)cTipocomplejoAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cVarKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cGlobalAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cGlobalDeclaracionParserRuleCall_1_3_1_0_0 = (RuleCall)cGlobalAssignment_1_3_1_0.eContents().get(0);
		private final Assignment cGlobalAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cGlobalDeclaracionParserRuleCall_1_3_1_1_0 = (RuleCall)cGlobalAssignment_1_3_1_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cFuncionAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cFuncionSubprocesoParserRuleCall_1_4_0_0 = (RuleCall)cFuncionAssignment_1_4_0.eContents().get(0);
		private final Assignment cFuncionAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cFuncionSubprocesoParserRuleCall_1_4_1_0 = (RuleCall)cFuncionAssignment_1_4_1.eContents().get(0);
		private final Keyword cFin_implementacionKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Implementacion:
		//	{Implementacion} ("implementacion" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
		//	(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
		//	(funcion+=Subproceso funcion+=Subproceso*)? "fin_implementacion");
		public ParserRule getRule() { return rule; }

		//{Implementacion} ("implementacion" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
		//(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
		//(funcion+=Subproceso funcion+=Subproceso*)? "fin_implementacion")
		public Group getGroup() { return cGroup; }

		//{Implementacion}
		public Action getImplementacionAction_0() { return cImplementacionAction_0; }

		//"implementacion" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo" (tipocomplejo+=TipoComplejo
		//tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)? (funcion+=Subproceso
		//funcion+=Subproceso*)? "fin_implementacion"
		public Group getGroup_1() { return cGroup_1; }

		//"implementacion"
		public Keyword getImplementacionKeyword_1_0() { return cImplementacionKeyword_1_0; }

		//("const" (constantes+=Constantes constantes+=Constantes*)?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"const"
		public Keyword getConstKeyword_1_1_0() { return cConstKeyword_1_1_0; }

		//(constantes+=Constantes constantes+=Constantes*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//constantes+=Constantes
		public Assignment getConstantesAssignment_1_1_1_0() { return cConstantesAssignment_1_1_1_0; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_1_1_1_0_0() { return cConstantesConstantesParserRuleCall_1_1_1_0_0; }

		//constantes+=Constantes*
		public Assignment getConstantesAssignment_1_1_1_1() { return cConstantesAssignment_1_1_1_1; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_1_1_1_1_0() { return cConstantesConstantesParserRuleCall_1_1_1_1_0; }

		//("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"tipo"
		public Keyword getTipoKeyword_1_2_0() { return cTipoKeyword_1_2_0; }

		//(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//tipocomplejo+=TipoComplejo
		public Assignment getTipocomplejoAssignment_1_2_1_0() { return cTipocomplejoAssignment_1_2_1_0; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_1_2_1_0_0() { return cTipocomplejoTipoComplejoParserRuleCall_1_2_1_0_0; }

		//tipocomplejo+=TipoComplejo*
		public Assignment getTipocomplejoAssignment_1_2_1_1() { return cTipocomplejoAssignment_1_2_1_1; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_1_2_1_1_0() { return cTipocomplejoTipoComplejoParserRuleCall_1_2_1_1_0; }

		//("var" (global+=Declaracion global+=Declaracion*)?)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"var"
		public Keyword getVarKeyword_1_3_0() { return cVarKeyword_1_3_0; }

		//(global+=Declaracion global+=Declaracion*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//global+=Declaracion
		public Assignment getGlobalAssignment_1_3_1_0() { return cGlobalAssignment_1_3_1_0; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_1_3_1_0_0() { return cGlobalDeclaracionParserRuleCall_1_3_1_0_0; }

		//global+=Declaracion*
		public Assignment getGlobalAssignment_1_3_1_1() { return cGlobalAssignment_1_3_1_1; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_1_3_1_1_0() { return cGlobalDeclaracionParserRuleCall_1_3_1_1_0; }

		//(funcion+=Subproceso funcion+=Subproceso*)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//funcion+=Subproceso
		public Assignment getFuncionAssignment_1_4_0() { return cFuncionAssignment_1_4_0; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_1_4_0_0() { return cFuncionSubprocesoParserRuleCall_1_4_0_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_1_4_1() { return cFuncionAssignment_1_4_1; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_1_4_1_0() { return cFuncionSubprocesoParserRuleCall_1_4_1_0; }

		//"fin_implementacion"
		public Keyword getFin_implementacionKeyword_1_5() { return cFin_implementacionKeyword_1_5; }
	}

	public class CabeceraSubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CabeceraSubproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCabeceraProcedimientoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCabeceraFuncionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CabeceraSubproceso:
		//	CabeceraProcedimiento | CabeceraFuncion;
		public ParserRule getRule() { return rule; }

		//CabeceraProcedimiento | CabeceraFuncion
		public Alternatives getAlternatives() { return cAlternatives; }

		//CabeceraProcedimiento
		public RuleCall getCabeceraProcedimientoParserRuleCall_0() { return cCabeceraProcedimientoParserRuleCall_0; }

		//CabeceraFuncion
		public RuleCall getCabeceraFuncionParserRuleCall_1() { return cCabeceraFuncionParserRuleCall_1; }
	}

	public class CabeceraProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CabeceraProcedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CabeceraProcedimiento:
		//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		public Group getGroup() { return cGroup; }

		//"procedimiento"
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CabeceraFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CabeceraFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreEStringParserRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametrofuncionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_0_0 = (RuleCall)cParametrofuncionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0 = (RuleCall)cParametrofuncionAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CabeceraFuncion:
		//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//	parametrofuncion+=ParametroFuncion)*)? ")";
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ")"
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//"funcion"
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=EString
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_2_0() { return cNombreEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_0() { return cParametrofuncionAssignment_4_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_1_1() { return cParametrofuncionAssignment_4_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class TipoComplejoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoComplejo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatrizParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegistroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArchivoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumeradoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubrangoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TipoComplejo:
		//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
		public ParserRule getRule() { return rule; }

		//Vector | Matriz | Registro | Archivo | Enumerado | Subrango
		public Alternatives getAlternatives() { return cAlternatives; }

		//Vector
		public RuleCall getVectorParserRuleCall_0() { return cVectorParserRuleCall_0; }

		//Matriz
		public RuleCall getMatrizParserRuleCall_1() { return cMatrizParserRuleCall_1; }

		//Registro
		public RuleCall getRegistroParserRuleCall_2() { return cRegistroParserRuleCall_2; }

		//Archivo
		public RuleCall getArchivoParserRuleCall_3() { return cArchivoParserRuleCall_3; }

		//Enumerado
		public RuleCall getEnumeradoParserRuleCall_4() { return cEnumeradoParserRuleCall_4; }

		//Subrango
		public RuleCall getSubrangoParserRuleCall_5() { return cSubrangoParserRuleCall_5; }
	}

	public class SubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subproceso:
		//	Funcion | Procedimiento;
		public ParserRule getRule() { return rule; }

		//Funcion | Procedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//Funcion
		public RuleCall getFuncionParserRuleCall_0() { return cFuncionParserRuleCall_0; }

		//Procedimiento
		public RuleCall getProcedimientoParserRuleCall_1() { return cProcedimientoParserRuleCall_1; }
	}

	public class ComentarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comentario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComentarioAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMensajeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMensajeCOMENTTerminalRuleCall_2_0 = (RuleCall)cMensajeAssignment_2.eContents().get(0);
		
		//Comentario:
		//	{Comentario} / * ML_COMMENT | * / SL_COMMENT mensaje=COMENT;
		public ParserRule getRule() { return rule; }

		//{Comentario} / * ML_COMMENT | * / SL_COMMENT mensaje=COMENT
		public Group getGroup() { return cGroup; }

		//{Comentario}
		public Action getComentarioAction_0() { return cComentarioAction_0; }

		/// * ML_COMMENT | * / SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//mensaje=COMENT
		public Assignment getMensajeAssignment_2() { return cMensajeAssignment_2; }

		//COMENT
		public RuleCall getMensajeCOMENTTerminalRuleCall_2_0() { return cMensajeCOMENTTerminalRuleCall_2_0; }
	}

	public class SentenciasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentencias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEscribirParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBloqueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncionFicheroAbrirParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuncionFicheroCerrarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAsignacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFuncionesParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Sentencias:
		//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
		public ParserRule getRule() { return rule; }

		//Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones
		public Alternatives getAlternatives() { return cAlternatives; }

		//Escribir
		public RuleCall getEscribirParserRuleCall_0() { return cEscribirParserRuleCall_0; }

		//Leer
		public RuleCall getLeerParserRuleCall_1() { return cLeerParserRuleCall_1; }

		//Bloque
		public RuleCall getBloqueParserRuleCall_2() { return cBloqueParserRuleCall_2; }

		//FuncionFicheroAbrir
		public RuleCall getFuncionFicheroAbrirParserRuleCall_3() { return cFuncionFicheroAbrirParserRuleCall_3; }

		//FuncionFicheroCerrar
		public RuleCall getFuncionFicheroCerrarParserRuleCall_4() { return cFuncionFicheroCerrarParserRuleCall_4; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_5() { return cAsignacionParserRuleCall_5; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_6() { return cFuncionesParserRuleCall_6; }
	}

	public class BloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bloque");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMientrasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepetirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDesdeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSegunParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Bloque:
		//	Si | mientras | repetir | desde | segun;
		public ParserRule getRule() { return rule; }

		//Si | mientras | repetir | desde | segun
		public Alternatives getAlternatives() { return cAlternatives; }

		//Si
		public RuleCall getSiParserRuleCall_0() { return cSiParserRuleCall_0; }

		//mientras
		public RuleCall getMientrasParserRuleCall_1() { return cMientrasParserRuleCall_1; }

		//repetir
		public RuleCall getRepetirParserRuleCall_2() { return cRepetirParserRuleCall_2; }

		//desde
		public RuleCall getDesdeParserRuleCall_3() { return cDesdeParserRuleCall_3; }

		//segun
		public RuleCall getSegunParserRuleCall_4() { return cSegunParserRuleCall_4; }
	}

	public class DeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracionVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracionPropiaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaracion:
		//	DeclaracionVariable | DeclaracionPropia;
		public ParserRule getRule() { return rule; }

		//DeclaracionVariable | DeclaracionPropia
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaracionVariable
		public RuleCall getDeclaracionVariableParserRuleCall_0() { return cDeclaracionVariableParserRuleCall_0; }

		//DeclaracionPropia
		public RuleCall getDeclaracionPropiaParserRuleCall_1() { return cDeclaracionPropiaParserRuleCall_1; }
	}

	public class FuncionFicheroAbrirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncionFicheroAbrir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbrirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablePrimariaParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cModoAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cModoModoAperturaParserRuleCall_2_2_0 = (RuleCall)cModoAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cVariableAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVariablePrimariaParserRuleCall_2_4_0 = (RuleCall)cVariableAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroAbrir:
		//	"abrir" "(" (variable+=Primaria "," modo=ModoApertura "," variable+=Primaria) ")";
		public ParserRule getRule() { return rule; }

		//"abrir" "(" (variable+=Primaria "," modo=ModoApertura "," variable+=Primaria) ")"
		public Group getGroup() { return cGroup; }

		//"abrir"
		public Keyword getAbrirKeyword_0() { return cAbrirKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable+=Primaria "," modo=ModoApertura "," variable+=Primaria
		public Group getGroup_2() { return cGroup_2; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_0_0() { return cVariablePrimariaParserRuleCall_2_0_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//modo=ModoApertura
		public Assignment getModoAssignment_2_2() { return cModoAssignment_2_2; }

		//ModoApertura
		public RuleCall getModoModoAperturaParserRuleCall_2_2_0() { return cModoModoAperturaParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_4() { return cVariableAssignment_2_4; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_4_0() { return cVariablePrimariaParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FuncionFicheroCerrarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncionFicheroCerrar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCerrarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablePrimariaParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroCerrar:
		//	"cerrar" "(" variable=Primaria ")";
		public ParserRule getRule() { return rule; }

		//"cerrar" "(" variable=Primaria ")"
		public Group getGroup() { return cGroup; }

		//"cerrar"
		public Keyword getCerrarKeyword_0() { return cCerrarKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=Primaria
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_0() { return cVariablePrimariaParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModoAperturaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModoApertura");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEscrituraKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLecturaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ModoApertura:
		//	"escritura" | "lectura";
		public ParserRule getRule() { return rule; }

		//"escritura" | "lectura"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"escritura"
		public Keyword getEscrituraKeyword_0() { return cEscrituraKeyword_0; }

		//"lectura"
		public Keyword getLecturaKeyword_1() { return cLecturaKeyword_1; }
	}

	public class NombreInternaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NombreInterna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCuadradoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExpKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLnKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSenKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSqrtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLongitudKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConcatenaKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//NombreInterna:
		//	"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena";
		public ParserRule getRule() { return rule; }

		//"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"cos"
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }

		//"cuadrado"
		public Keyword getCuadradoKeyword_1() { return cCuadradoKeyword_1; }

		//"exp"
		public Keyword getExpKeyword_2() { return cExpKeyword_2; }

		//"ln"
		public Keyword getLnKeyword_3() { return cLnKeyword_3; }

		//"log"
		public Keyword getLogKeyword_4() { return cLogKeyword_4; }

		//"sen"
		public Keyword getSenKeyword_5() { return cSenKeyword_5; }

		//"sqrt"
		public Keyword getSqrtKeyword_6() { return cSqrtKeyword_6; }

		//"longitud"
		public Keyword getLongitudKeyword_7() { return cLongitudKeyword_7; }

		//"concatena"
		public Keyword getConcatenaKeyword_8() { return cConcatenaKeyword_8; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		////terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
		//EFloat returns ecore::EFloat:
		//	INT "." INT (("E" | "e") ("+" | "-")? INT)?;
		public ParserRule getRule() { return rule; }

		//INT "." INT (("E" | "e") ("+" | "-")? INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//(("E" | "e") ("+" | "-")? INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"E" | "e"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"E"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//"e"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class CampoRegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CampoRegistro");
		private final Assignment cNombre_campoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_0 = (RuleCall)cNombre_campoAssignment.eContents().get(0);
		
		////('0'..'9')+ '.' ('0'..'9')* EXPONENT?
		////|   '.' ('0'..'9')+ EXPONENT?
		////|   ('0'..'9')+ EXPONENT
		////;
		////ValorRegistro returns ValorRegistro:
		////	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
		////ValorVector returns ValorVector:
		////	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;
		//CampoRegistro:
		//	nombre_campo=EString;
		public ParserRule getRule() { return rule; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment() { return cNombre_campoAssignment; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_0() { return cNombre_campoEStringParserRuleCall_0; }
	}

	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoDefinidoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoExistenteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Tipo:
		//	TipoDefinido | TipoExistente;
		public ParserRule getRule() { return rule; }

		//TipoDefinido | TipoExistente
		public Alternatives getAlternatives() { return cAlternatives; }

		//TipoDefinido
		public RuleCall getTipoDefinidoParserRuleCall_0() { return cTipoDefinidoParserRuleCall_0; }

		//TipoExistente
		public RuleCall getTipoExistenteParserRuleCall_1() { return cTipoExistenteParserRuleCall_1; }
	}

	public class TipoDefinidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoDefinido");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoEStringParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoDefinido:
		//	tipo=EString;
		public ParserRule getRule() { return rule; }

		//tipo=EString
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0() { return cTipoEStringParserRuleCall_0; }
	}

	public class TipoExistenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoExistente");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoTipoVariableParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoExistente:
		//	tipo=TipoVariable;
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0() { return cTipoTipoVariableParserRuleCall_0; }
	}

	public class ConstantesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constantes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//Constantes:
		//	variable=Variable "=" valor=Primaria;
		public ParserRule getRule() { return rule; }

		//variable=Variable "=" valor=Primaria
		public Group getGroup() { return cGroup; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTipoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoTipoParserRuleCall_5_0 = (RuleCall)cTipoAssignment_5.eContents().get(0);
		private final Keyword cColonSpaceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNombreAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNombreEStringParserRuleCall_7_0 = (RuleCall)cNombreAssignment_7.eContents().get(0);
		
		//Vector:
		//	"vector" "[" valor=Primaria "]" "de" tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"vector" "[" valor=Primaria "]" "de" tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"vector"
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"de"
		public Keyword getDeKeyword_4() { return cDeKeyword_4; }

		//tipo=Tipo
		public Assignment getTipoAssignment_5() { return cTipoAssignment_5; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_5_0() { return cTipoTipoParserRuleCall_5_0; }

		//": "
		public Keyword getColonSpaceKeyword_6() { return cColonSpaceKeyword_6; }

		//nombre=EString
		public Assignment getNombreAssignment_7() { return cNombreAssignment_7; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_7_0() { return cNombreEStringParserRuleCall_7_0; }
	}

	public class MatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrizKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorPrimariaParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTipoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTipoTipoParserRuleCall_7_0 = (RuleCall)cTipoAssignment_7.eContents().get(0);
		private final Keyword cColonSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNombreAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNombreEStringParserRuleCall_9_0 = (RuleCall)cNombreAssignment_9.eContents().get(0);
		
		//Matriz:
		//	"matriz" "[" valor+=Primaria "][" valor+=Primaria "]" "de" tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"matriz" "[" valor+=Primaria "][" valor+=Primaria "]" "de" tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"matriz"
		public Keyword getMatrizKeyword_0() { return cMatrizKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor+=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//"]["
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_3() { return cRightSquareBracketLeftSquareBracketKeyword_3; }

		//valor+=Primaria
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_4_0() { return cValorPrimariaParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"de"
		public Keyword getDeKeyword_6() { return cDeKeyword_6; }

		//tipo=Tipo
		public Assignment getTipoAssignment_7() { return cTipoAssignment_7; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_7_0() { return cTipoTipoParserRuleCall_7_0; }

		//": "
		public Keyword getColonSpaceKeyword_8() { return cColonSpaceKeyword_8; }

		//nombre=EString
		public Assignment getNombreAssignment_9() { return cNombreAssignment_9; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_9_0() { return cNombreEStringParserRuleCall_9_0; }
	}

	public class RegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Registro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableDeclaracionParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclaracionParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cFin_registroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Registro:
		//	"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro";
		public ParserRule getRule() { return rule; }

		//"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro"
		public Group getGroup() { return cGroup; }

		//"registro:"
		public Keyword getRegistroKeyword_0() { return cRegistroKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//variable+=Declaracion variable+=Declaracion*
		public Group getGroup_2() { return cGroup_2; }

		//variable+=Declaracion
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Declaracion
		public RuleCall getVariableDeclaracionParserRuleCall_2_0_0() { return cVariableDeclaracionParserRuleCall_2_0_0; }

		//variable+=Declaracion*
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//Declaracion
		public RuleCall getVariableDeclaracionParserRuleCall_2_1_0() { return cVariableDeclaracionParserRuleCall_2_1_0; }

		//"fin_registro"
		public Keyword getFin_registroKeyword_3() { return cFin_registroKeyword_3; }
	}

	public class ArchivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Archivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchivoDeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNombreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNombreEStringParserRuleCall_3_0 = (RuleCall)cNombreAssignment_3.eContents().get(0);
		
		//Archivo:
		//	"archivo de " tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"archivo de " tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"archivo de "
		public Keyword getArchivoDeKeyword_0() { return cArchivoDeKeyword_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//nombre=EString
		public Assignment getNombreAssignment_3() { return cNombreAssignment_3; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_3_0() { return cNombreEStringParserRuleCall_3_0; }
	}

	public class EnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValorPrimariaParserRuleCall_3_0_0 = (RuleCall)cValorAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValorAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValorPrimariaParserRuleCall_3_1_1_0 = (RuleCall)cValorAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumerado:
		//	nombre=EString "=" "{" (valor+=Primaria ("," valor+=Primaria)*) "}";
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" "{" (valor+=Primaria ("," valor+=Primaria)*) "}"
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//valor+=Primaria ("," valor+=Primaria)*
		public Group getGroup_3() { return cGroup_3; }

		//valor+=Primaria
		public Assignment getValorAssignment_3_0() { return cValorAssignment_3_0; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_3_0_0() { return cValorPrimariaParserRuleCall_3_0_0; }

		//("," valor+=Primaria)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//valor+=Primaria
		public Assignment getValorAssignment_3_1_1() { return cValorAssignment_3_1_1; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_3_1_1_0() { return cValorPrimariaParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubrangoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrango");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrangoNumericoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubrangoEnumeradoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subrango:
		//	SubrangoNumerico | SubrangoEnumerado;
		public ParserRule getRule() { return rule; }

		//SubrangoNumerico | SubrangoEnumerado
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubrangoNumerico
		public RuleCall getSubrangoNumericoParserRuleCall_0() { return cSubrangoNumericoParserRuleCall_0; }

		//SubrangoEnumerado
		public RuleCall getSubrangoEnumeradoParserRuleCall_1() { return cSubrangoEnumeradoParserRuleCall_1; }
	}

	public class SubrangoNumericoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubrangoNumerico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEIntParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEIntParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoNumerico:
		//	nombre=EString "=" (limite_inf=EInt ".." limite_sup=EInt);
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" (limite_inf=EInt ".." limite_sup=EInt)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//limite_inf=EInt ".." limite_sup=EInt
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EInt
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EInt
		public RuleCall getLimite_infEIntParserRuleCall_2_0_0() { return cLimite_infEIntParserRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EInt
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EInt
		public RuleCall getLimite_supEIntParserRuleCall_2_2_0() { return cLimite_supEIntParserRuleCall_2_2_0; }
	}

	public class SubrangoEnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubrangoEnumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEStringParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEStringParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoEnumerado:
		//	nombre=EString "=" (limite_inf=EString ".." limite_sup=EString);
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" (limite_inf=EString ".." limite_sup=EString)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//limite_inf=EString ".." limite_sup=EString
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EString
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EString
		public RuleCall getLimite_infEStringParserRuleCall_2_0_0() { return cLimite_infEStringParserRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EString
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EString
		public RuleCall getLimite_supEStringParserRuleCall_2_2_0() { return cLimite_supEStringParserRuleCall_2_2_0; }
	}

	public class InicioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inicio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrincipalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInicioAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclaracionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_3_0_0 = (RuleCall)cDeclaracionAssignment_3_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_3_1_0 = (RuleCall)cDeclaracionAssignment_3_1.eContents().get(0);
		private final Keyword cInicioKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTieneAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTieneSentenciasParserRuleCall_5_0_0 = (RuleCall)cTieneAssignment_5_0.eContents().get(0);
		private final Assignment cTieneAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTieneSentenciasParserRuleCall_5_1_0 = (RuleCall)cTieneAssignment_5_1.eContents().get(0);
		private final Keyword cFin_inicioKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inicio:
		//	"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
		//	tiene+=Sentencias*)? "fin_inicio";
		public ParserRule getRule() { return rule; }

		//"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
		//tiene+=Sentencias*)? "fin_inicio"
		public Group getGroup() { return cGroup; }

		//"principal"
		public Keyword getPrincipalKeyword_0() { return cPrincipalKeyword_0; }

		//{Inicio}
		public Action getInicioAction_1() { return cInicioAction_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_3() { return cGroup_3; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_3_0() { return cDeclaracionAssignment_3_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_3_0_0() { return cDeclaracionDeclaracionParserRuleCall_3_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_3_1() { return cDeclaracionAssignment_3_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_3_1_0() { return cDeclaracionDeclaracionParserRuleCall_3_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_4() { return cInicioKeyword_4; }

		//(tiene+=Sentencias tiene+=Sentencias*)?
		public Group getGroup_5() { return cGroup_5; }

		//tiene+=Sentencias
		public Assignment getTieneAssignment_5_0() { return cTieneAssignment_5_0; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_5_0_0() { return cTieneSentenciasParserRuleCall_5_0_0; }

		//tiene+=Sentencias*
		public Assignment getTieneAssignment_5_1() { return cTieneAssignment_5_1; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_5_1_0() { return cTieneSentenciasParserRuleCall_5_1_0; }

		//"fin_inicio"
		public Keyword getFin_inicioKeyword_6() { return cFin_inicioKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DeclaracionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaracionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionVariable:
		//	tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*;
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class DeclaracionPropiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaracionPropia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoEStringParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionPropia:
		//	tipo=EString ": " variable+=Variable ("," variable+=Variable)*;
		public ParserRule getRule() { return rule; }

		//tipo=EString ": " variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=EString
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0_0() { return cTipoEStringParserRuleCall_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsignacionNormalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionComplejaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Asignacion:
		//	AsignacionNormal | AsignacionCompleja;
		public ParserRule getRule() { return rule; }

		//AsignacionNormal | AsignacionCompleja
		public Alternatives getAlternatives() { return cAlternatives; }

		//AsignacionNormal
		public RuleCall getAsignacionNormalParserRuleCall_0() { return cAsignacionNormalParserRuleCall_0; }

		//AsignacionCompleja
		public RuleCall getAsignacionComplejaParserRuleCall_1() { return cAsignacionComplejaParserRuleCall_1; }
	}

	public class AsignacionNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsignacionNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionEStringParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionNormal:
		//	valor_asignacion=EString //	 Mat+=MAT*
		//	"<-" operador=operacion;
		public ParserRule getRule() { return rule; }

		//valor_asignacion=EString //	 Mat+=MAT*
		//"<-" operador=operacion
		public Group getGroup() { return cGroup; }

		//valor_asignacion=EString
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//EString
		public RuleCall getValor_asignacionEStringParserRuleCall_0_0() { return cValor_asignacionEStringParserRuleCall_0_0; }

		////	 Mat+=MAT*
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=operacion
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//operacion
		public RuleCall getOperadorOperacionParserRuleCall_2_0() { return cOperadorOperacionParserRuleCall_2_0; }
	}

	public class AsignacionComplejaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsignacionCompleja");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionVariablesComplejasParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionCompleja:
		//	valor_asignacion=VariablesComplejas "<-" operador=operacion;
		public ParserRule getRule() { return rule; }

		//valor_asignacion=VariablesComplejas "<-" operador=operacion
		public Group getGroup() { return cGroup; }

		//valor_asignacion=VariablesComplejas
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//VariablesComplejas
		public RuleCall getValor_asignacionVariablesComplejasParserRuleCall_0_0() { return cValor_asignacionVariablesComplejasParserRuleCall_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=operacion
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//operacion
		public RuleCall getOperadorOperacionParserRuleCall_2_0() { return cOperadorOperacionParserRuleCall_2_0; }
	}

	public class EscribirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Escribir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEscribirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorPrimariaParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOperadorAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_3_0_1_0 = (RuleCall)cOperadorAssignment_3_0_1.eContents().get(0);
		private final Assignment cOperadorAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOperadorOperacionParserRuleCall_3_1_0 = (RuleCall)cOperadorAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////AsignacionCompleja returns AsignacionCompleja:
		////	operadores+=Primaria
		////	Mat+=MAT*
		////	 '='
		////	operadores+=Primaria;
		//Escribir:
		//	"escribir" "(" operador+=Primaria ("," operador+=Primaria | operador+=operacion)* ")";
		public ParserRule getRule() { return rule; }

		//"escribir" "(" operador+=Primaria ("," operador+=Primaria | operador+=operacion)* ")"
		public Group getGroup() { return cGroup; }

		//"escribir"
		public Keyword getEscribirKeyword_0() { return cEscribirKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operador+=Primaria
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_2_0() { return cOperadorPrimariaParserRuleCall_2_0; }

		//("," operador+=Primaria | operador+=operacion)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"," operador+=Primaria
		public Group getGroup_3_0() { return cGroup_3_0; }

		//","
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//operador+=Primaria
		public Assignment getOperadorAssignment_3_0_1() { return cOperadorAssignment_3_0_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_3_0_1_0() { return cOperadorPrimariaParserRuleCall_3_0_1_0; }

		//operador+=operacion
		public Assignment getOperadorAssignment_3_1() { return cOperadorAssignment_3_1; }

		//operacion
		public RuleCall getOperadorOperacionParserRuleCall_3_1_0() { return cOperadorOperacionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablePrimariaParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Leer:
		//	"leer" "(" variable=Primaria ")";
		public ParserRule getRule() { return rule; }

		//"leer" "(" variable=Primaria ")"
		public Group getGroup() { return cGroup; }

		//"leer"
		public Keyword getLeerKeyword_0() { return cLeerKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=Primaria
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_0() { return cVariablePrimariaParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Si");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorOperacionParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cEntoncesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevuelveDevolverParserRuleCall_4_0 = (RuleCall)cDevuelveAssignment_4.eContents().get(0);
		private final Assignment cSinoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSinoSinoParserRuleCall_5_0 = (RuleCall)cSinoAssignment_5.eContents().get(0);
		private final Keyword cFin_siKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Si:
		//	"si" valor=operacion "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino?
		//	"fin_si";
		public ParserRule getRule() { return rule; }

		//"si" valor=operacion "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino? "fin_si"
		public Group getGroup() { return cGroup; }

		//"si"
		public Keyword getSiKeyword_0() { return cSiKeyword_0; }

		//valor=operacion
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//operacion
		public RuleCall getValorOperacionParserRuleCall_1_0() { return cValorOperacionParserRuleCall_1_0; }

		//"entonces"
		public Keyword getEntoncesKeyword_2() { return cEntoncesKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_4() { return cDevuelveAssignment_4; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_4_0() { return cDevuelveDevolverParserRuleCall_4_0; }

		//sino=Sino?
		public Assignment getSinoAssignment_5() { return cSinoAssignment_5; }

		//Sino
		public RuleCall getSinoSinoParserRuleCall_5_0() { return cSinoSinoParserRuleCall_5_0; }

		//"fin_si"
		public Keyword getFin_siKeyword_6() { return cFin_siKeyword_6; }
	}

	public class MientrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mientras");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMientrasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorOperacionParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cHacerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Keyword cFin_mientrasKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mientras:
		//	"mientras" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
		public ParserRule getRule() { return rule; }

		//"mientras" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras"
		public Group getGroup() { return cGroup; }

		//"mientras"
		public Keyword getMientrasKeyword_0() { return cMientrasKeyword_0; }

		//valor=operacion
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//operacion
		public RuleCall getValorOperacionParserRuleCall_1_0() { return cValorOperacionParserRuleCall_1_0; }

		//"hacer"
		public Keyword getHacerKeyword_2() { return cHacerKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//"fin_mientras"
		public Keyword getFin_mientrasKeyword_4() { return cFin_mientrasKeyword_4; }
	}

	public class RepetirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "repetir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSentenciasAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_0_0 = (RuleCall)cSentenciasAssignment_1_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_1_0 = (RuleCall)cSentenciasAssignment_1_1.eContents().get(0);
		private final Keyword cHasta_queKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorOperacionParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		
		//repetir:
		//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=operacion;
		public ParserRule getRule() { return rule; }

		//"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=operacion
		public Group getGroup() { return cGroup; }

		//"repetir"
		public Keyword getRepetirKeyword_0() { return cRepetirKeyword_0; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_1() { return cGroup_1; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_1_0() { return cSentenciasAssignment_1_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_0_0() { return cSentenciasSentenciasParserRuleCall_1_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_1_1() { return cSentenciasAssignment_1_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_1_0() { return cSentenciasSentenciasParserRuleCall_1_1_0; }

		//"hasta_que"
		public Keyword getHasta_queKeyword_2() { return cHasta_queKeyword_2; }

		//valor=operacion
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//operacion
		public RuleCall getValorOperacionParserRuleCall_3_0() { return cValorOperacionParserRuleCall_3_0; }
	}

	public class DesdeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "desde");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAsignacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsignacionAsignacionNormalParserRuleCall_1_0 = (RuleCall)cAsignacionAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorOperacionParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_0_0 = (RuleCall)cSentenciasAssignment_5_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_1_0 = (RuleCall)cSentenciasAssignment_5_1.eContents().get(0);
		private final Keyword cFin_desdeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//desde:
		//	"desde" asignacion=AsignacionNormal "hasta" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
		//	"fin_desde";
		public ParserRule getRule() { return rule; }

		//"desde" asignacion=AsignacionNormal "hasta" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
		//"fin_desde"
		public Group getGroup() { return cGroup; }

		//"desde"
		public Keyword getDesdeKeyword_0() { return cDesdeKeyword_0; }

		//asignacion=AsignacionNormal
		public Assignment getAsignacionAssignment_1() { return cAsignacionAssignment_1; }

		//AsignacionNormal
		public RuleCall getAsignacionAsignacionNormalParserRuleCall_1_0() { return cAsignacionAsignacionNormalParserRuleCall_1_0; }

		//"hasta"
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }

		//valor=operacion
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//operacion
		public RuleCall getValorOperacionParserRuleCall_3_0() { return cValorOperacionParserRuleCall_3_0; }

		//"hacer"
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_5() { return cGroup_5; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_5_0() { return cSentenciasAssignment_5_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_0_0() { return cSentenciasSentenciasParserRuleCall_5_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_5_1() { return cSentenciasAssignment_5_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_1_0() { return cSentenciasSentenciasParserRuleCall_5_1_0; }

		//"fin_desde"
		public Keyword getFin_desdeKeyword_6() { return cFin_desdeKeyword_6; }
	}

	public class CasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCasoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_1_0 = (RuleCall)cOperadorAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevuelveDevolverParserRuleCall_4_0 = (RuleCall)cDevuelveAssignment_4.eContents().get(0);
		
		//Caso:
		//	"caso" operador=Primaria ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
		public ParserRule getRule() { return rule; }

		//"caso" operador=Primaria ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//"caso"
		public Keyword getCasoKeyword_0() { return cCasoKeyword_0; }

		//operador=Primaria
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_1_0() { return cOperadorPrimariaParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_4() { return cDevuelveAssignment_4; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_4_0() { return cDevuelveDevolverParserRuleCall_4_0; }
	}

	public class SegunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "segun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegun_seaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCasoAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cCasoCasoParserRuleCall_5_0_0 = (RuleCall)cCasoAssignment_5_0.eContents().get(0);
		private final Assignment cCasoAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCasoCasoParserRuleCall_5_1_0 = (RuleCall)cCasoAssignment_5_1.eContents().get(0);
		private final Keyword cEn_otro_casoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cSentenciasAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_7_0_0 = (RuleCall)cSentenciasAssignment_7_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_7_1_0 = (RuleCall)cSentenciasAssignment_7_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDevuelveDevolverParserRuleCall_8_0 = (RuleCall)cDevuelveAssignment_8.eContents().get(0);
		private final Keyword cFin_segunKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//segun:
		//	"segun_sea" "(" valor=Primaria ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
		//	sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun";
		public ParserRule getRule() { return rule; }

		//"segun_sea" "(" valor=Primaria ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
		//sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun"
		public Group getGroup() { return cGroup; }

		//"segun_sea"
		public Keyword getSegun_seaKeyword_0() { return cSegun_seaKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"hacer"
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//(caso+=Caso caso+=Caso*)?
		public Group getGroup_5() { return cGroup_5; }

		//caso+=Caso
		public Assignment getCasoAssignment_5_0() { return cCasoAssignment_5_0; }

		//Caso
		public RuleCall getCasoCasoParserRuleCall_5_0_0() { return cCasoCasoParserRuleCall_5_0_0; }

		//caso+=Caso*
		public Assignment getCasoAssignment_5_1() { return cCasoAssignment_5_1; }

		//Caso
		public RuleCall getCasoCasoParserRuleCall_5_1_0() { return cCasoCasoParserRuleCall_5_1_0; }

		//"en_otro_caso:"
		public Keyword getEn_otro_casoKeyword_6() { return cEn_otro_casoKeyword_6; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_7() { return cGroup_7; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_7_0() { return cSentenciasAssignment_7_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_7_0_0() { return cSentenciasSentenciasParserRuleCall_7_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_7_1() { return cSentenciasAssignment_7_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_7_1_0() { return cSentenciasSentenciasParserRuleCall_7_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_8() { return cDevuelveAssignment_8; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_8_0() { return cDevuelveDevolverParserRuleCall_8_0; }

		//"fin_segun"
		public Keyword getFin_segunKeyword_9() { return cFin_segunKeyword_9; }
	}

	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnteroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCaracterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCadenaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		////negacion returns negacion:
		////	nombre=EString
		////	ssigno=neg;
		////unaria returns unaria:
		////	ssigno=neg
		////	variable=Primaria;
		//TipoVariable returns ecore::EString:
		//	"entero" | "caracter" | "real" | "logico" | "cadena";
		public ParserRule getRule() { return rule; }

		//"entero" | "caracter" | "real" | "logico" | "cadena"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"entero"
		public Keyword getEnteroKeyword_0() { return cEnteroKeyword_0; }

		//"caracter"
		public Keyword getCaracterKeyword_1() { return cCaracterKeyword_1; }

		//"real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"logico"
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }

		//"cadena"
		public Keyword getCadenaKeyword_4() { return cCadenaKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Variable:
		//	{Variable} nombre=EString;
		public ParserRule getRule() { return rule; }

		//{Variable} nombre=EString
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }
	}

	public class BooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleano");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerdaderoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalsoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////terminal MAT: 
		////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
		////ConstCadena returns ConstCadena:
		////	{ConstCadena} contenido=CAD;
		////NumeroEntero returns NumeroEntero:
		////	 {NumeroEntero} valor=INTEGER;
		////NumeroDecimal returns NumeroDecimal:
		////	 {NumeroDecimal} valor=FLOAT;
		////ValorBooleano returns ValorBooleano:
		////	 {ValorBooleano} valor=booleano;
		//booleano:
		//	"verdadero" | "falso";
		public ParserRule getRule() { return rule; }

		//"verdadero" | "falso"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"verdadero"
		public Keyword getVerdaderoKeyword_0() { return cVerdaderoKeyword_0; }

		//"falso"
		public Keyword getFalsoKeyword_1() { return cFalsoKeyword_1; }
	}

	public class SignoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cYKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
		//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "=" | "!=";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "=" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//"y"
		public Keyword getYKeyword_8() { return cYKeyword_8; }

		//"o"
		public Keyword getOKeyword_9() { return cOKeyword_9; }

		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_11() { return cExclamationMarkEqualsSignKeyword_11; }
	}

	public class SignoOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoOr");
		private final Keyword cOKeyword = (Keyword)rule.eContents().get(1);
		
		//signoOr returns signo:
		//	"o";
		public ParserRule getRule() { return rule; }

		//"o"
		public Keyword getOKeyword() { return cOKeyword; }
	}

	public class SignoAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoAnd");
		private final Keyword cYKeyword = (Keyword)rule.eContents().get(1);
		
		//signoAnd returns signo:
		//	"y";
		public ParserRule getRule() { return rule; }

		//"y"
		public Keyword getYKeyword() { return cYKeyword; }
	}

	public class SignoIgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoIgualdad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//signoIgualdad returns signo:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class SignoComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoComparacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//signoComparacion returns signo:
		//	"<" | ">" | ">=" | "<=";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | ">=" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}

	public class SignoSumaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoSuma");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//signoSuma returns signo:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SignoRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoResta");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoResta returns signo:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignoMultiplicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoMultiplicacion");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//signoMultiplicacion returns signo:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class SignoDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signoDivision");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoDivision returns signo:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operacion");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//operacion:
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns operacion:
		//	And ({Or.left=current} signo_op=signoOr right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} signo_op=signoOr right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIgualdadParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns operacion:
		//	Igualdad ({And.left=current} signo_op=signoAnd right=Igualdad)*;
		public ParserRule getRule() { return rule; }

		//Igualdad ({And.left=current} signo_op=signoAnd right=Igualdad)*
		public Group getGroup() { return cGroup; }

		//Igualdad
		public RuleCall getIgualdadParserRuleCall_0() { return cIgualdadParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd right=Igualdad)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//right=Igualdad
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Igualdad
		public RuleCall getRightIgualdadParserRuleCall_1_2_0() { return cRightIgualdadParserRuleCall_1_2_0; }
	}

	public class IgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Igualdad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparacionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Igualdad returns operacion:
		//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad right=Comparacion)*;
		public ParserRule getRule() { return rule; }

		//Comparacion ({Igualdad.left=current} signo_op=signoIgualdad right=Comparacion)*
		public Group getGroup() { return cGroup; }

		//Comparacion
		public RuleCall getComparacionParserRuleCall_0() { return cComparacionParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad right=Comparacion)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//right=Comparacion
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparacion
		public RuleCall getRightComparacionParserRuleCall_1_2_0() { return cRightComparacionParserRuleCall_1_2_0; }
	}

	public class ComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSumaRestaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparacion returns operacion:
		//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion right=SumaResta)*;
		public ParserRule getRule() { return rule; }

		//SumaResta ({Comparacion.left=current} signo_op=signoComparacion right=SumaResta)*
		public Group getGroup() { return cGroup; }

		//SumaResta
		public RuleCall getSumaRestaParserRuleCall_0() { return cSumaRestaParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion right=SumaResta)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//right=SumaResta
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SumaResta
		public RuleCall getRightSumaRestaParserRuleCall_1_2_0() { return cRightSumaRestaParserRuleCall_1_2_0; }
	}

	public class SumaRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumaResta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicacionDivisionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SumaResta returns operacion:
		//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	right=MultiplicacionDivision)*;
		public ParserRule getRule() { return rule; }

		//MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivision)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivision
		public RuleCall getMultiplicacionDivisionParserRuleCall_0() { return cMultiplicacionDivisionParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) right=MultiplicacionDivision)*
		public Group getGroup_1() { return cGroup_1; }

		//{Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//right=MultiplicacionDivision
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicacionDivision
		public RuleCall getRightMultiplicacionDivisionParserRuleCall_1_1_0() { return cRightMultiplicacionDivisionParserRuleCall_1_1_0; }
	}

	public class MultiplicacionDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicacionDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimariaParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicacionDivision returns operacion:
		//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
		//	signo_op=signoDivision) right=Primaria)*;
		public ParserRule getRule() { return rule; }

		//Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision)
		//right=Primaria)*
		public Group getGroup() { return cGroup; }

		//Primaria
		public RuleCall getPrimariaParserRuleCall_0() { return cPrimariaParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision)
		//right=Primaria)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{Division.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//right=Primaria
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Primaria
		public RuleCall getRightPrimariaParserRuleCall_1_1_0() { return cRightPrimariaParserRuleCall_1_1_0; }
	}

	public class OperacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operacionIndice");
		private final RuleCall cOrIndiceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//operacionIndice returns operacion:
		//	OrIndice;
		public ParserRule getRule() { return rule; }

		//OrIndice
		public RuleCall getOrIndiceParserRuleCall() { return cOrIndiceParserRuleCall; }
	}

	public class OrIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrIndice returns operacion:
		//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*;
		public ParserRule getRule() { return rule; }

		//AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup() { return cGroup; }

		//AndIndice
		public RuleCall getAndIndiceParserRuleCall_0() { return cAndIndiceParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//right=AndIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndIndice
		public RuleCall getRightAndIndiceParserRuleCall_1_2_0() { return cRightAndIndiceParserRuleCall_1_2_0; }
	}

	public class AndIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIgualdadIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndIndice returns operacion:
		//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*;
		public ParserRule getRule() { return rule; }

		//IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup() { return cGroup; }

		//IgualdadIndice
		public RuleCall getIgualdadIndiceParserRuleCall_0() { return cIgualdadIndiceParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//right=IgualdadIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//IgualdadIndice
		public RuleCall getRightIgualdadIndiceParserRuleCall_1_2_0() { return cRightIgualdadIndiceParserRuleCall_1_2_0; }
	}

	public class IgualdadIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IgualdadIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparacionIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IgualdadIndice returns operacion:
		//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*;
		public ParserRule getRule() { return rule; }

		//ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup() { return cGroup; }

		//ComparacionIndice
		public RuleCall getComparacionIndiceParserRuleCall_0() { return cComparacionIndiceParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//right=ComparacionIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparacionIndice
		public RuleCall getRightComparacionIndiceParserRuleCall_1_2_0() { return cRightComparacionIndiceParserRuleCall_1_2_0; }
	}

	public class ComparacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparacionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSumaRestaIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparacionIndice returns operacion:
		//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*;
		public ParserRule getRule() { return rule; }

		//SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup() { return cGroup; }

		//SumaRestaIndice
		public RuleCall getSumaRestaIndiceParserRuleCall_0() { return cSumaRestaIndiceParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//right=SumaRestaIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SumaRestaIndice
		public RuleCall getRightSumaRestaIndiceParserRuleCall_1_2_0() { return cRightSumaRestaIndiceParserRuleCall_1_2_0; }
	}

	public class SumaRestaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumaRestaIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SumaRestaIndice returns operacion:
		//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	right=MultiplicacionDivisionIndice)*;
		public ParserRule getRule() { return rule; }

		//MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivisionIndice
		public RuleCall getMultiplicacionDivisionIndiceParserRuleCall_0() { return cMultiplicacionDivisionIndiceParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//right=MultiplicacionDivisionIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicacionDivisionIndice
		public RuleCall getRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0() { return cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0; }
	}

	public class MultiplicacionDivisionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicacionDivisionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimariaIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicacionDivisionIndice returns operacion:
		//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
		//	signo_op=signoDivision) right=PrimariaIndice)*;
		public ParserRule getRule() { return rule; }

		//PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
		//signo_op=signoDivision) right=PrimariaIndice)*
		public Group getGroup() { return cGroup; }

		//PrimariaIndice
		public RuleCall getPrimariaIndiceParserRuleCall_0() { return cPrimariaIndiceParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision)
		//right=PrimariaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{Division.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//right=PrimariaIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimariaIndice
		public RuleCall getRightPrimariaIndiceParserRuleCall_1_1_0() { return cRightPrimariaIndiceParserRuleCall_1_1_0; }
	}

	public class PrimariaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimariaIndice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumeroEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableIDAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		
		//PrimariaIndice returns operacion:
		//	{NumeroEntero} valor=EInt | {VariableID} nombre=EString;
		public ParserRule getRule() { return rule; }

		//{NumeroEntero} valor=EInt | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumeroEntero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{NumeroEntero}
		public Action getNumeroEnteroAction_0_0() { return cNumeroEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_1() { return cGroup_1; }

		//{VariableID}
		public Action getVariableIDAction_1_0() { return cVariableIDAction_1_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_1_0() { return cNombreEStringParserRuleCall_1_1_0; }
	}

	public class PrimariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariablesBasicasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOperacionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cVariablesComplejasParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNegativaAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cHyphenMinusLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValor_operacionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValor_operacionOperacionParserRuleCall_3_2_0 = (RuleCall)cValor_operacionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNegacionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNoKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValor_operacionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValor_operacionOperacionParserRuleCall_4_3_0 = (RuleCall)cValor_operacionAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cFuncionesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Primaria returns operacion:
		//	VariablesBasicas | "|" operacion "|" | VariablesComplejas | {Negativa} "-(" valor_operacion=operacion ")" | {Negacion}
		//	"no" "(" valor_operacion=operacion ")" | Funciones;
		public ParserRule getRule() { return rule; }

		//VariablesBasicas | "|" operacion "|" | VariablesComplejas | {Negativa} "-(" valor_operacion=operacion ")" | {Negacion}
		//"no" "(" valor_operacion=operacion ")" | Funciones
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariablesBasicas
		public RuleCall getVariablesBasicasParserRuleCall_0() { return cVariablesBasicasParserRuleCall_0; }

		//"|" operacion "|"
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//operacion
		public RuleCall getOperacionParserRuleCall_1_1() { return cOperacionParserRuleCall_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_2() { return cVerticalLineKeyword_1_2; }

		//VariablesComplejas
		public RuleCall getVariablesComplejasParserRuleCall_2() { return cVariablesComplejasParserRuleCall_2; }

		//{Negativa} "-(" valor_operacion=operacion ")"
		public Group getGroup_3() { return cGroup_3; }

		//{Negativa}
		public Action getNegativaAction_3_0() { return cNegativaAction_3_0; }

		//"-("
		public Keyword getHyphenMinusLeftParenthesisKeyword_3_1() { return cHyphenMinusLeftParenthesisKeyword_3_1; }

		//valor_operacion=operacion
		public Assignment getValor_operacionAssignment_3_2() { return cValor_operacionAssignment_3_2; }

		//operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_3_2_0() { return cValor_operacionOperacionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//{Negacion} "no" "(" valor_operacion=operacion ")"
		public Group getGroup_4() { return cGroup_4; }

		//{Negacion}
		public Action getNegacionAction_4_0() { return cNegacionAction_4_0; }

		//"no"
		public Keyword getNoKeyword_4_1() { return cNoKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//valor_operacion=operacion
		public Assignment getValor_operacionAssignment_4_3() { return cValor_operacionAssignment_4_3; }

		//operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_4_3_0() { return cValor_operacionOperacionParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_5() { return cFuncionesParserRuleCall_5; }
	}

	public class FuncionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Funciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLlamadaFuncionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNombreAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_0_1_0 = (RuleCall)cNombreAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cOperadoresAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cOperadoresOperacionParserRuleCall_0_3_0_0 = (RuleCall)cOperadoresAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cOperadoresAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cOperadoresOperacionParserRuleCall_0_3_1_1_0 = (RuleCall)cOperadoresAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInternasAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreNombreInternaParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cOperadoresAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cOperadoresOperacionParserRuleCall_1_3_0_0 = (RuleCall)cOperadoresAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cOperadoresAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cOperadoresOperacionParserRuleCall_1_3_1_1_0 = (RuleCall)cOperadoresAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Funciones returns operacion:
		//	{LlamadaFuncion} nombre=EString "(" (operadores+=operacion ("," operadores+=operacion)*)? ")" | {Internas}
		//	nombre=NombreInterna "(" (operadores+=operacion ("," operadores+=operacion)*)? ")";
		public ParserRule getRule() { return rule; }

		//{LlamadaFuncion} nombre=EString "(" (operadores+=operacion ("," operadores+=operacion)*)? ")" | {Internas}
		//nombre=NombreInterna "(" (operadores+=operacion ("," operadores+=operacion)*)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LlamadaFuncion} nombre=EString "(" (operadores+=operacion ("," operadores+=operacion)*)? ")"
		public Group getGroup_0() { return cGroup_0; }

		//{LlamadaFuncion}
		public Action getLlamadaFuncionAction_0_0() { return cLlamadaFuncionAction_0_0; }

		//nombre=EString
		public Assignment getNombreAssignment_0_1() { return cNombreAssignment_0_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_1_0() { return cNombreEStringParserRuleCall_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//(operadores+=operacion ("," operadores+=operacion)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//operadores+=operacion
		public Assignment getOperadoresAssignment_0_3_0() { return cOperadoresAssignment_0_3_0; }

		//operacion
		public RuleCall getOperadoresOperacionParserRuleCall_0_3_0_0() { return cOperadoresOperacionParserRuleCall_0_3_0_0; }

		//("," operadores+=operacion)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }

		//operadores+=operacion
		public Assignment getOperadoresAssignment_0_3_1_1() { return cOperadoresAssignment_0_3_1_1; }

		//operacion
		public RuleCall getOperadoresOperacionParserRuleCall_0_3_1_1_0() { return cOperadoresOperacionParserRuleCall_0_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{Internas} nombre=NombreInterna "(" (operadores+=operacion ("," operadores+=operacion)*)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//{Internas}
		public Action getInternasAction_1_0() { return cInternasAction_1_0; }

		//nombre=NombreInterna
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//NombreInterna
		public RuleCall getNombreNombreInternaParserRuleCall_1_1_0() { return cNombreNombreInternaParserRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//(operadores+=operacion ("," operadores+=operacion)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//operadores+=operacion
		public Assignment getOperadoresAssignment_1_3_0() { return cOperadoresAssignment_1_3_0; }

		//operacion
		public RuleCall getOperadoresOperacionParserRuleCall_1_3_0_0() { return cOperadoresOperacionParserRuleCall_1_3_0_0; }

		//("," operadores+=operacion)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_0() { return cCommaKeyword_1_3_1_0; }

		//operadores+=operacion
		public Assignment getOperadoresAssignment_1_3_1_1() { return cOperadoresAssignment_1_3_1_1; }

		//operacion
		public RuleCall getOperadoresOperacionParserRuleCall_1_3_1_1_0() { return cOperadoresOperacionParserRuleCall_1_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class VariablesComplejasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariablesComplejas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValorVectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNombre_vectorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNombre_vectorEStringParserRuleCall_0_1_0_0 = (RuleCall)cNombre_vectorAssignment_0_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cIndiceAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cIndiceOperacionIndiceParserRuleCall_0_1_2_0 = (RuleCall)cIndiceAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cCampoAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_0_2_1_0 = (RuleCall)cCampoAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValorMatrizAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cNombre_matrizAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNombre_matrizEStringParserRuleCall_1_1_0_0 = (RuleCall)cNombre_matrizAssignment_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPrimerIndiceAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0 = (RuleCall)cPrimerIndiceAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cSegundoIndiceAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0 = (RuleCall)cSegundoIndiceAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cCampoAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_1_2_1_0 = (RuleCall)cCampoAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValorRegistroAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNombre_registroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNombre_registroEStringParserRuleCall_2_1_0 = (RuleCall)cNombre_registroAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cCampoAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_3_0_0 = (RuleCall)cCampoAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cFullStopKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cCampoAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_3_1_1_0 = (RuleCall)cCampoAssignment_2_3_1_1.eContents().get(0);
		
		//VariablesComplejas returns operacion:
		//	{ValorVector} (nombre_vector=EString "[" indice=operacionIndice "]") ("." campo+=CampoRegistro)? | {ValorMatriz}
		//	(nombre_matriz=EString "[" primerIndice=operacionIndice "][" segundoIndice=operacionIndice "]") ("."
		//	campo+=CampoRegistro)? | {ValorRegistro} nombre_registro=EString "." (campo+=CampoRegistro ("."
		//	campo+=CampoRegistro)*);
		public ParserRule getRule() { return rule; }

		//{ValorVector} (nombre_vector=EString "[" indice=operacionIndice "]") ("." campo+=CampoRegistro)? | {ValorMatriz}
		//(nombre_matriz=EString "[" primerIndice=operacionIndice "][" segundoIndice=operacionIndice "]") ("."
		//campo+=CampoRegistro)? | {ValorRegistro} nombre_registro=EString "." (campo+=CampoRegistro ("." campo+=CampoRegistro)*)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ValorVector} (nombre_vector=EString "[" indice=operacionIndice "]") ("." campo+=CampoRegistro)?
		public Group getGroup_0() { return cGroup_0; }

		//{ValorVector}
		public Action getValorVectorAction_0_0() { return cValorVectorAction_0_0; }

		//nombre_vector=EString "[" indice=operacionIndice "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//nombre_vector=EString
		public Assignment getNombre_vectorAssignment_0_1_0() { return cNombre_vectorAssignment_0_1_0; }

		//EString
		public RuleCall getNombre_vectorEStringParserRuleCall_0_1_0_0() { return cNombre_vectorEStringParserRuleCall_0_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }

		//indice=operacionIndice
		public Assignment getIndiceAssignment_0_1_2() { return cIndiceAssignment_0_1_2; }

		//operacionIndice
		public RuleCall getIndiceOperacionIndiceParserRuleCall_0_1_2_0() { return cIndiceOperacionIndiceParserRuleCall_0_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }

		//("." campo+=CampoRegistro)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"."
		public Keyword getFullStopKeyword_0_2_0() { return cFullStopKeyword_0_2_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_0_2_1() { return cCampoAssignment_0_2_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_0_2_1_0() { return cCampoCampoRegistroParserRuleCall_0_2_1_0; }

		//{ValorMatriz} (nombre_matriz=EString "[" primerIndice=operacionIndice "][" segundoIndice=operacionIndice "]") ("."
		//campo+=CampoRegistro)?
		public Group getGroup_1() { return cGroup_1; }

		//{ValorMatriz}
		public Action getValorMatrizAction_1_0() { return cValorMatrizAction_1_0; }

		//nombre_matriz=EString "[" primerIndice=operacionIndice "][" segundoIndice=operacionIndice "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//nombre_matriz=EString
		public Assignment getNombre_matrizAssignment_1_1_0() { return cNombre_matrizAssignment_1_1_0; }

		//EString
		public RuleCall getNombre_matrizEStringParserRuleCall_1_1_0_0() { return cNombre_matrizEStringParserRuleCall_1_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//primerIndice=operacionIndice
		public Assignment getPrimerIndiceAssignment_1_1_2() { return cPrimerIndiceAssignment_1_1_2; }

		//operacionIndice
		public RuleCall getPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0() { return cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0; }

		//"]["
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_1_1_3() { return cRightSquareBracketLeftSquareBracketKeyword_1_1_3; }

		//segundoIndice=operacionIndice
		public Assignment getSegundoIndiceAssignment_1_1_4() { return cSegundoIndiceAssignment_1_1_4; }

		//operacionIndice
		public RuleCall getSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0() { return cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_5() { return cRightSquareBracketKeyword_1_1_5; }

		//("." campo+=CampoRegistro)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_1_2_1() { return cCampoAssignment_1_2_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_1_2_1_0() { return cCampoCampoRegistroParserRuleCall_1_2_1_0; }

		//{ValorRegistro} nombre_registro=EString "." (campo+=CampoRegistro ("." campo+=CampoRegistro)*)
		public Group getGroup_2() { return cGroup_2; }

		//{ValorRegistro}
		public Action getValorRegistroAction_2_0() { return cValorRegistroAction_2_0; }

		//nombre_registro=EString
		public Assignment getNombre_registroAssignment_2_1() { return cNombre_registroAssignment_2_1; }

		//EString
		public RuleCall getNombre_registroEStringParserRuleCall_2_1_0() { return cNombre_registroEStringParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }

		//campo+=CampoRegistro ("." campo+=CampoRegistro)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_3_0() { return cCampoAssignment_2_3_0; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_3_0_0() { return cCampoCampoRegistroParserRuleCall_2_3_0_0; }

		//("." campo+=CampoRegistro)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"."
		public Keyword getFullStopKeyword_2_3_1_0() { return cFullStopKeyword_2_3_1_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_3_1_1() { return cCampoAssignment_2_3_1_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_3_1_1_0() { return cCampoCampoRegistroParserRuleCall_2_3_1_1_0; }
	}

	public class VariablesBasicasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariablesBasicas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumeroEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumeroDecimalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValorEFloatParserRuleCall_1_1_0 = (RuleCall)cValorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstCadenaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cContenidoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContenidoCADTerminalRuleCall_2_1_0 = (RuleCall)cContenidoAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCaracterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cContenidoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContenidoCARTerminalRuleCall_3_1_0 = (RuleCall)cContenidoAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cValorBooleanoAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValorBooleanoParserRuleCall_4_1_0 = (RuleCall)cValorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableIDAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNombreAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_5_1_0 = (RuleCall)cNombreAssignment_5_1.eContents().get(0);
		
		//VariablesBasicas returns operacion:
		//	{NumeroEntero} valor=EInt | {NumeroDecimal} valor=EFloat | {ConstCadena} contenido=CAD | {Caracter} contenido=CAR |
		//	{ValorBooleano} valor=booleano | {VariableID} nombre=EString;
		public ParserRule getRule() { return rule; }

		//{NumeroEntero} valor=EInt | {NumeroDecimal} valor=EFloat | {ConstCadena} contenido=CAD | {Caracter} contenido=CAR |
		//{ValorBooleano} valor=booleano | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumeroEntero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{NumeroEntero}
		public Action getNumeroEnteroAction_0_0() { return cNumeroEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{NumeroDecimal} valor=EFloat
		public Group getGroup_1() { return cGroup_1; }

		//{NumeroDecimal}
		public Action getNumeroDecimalAction_1_0() { return cNumeroDecimalAction_1_0; }

		//valor=EFloat
		public Assignment getValorAssignment_1_1() { return cValorAssignment_1_1; }

		//EFloat
		public RuleCall getValorEFloatParserRuleCall_1_1_0() { return cValorEFloatParserRuleCall_1_1_0; }

		//{ConstCadena} contenido=CAD
		public Group getGroup_2() { return cGroup_2; }

		//{ConstCadena}
		public Action getConstCadenaAction_2_0() { return cConstCadenaAction_2_0; }

		//contenido=CAD
		public Assignment getContenidoAssignment_2_1() { return cContenidoAssignment_2_1; }

		//CAD
		public RuleCall getContenidoCADTerminalRuleCall_2_1_0() { return cContenidoCADTerminalRuleCall_2_1_0; }

		//{Caracter} contenido=CAR
		public Group getGroup_3() { return cGroup_3; }

		//{Caracter}
		public Action getCaracterAction_3_0() { return cCaracterAction_3_0; }

		//contenido=CAR
		public Assignment getContenidoAssignment_3_1() { return cContenidoAssignment_3_1; }

		//CAR
		public RuleCall getContenidoCARTerminalRuleCall_3_1_0() { return cContenidoCARTerminalRuleCall_3_1_0; }

		//{ValorBooleano} valor=booleano
		public Group getGroup_4() { return cGroup_4; }

		//{ValorBooleano}
		public Action getValorBooleanoAction_4_0() { return cValorBooleanoAction_4_0; }

		//valor=booleano
		public Assignment getValorAssignment_4_1() { return cValorAssignment_4_1; }

		//booleano
		public RuleCall getValorBooleanoParserRuleCall_4_1_0() { return cValorBooleanoParserRuleCall_4_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_5() { return cGroup_5; }

		//{VariableID}
		public Action getVariableIDAction_5_0() { return cVariableIDAction_5_0; }

		//nombre=EString
		public Assignment getNombreAssignment_5_1() { return cNombreAssignment_5_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_5_1_0() { return cNombreEStringParserRuleCall_5_1_0; }
	}

	public class SinoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sino");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSinoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSi_noKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_0_0 = (RuleCall)cSentenciasAssignment_2_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_1_0 = (RuleCall)cSentenciasAssignment_2_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveDevolverParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		
		//Sino:
		//	{Sino} "si_no" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
		public ParserRule getRule() { return rule; }

		//{Sino} "si_no" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//{Sino}
		public Action getSinoAction_0() { return cSinoAction_0; }

		//"si_no"
		public Keyword getSi_noKeyword_1() { return cSi_noKeyword_1; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_2() { return cGroup_2; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_2_0() { return cSentenciasAssignment_2_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_0_0() { return cSentenciasSentenciasParserRuleCall_2_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_2_1() { return cSentenciasAssignment_2_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_1_0() { return cSentenciasSentenciasParserRuleCall_2_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_3_0() { return cDevuelveDevolverParserRuleCall_3_0; }
	}

	public class DevolverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Devolver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDevolverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevolverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDevuelveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDevuelveOperacionParserRuleCall_2_0 = (RuleCall)cDevuelveAssignment_2.eContents().get(0);
		
		//Devolver:
		//	{Devolver} "devolver" devuelve=operacion;
		public ParserRule getRule() { return rule; }

		//{Devolver} "devolver" devuelve=operacion
		public Group getGroup() { return cGroup; }

		//{Devolver}
		public Action getDevolverAction_0() { return cDevolverAction_0; }

		//"devolver"
		public Keyword getDevolverKeyword_1() { return cDevolverKeyword_1; }

		//devuelve=operacion
		public Assignment getDevuelveAssignment_2() { return cDevuelveAssignment_2; }

		//operacion
		public RuleCall getDevuelveOperacionParserRuleCall_2_0() { return cDevuelveOperacionParserRuleCall_2_0; }
	}

	public class ParametroFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametroFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPasoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPasoTipoPasoParserRuleCall_0_0 = (RuleCall)cPasoAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		////neg returns neg:
		////	"no" / * TODO: implement this rule and an appropriate IValueConverter * /;
		//ParametroFuncion:
		//	paso=TipoPaso tipo=Tipo ": " variable=Variable;
		public ParserRule getRule() { return rule; }

		//paso=TipoPaso tipo=Tipo ": " variable=Variable
		public Group getGroup() { return cGroup; }

		//paso=TipoPaso
		public Assignment getPasoAssignment_0() { return cPasoAssignment_0; }

		//TipoPaso
		public RuleCall getPasoTipoPasoParserRuleCall_0_0() { return cPasoTipoPasoParserRuleCall_0_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}

	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreEStringParserRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametrofuncionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_0_0 = (RuleCall)cParametrofuncionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0 = (RuleCall)cParametrofuncionAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cConstKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTipoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cDeclaracionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_9_0_0 = (RuleCall)cDeclaracionAssignment_9_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_9_1_0 = (RuleCall)cDeclaracionAssignment_9_1.eContents().get(0);
		private final Keyword cInicioKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cSentenciasAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_11_0_0 = (RuleCall)cSentenciasAssignment_11_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_11_1_0 = (RuleCall)cSentenciasAssignment_11_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDevuelveDevolverParserRuleCall_12_0 = (RuleCall)cDevuelveAssignment_12.eContents().get(0);
		private final Keyword cFin_funcionKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Funcion:
		//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//	parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion
		//	declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		//	"fin_funcion";
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)?
		//"inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? "fin_funcion"
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//"funcion"
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=EString
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_2_0() { return cNombreEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_0() { return cParametrofuncionAssignment_4_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_1_1() { return cParametrofuncionAssignment_4_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"const"?
		public Keyword getConstKeyword_6() { return cConstKeyword_6; }

		//"tipo"?
		public Keyword getTipoKeyword_7() { return cTipoKeyword_7; }

		//"var"
		public Keyword getVarKeyword_8() { return cVarKeyword_8; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_9() { return cGroup_9; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_9_0() { return cDeclaracionAssignment_9_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_9_0_0() { return cDeclaracionDeclaracionParserRuleCall_9_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_9_1() { return cDeclaracionAssignment_9_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_9_1_0() { return cDeclaracionDeclaracionParserRuleCall_9_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_10() { return cInicioKeyword_10; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_11() { return cGroup_11; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_11_0() { return cSentenciasAssignment_11_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_11_0_0() { return cSentenciasSentenciasParserRuleCall_11_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_11_1() { return cSentenciasAssignment_11_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_11_1_0() { return cSentenciasSentenciasParserRuleCall_11_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_12() { return cDevuelveAssignment_12; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_12_0() { return cDevuelveDevolverParserRuleCall_12_0; }

		//"fin_funcion"
		public Keyword getFin_funcionKeyword_13() { return cFin_funcionKeyword_13; }
	}

	public class ProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTipoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cDeclaracionAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_8_0_0 = (RuleCall)cDeclaracionAssignment_8_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_8_1_0 = (RuleCall)cDeclaracionAssignment_8_1.eContents().get(0);
		private final Keyword cInicioKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cSentenciasAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_10_0_0 = (RuleCall)cSentenciasAssignment_10_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_10_1_0 = (RuleCall)cSentenciasAssignment_10_1.eContents().get(0);
		private final Keyword cFin_procedimientoKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Procedimiento:
		//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		//	"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
		//	sentencias+=Sentencias*)? "fin_procedimiento";
		public ParserRule getRule() { return rule; }

		//"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		//"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
		//sentencias+=Sentencias*)? "fin_procedimiento"
		public Group getGroup() { return cGroup; }

		//"procedimiento"
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"const"?
		public Keyword getConstKeyword_5() { return cConstKeyword_5; }

		//"tipo"?
		public Keyword getTipoKeyword_6() { return cTipoKeyword_6; }

		//"var"
		public Keyword getVarKeyword_7() { return cVarKeyword_7; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_8() { return cGroup_8; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_8_0() { return cDeclaracionAssignment_8_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_8_0_0() { return cDeclaracionDeclaracionParserRuleCall_8_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_8_1() { return cDeclaracionAssignment_8_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_8_1_0() { return cDeclaracionDeclaracionParserRuleCall_8_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_9() { return cInicioKeyword_9; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_10() { return cGroup_10; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_10_0() { return cSentenciasAssignment_10_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_10_0_0() { return cSentenciasSentenciasParserRuleCall_10_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_10_1() { return cSentenciasAssignment_10_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_10_1_0() { return cSentenciasSentenciasParserRuleCall_10_1_0; }

		//"fin_procedimiento"
		public Keyword getFin_procedimientoKeyword_11() { return cFin_procedimientoKeyword_11; }
	}

	public class TipoPasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoPaso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
		//	"E" | "E/S" | "S";
		public ParserRule getRule() { return rule; }

		//"E" | "E/S" | "S"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"E"
		public Keyword getEKeyword_0() { return cEKeyword_0; }

		//"E/S"
		public Keyword getESKeyword_1() { return cESKeyword_1; }

		//"S"
		public Keyword getSKeyword_2() { return cSKeyword_2; }
	}
	
	
	private CodigoElements pCodigo;
	private AlgoritmoElements pAlgoritmo;
	private ModuloElements pModulo;
	private ImplementacionElements pImplementacion;
	private CabeceraSubprocesoElements pCabeceraSubproceso;
	private CabeceraProcedimientoElements pCabeceraProcedimiento;
	private CabeceraFuncionElements pCabeceraFuncion;
	private TipoComplejoElements pTipoComplejo;
	private SubprocesoElements pSubproceso;
	private TerminalRule tSL_COMMENT;
	private ComentarioElements pComentario;
	private SentenciasElements pSentencias;
	private BloqueElements pBloque;
	private DeclaracionElements pDeclaracion;
	private FuncionFicheroAbrirElements pFuncionFicheroAbrir;
	private FuncionFicheroCerrarElements pFuncionFicheroCerrar;
	private ModoAperturaElements pModoApertura;
	private NombreInternaElements pNombreInterna;
	private EIntElements pEInt;
	private EFloatElements pEFloat;
	private CampoRegistroElements pCampoRegistro;
	private TipoElements pTipo;
	private TipoDefinidoElements pTipoDefinido;
	private TipoExistenteElements pTipoExistente;
	private ConstantesElements pConstantes;
	private VectorElements pVector;
	private MatrizElements pMatriz;
	private RegistroElements pRegistro;
	private ArchivoElements pArchivo;
	private EnumeradoElements pEnumerado;
	private SubrangoElements pSubrango;
	private SubrangoNumericoElements pSubrangoNumerico;
	private SubrangoEnumeradoElements pSubrangoEnumerado;
	private InicioElements pInicio;
	private EStringElements pEString;
	private DeclaracionVariableElements pDeclaracionVariable;
	private DeclaracionPropiaElements pDeclaracionPropia;
	private AsignacionElements pAsignacion;
	private AsignacionNormalElements pAsignacionNormal;
	private AsignacionComplejaElements pAsignacionCompleja;
	private EscribirElements pEscribir;
	private LeerElements pLeer;
	private SiElements pSi;
	private MientrasElements pMientras;
	private RepetirElements pRepetir;
	private DesdeElements pDesde;
	private CasoElements pCaso;
	private SegunElements pSegun;
	private TipoVariableElements pTipoVariable;
	private VariableElements pVariable;
	private TerminalRule tCAD;
	private TerminalRule tCAR;
	private TerminalRule tCOMENT;
	private BooleanoElements pBooleano;
	private SignoElements pSigno;
	private SignoOrElements pSignoOr;
	private SignoAndElements pSignoAnd;
	private SignoIgualdadElements pSignoIgualdad;
	private SignoComparacionElements pSignoComparacion;
	private SignoSumaElements pSignoSuma;
	private SignoRestaElements pSignoResta;
	private SignoMultiplicacionElements pSignoMultiplicacion;
	private SignoDivisionElements pSignoDivision;
	private OperacionElements pOperacion;
	private OrElements pOr;
	private AndElements pAnd;
	private IgualdadElements pIgualdad;
	private ComparacionElements pComparacion;
	private SumaRestaElements pSumaResta;
	private MultiplicacionDivisionElements pMultiplicacionDivision;
	private OperacionIndiceElements pOperacionIndice;
	private OrIndiceElements pOrIndice;
	private AndIndiceElements pAndIndice;
	private IgualdadIndiceElements pIgualdadIndice;
	private ComparacionIndiceElements pComparacionIndice;
	private SumaRestaIndiceElements pSumaRestaIndice;
	private MultiplicacionDivisionIndiceElements pMultiplicacionDivisionIndice;
	private PrimariaIndiceElements pPrimariaIndice;
	private PrimariaElements pPrimaria;
	private FuncionesElements pFunciones;
	private VariablesComplejasElements pVariablesComplejas;
	private VariablesBasicasElements pVariablesBasicas;
	private SinoElements pSino;
	private DevolverElements pDevolver;
	private ParametroFuncionElements pParametroFuncion;
	private FuncionElements pFuncion;
	private ProcedimientoElements pProcedimiento;
	private TipoPasoElements pTipoPaso;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VaryGrammarGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("vary.pseudocodigo.dsl.c.VaryGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Codigo:
	//	Algoritmo | Modulo;
	public CodigoElements getCodigoAccess() {
		return (pCodigo != null) ? pCodigo : (pCodigo = new CodigoElements());
	}
	
	public ParserRule getCodigoRule() {
		return getCodigoAccess().getRule();
	}

	//Algoritmo:
	//	"Algoritmo" nombre=EString (comentarios+=Comentario comentarios+=Comentario*)? "importa" (importaciones+=[Modulo]
	//	importaciones+=[Modulo]*)? "fin_importa" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
	//	(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
	//	(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio "fin_algoritmo";
	public AlgoritmoElements getAlgoritmoAccess() {
		return (pAlgoritmo != null) ? pAlgoritmo : (pAlgoritmo = new AlgoritmoElements());
	}
	
	public ParserRule getAlgoritmoRule() {
		return getAlgoritmoAccess().getRule();
	}

	//Modulo:
	//	"Modulo" nombre=ID "importa" (importaciones+=[Modulo] importaciones+=[Modulo]*)? "fin_importa" ("exporta" ("const"
	//	(exporta_constantes+=EString exporta_constantes+=EString*)?)? ("tipo" (exporta_tipos+=EString
	//	exporta_tipos+=EString*)?)? ("var" (exporta_global+=Declaracion exporta_global+=Declaracion*)?)?
	//	(exporta_funciones+=CabeceraSubproceso exporta_funciones+=CabeceraSubproceso*)? "fin_exporta")
	//	implementacion=Implementacion "fin_modulo";
	public ModuloElements getModuloAccess() {
		return (pModulo != null) ? pModulo : (pModulo = new ModuloElements());
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}

	//Implementacion:
	//	{Implementacion} ("implementacion" ("const" (constantes+=Constantes constantes+=Constantes*)?)? ("tipo"
	//	(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var" (global+=Declaracion global+=Declaracion*)?)?
	//	(funcion+=Subproceso funcion+=Subproceso*)? "fin_implementacion");
	public ImplementacionElements getImplementacionAccess() {
		return (pImplementacion != null) ? pImplementacion : (pImplementacion = new ImplementacionElements());
	}
	
	public ParserRule getImplementacionRule() {
		return getImplementacionAccess().getRule();
	}

	//CabeceraSubproceso:
	//	CabeceraProcedimiento | CabeceraFuncion;
	public CabeceraSubprocesoElements getCabeceraSubprocesoAccess() {
		return (pCabeceraSubproceso != null) ? pCabeceraSubproceso : (pCabeceraSubproceso = new CabeceraSubprocesoElements());
	}
	
	public ParserRule getCabeceraSubprocesoRule() {
		return getCabeceraSubprocesoAccess().getRule();
	}

	//CabeceraProcedimiento:
	//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
	//	")";
	public CabeceraProcedimientoElements getCabeceraProcedimientoAccess() {
		return (pCabeceraProcedimiento != null) ? pCabeceraProcedimiento : (pCabeceraProcedimiento = new CabeceraProcedimientoElements());
	}
	
	public ParserRule getCabeceraProcedimientoRule() {
		return getCabeceraProcedimientoAccess().getRule();
	}

	//CabeceraFuncion:
	//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
	//	parametrofuncion+=ParametroFuncion)*)? ")";
	public CabeceraFuncionElements getCabeceraFuncionAccess() {
		return (pCabeceraFuncion != null) ? pCabeceraFuncion : (pCabeceraFuncion = new CabeceraFuncionElements());
	}
	
	public ParserRule getCabeceraFuncionRule() {
		return getCabeceraFuncionAccess().getRule();
	}

	//TipoComplejo:
	//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
	public TipoComplejoElements getTipoComplejoAccess() {
		return (pTipoComplejo != null) ? pTipoComplejo : (pTipoComplejo = new TipoComplejoElements());
	}
	
	public ParserRule getTipoComplejoRule() {
		return getTipoComplejoAccess().getRule();
	}

	//Subproceso:
	//	Funcion | Procedimiento;
	public SubprocesoElements getSubprocesoAccess() {
		return (pSubproceso != null) ? pSubproceso : (pSubproceso = new SubprocesoElements());
	}
	
	public ParserRule getSubprocesoRule() {
		return getSubprocesoAccess().getRule();
	}

	////terminal ML_COMMENT : '/ *' (!'*') -> '* /' ;
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//Comentario:
	//	{Comentario} / * ML_COMMENT | * / SL_COMMENT mensaje=COMENT;
	public ComentarioElements getComentarioAccess() {
		return (pComentario != null) ? pComentario : (pComentario = new ComentarioElements());
	}
	
	public ParserRule getComentarioRule() {
		return getComentarioAccess().getRule();
	}

	//Sentencias:
	//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
	public SentenciasElements getSentenciasAccess() {
		return (pSentencias != null) ? pSentencias : (pSentencias = new SentenciasElements());
	}
	
	public ParserRule getSentenciasRule() {
		return getSentenciasAccess().getRule();
	}

	//Bloque:
	//	Si | mientras | repetir | desde | segun;
	public BloqueElements getBloqueAccess() {
		return (pBloque != null) ? pBloque : (pBloque = new BloqueElements());
	}
	
	public ParserRule getBloqueRule() {
		return getBloqueAccess().getRule();
	}

	//Declaracion:
	//	DeclaracionVariable | DeclaracionPropia;
	public DeclaracionElements getDeclaracionAccess() {
		return (pDeclaracion != null) ? pDeclaracion : (pDeclaracion = new DeclaracionElements());
	}
	
	public ParserRule getDeclaracionRule() {
		return getDeclaracionAccess().getRule();
	}

	//FuncionFicheroAbrir:
	//	"abrir" "(" (variable+=Primaria "," modo=ModoApertura "," variable+=Primaria) ")";
	public FuncionFicheroAbrirElements getFuncionFicheroAbrirAccess() {
		return (pFuncionFicheroAbrir != null) ? pFuncionFicheroAbrir : (pFuncionFicheroAbrir = new FuncionFicheroAbrirElements());
	}
	
	public ParserRule getFuncionFicheroAbrirRule() {
		return getFuncionFicheroAbrirAccess().getRule();
	}

	//FuncionFicheroCerrar:
	//	"cerrar" "(" variable=Primaria ")";
	public FuncionFicheroCerrarElements getFuncionFicheroCerrarAccess() {
		return (pFuncionFicheroCerrar != null) ? pFuncionFicheroCerrar : (pFuncionFicheroCerrar = new FuncionFicheroCerrarElements());
	}
	
	public ParserRule getFuncionFicheroCerrarRule() {
		return getFuncionFicheroCerrarAccess().getRule();
	}

	//ModoApertura:
	//	"escritura" | "lectura";
	public ModoAperturaElements getModoAperturaAccess() {
		return (pModoApertura != null) ? pModoApertura : (pModoApertura = new ModoAperturaElements());
	}
	
	public ParserRule getModoAperturaRule() {
		return getModoAperturaAccess().getRule();
	}

	//NombreInterna:
	//	"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena";
	public NombreInternaElements getNombreInternaAccess() {
		return (pNombreInterna != null) ? pNombreInterna : (pNombreInterna = new NombreInternaElements());
	}
	
	public ParserRule getNombreInternaRule() {
		return getNombreInternaAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	////terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
	//EFloat returns ecore::EFloat:
	//	INT "." INT (("E" | "e") ("+" | "-")? INT)?;
	public EFloatElements getEFloatAccess() {
		return (pEFloat != null) ? pEFloat : (pEFloat = new EFloatElements());
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	////('0'..'9')+ '.' ('0'..'9')* EXPONENT?
	////|   '.' ('0'..'9')+ EXPONENT?
	////|   ('0'..'9')+ EXPONENT
	////;
	////ValorRegistro returns ValorRegistro:
	////	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
	////ValorVector returns ValorVector:
	////	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;
	//CampoRegistro:
	//	nombre_campo=EString;
	public CampoRegistroElements getCampoRegistroAccess() {
		return (pCampoRegistro != null) ? pCampoRegistro : (pCampoRegistro = new CampoRegistroElements());
	}
	
	public ParserRule getCampoRegistroRule() {
		return getCampoRegistroAccess().getRule();
	}

	//Tipo:
	//	TipoDefinido | TipoExistente;
	public TipoElements getTipoAccess() {
		return (pTipo != null) ? pTipo : (pTipo = new TipoElements());
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}

	//TipoDefinido:
	//	tipo=EString;
	public TipoDefinidoElements getTipoDefinidoAccess() {
		return (pTipoDefinido != null) ? pTipoDefinido : (pTipoDefinido = new TipoDefinidoElements());
	}
	
	public ParserRule getTipoDefinidoRule() {
		return getTipoDefinidoAccess().getRule();
	}

	//TipoExistente:
	//	tipo=TipoVariable;
	public TipoExistenteElements getTipoExistenteAccess() {
		return (pTipoExistente != null) ? pTipoExistente : (pTipoExistente = new TipoExistenteElements());
	}
	
	public ParserRule getTipoExistenteRule() {
		return getTipoExistenteAccess().getRule();
	}

	//Constantes:
	//	variable=Variable "=" valor=Primaria;
	public ConstantesElements getConstantesAccess() {
		return (pConstantes != null) ? pConstantes : (pConstantes = new ConstantesElements());
	}
	
	public ParserRule getConstantesRule() {
		return getConstantesAccess().getRule();
	}

	//Vector:
	//	"vector" "[" valor=Primaria "]" "de" tipo=Tipo ": " nombre=EString;
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Matriz:
	//	"matriz" "[" valor+=Primaria "][" valor+=Primaria "]" "de" tipo=Tipo ": " nombre=EString;
	public MatrizElements getMatrizAccess() {
		return (pMatriz != null) ? pMatriz : (pMatriz = new MatrizElements());
	}
	
	public ParserRule getMatrizRule() {
		return getMatrizAccess().getRule();
	}

	//Registro:
	//	"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro";
	public RegistroElements getRegistroAccess() {
		return (pRegistro != null) ? pRegistro : (pRegistro = new RegistroElements());
	}
	
	public ParserRule getRegistroRule() {
		return getRegistroAccess().getRule();
	}

	//Archivo:
	//	"archivo de " tipo=Tipo ": " nombre=EString;
	public ArchivoElements getArchivoAccess() {
		return (pArchivo != null) ? pArchivo : (pArchivo = new ArchivoElements());
	}
	
	public ParserRule getArchivoRule() {
		return getArchivoAccess().getRule();
	}

	//Enumerado:
	//	nombre=EString "=" "{" (valor+=Primaria ("," valor+=Primaria)*) "}";
	public EnumeradoElements getEnumeradoAccess() {
		return (pEnumerado != null) ? pEnumerado : (pEnumerado = new EnumeradoElements());
	}
	
	public ParserRule getEnumeradoRule() {
		return getEnumeradoAccess().getRule();
	}

	//Subrango:
	//	SubrangoNumerico | SubrangoEnumerado;
	public SubrangoElements getSubrangoAccess() {
		return (pSubrango != null) ? pSubrango : (pSubrango = new SubrangoElements());
	}
	
	public ParserRule getSubrangoRule() {
		return getSubrangoAccess().getRule();
	}

	//SubrangoNumerico:
	//	nombre=EString "=" (limite_inf=EInt ".." limite_sup=EInt);
	public SubrangoNumericoElements getSubrangoNumericoAccess() {
		return (pSubrangoNumerico != null) ? pSubrangoNumerico : (pSubrangoNumerico = new SubrangoNumericoElements());
	}
	
	public ParserRule getSubrangoNumericoRule() {
		return getSubrangoNumericoAccess().getRule();
	}

	//SubrangoEnumerado:
	//	nombre=EString "=" (limite_inf=EString ".." limite_sup=EString);
	public SubrangoEnumeradoElements getSubrangoEnumeradoAccess() {
		return (pSubrangoEnumerado != null) ? pSubrangoEnumerado : (pSubrangoEnumerado = new SubrangoEnumeradoElements());
	}
	
	public ParserRule getSubrangoEnumeradoRule() {
		return getSubrangoEnumeradoAccess().getRule();
	}

	//Inicio:
	//	"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
	//	tiene+=Sentencias*)? "fin_inicio";
	public InicioElements getInicioAccess() {
		return (pInicio != null) ? pInicio : (pInicio = new InicioElements());
	}
	
	public ParserRule getInicioRule() {
		return getInicioAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DeclaracionVariable:
	//	tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*;
	public DeclaracionVariableElements getDeclaracionVariableAccess() {
		return (pDeclaracionVariable != null) ? pDeclaracionVariable : (pDeclaracionVariable = new DeclaracionVariableElements());
	}
	
	public ParserRule getDeclaracionVariableRule() {
		return getDeclaracionVariableAccess().getRule();
	}

	//DeclaracionPropia:
	//	tipo=EString ": " variable+=Variable ("," variable+=Variable)*;
	public DeclaracionPropiaElements getDeclaracionPropiaAccess() {
		return (pDeclaracionPropia != null) ? pDeclaracionPropia : (pDeclaracionPropia = new DeclaracionPropiaElements());
	}
	
	public ParserRule getDeclaracionPropiaRule() {
		return getDeclaracionPropiaAccess().getRule();
	}

	//Asignacion:
	//	AsignacionNormal | AsignacionCompleja;
	public AsignacionElements getAsignacionAccess() {
		return (pAsignacion != null) ? pAsignacion : (pAsignacion = new AsignacionElements());
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//AsignacionNormal:
	//	valor_asignacion=EString //	 Mat+=MAT*
	//	"<-" operador=operacion;
	public AsignacionNormalElements getAsignacionNormalAccess() {
		return (pAsignacionNormal != null) ? pAsignacionNormal : (pAsignacionNormal = new AsignacionNormalElements());
	}
	
	public ParserRule getAsignacionNormalRule() {
		return getAsignacionNormalAccess().getRule();
	}

	//AsignacionCompleja:
	//	valor_asignacion=VariablesComplejas "<-" operador=operacion;
	public AsignacionComplejaElements getAsignacionComplejaAccess() {
		return (pAsignacionCompleja != null) ? pAsignacionCompleja : (pAsignacionCompleja = new AsignacionComplejaElements());
	}
	
	public ParserRule getAsignacionComplejaRule() {
		return getAsignacionComplejaAccess().getRule();
	}

	////AsignacionCompleja returns AsignacionCompleja:
	////	operadores+=Primaria
	////	Mat+=MAT*
	////	 '='
	////	operadores+=Primaria;
	//Escribir:
	//	"escribir" "(" operador+=Primaria ("," operador+=Primaria | operador+=operacion)* ")";
	public EscribirElements getEscribirAccess() {
		return (pEscribir != null) ? pEscribir : (pEscribir = new EscribirElements());
	}
	
	public ParserRule getEscribirRule() {
		return getEscribirAccess().getRule();
	}

	//Leer:
	//	"leer" "(" variable=Primaria ")";
	public LeerElements getLeerAccess() {
		return (pLeer != null) ? pLeer : (pLeer = new LeerElements());
	}
	
	public ParserRule getLeerRule() {
		return getLeerAccess().getRule();
	}

	//Si:
	//	"si" valor=operacion "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino?
	//	"fin_si";
	public SiElements getSiAccess() {
		return (pSi != null) ? pSi : (pSi = new SiElements());
	}
	
	public ParserRule getSiRule() {
		return getSiAccess().getRule();
	}

	//mientras:
	//	"mientras" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
	public MientrasElements getMientrasAccess() {
		return (pMientras != null) ? pMientras : (pMientras = new MientrasElements());
	}
	
	public ParserRule getMientrasRule() {
		return getMientrasAccess().getRule();
	}

	//repetir:
	//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=operacion;
	public RepetirElements getRepetirAccess() {
		return (pRepetir != null) ? pRepetir : (pRepetir = new RepetirElements());
	}
	
	public ParserRule getRepetirRule() {
		return getRepetirAccess().getRule();
	}

	//desde:
	//	"desde" asignacion=AsignacionNormal "hasta" valor=operacion "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
	//	"fin_desde";
	public DesdeElements getDesdeAccess() {
		return (pDesde != null) ? pDesde : (pDesde = new DesdeElements());
	}
	
	public ParserRule getDesdeRule() {
		return getDesdeAccess().getRule();
	}

	//Caso:
	//	"caso" operador=Primaria ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
	public CasoElements getCasoAccess() {
		return (pCaso != null) ? pCaso : (pCaso = new CasoElements());
	}
	
	public ParserRule getCasoRule() {
		return getCasoAccess().getRule();
	}

	//segun:
	//	"segun_sea" "(" valor=Primaria ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
	//	sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun";
	public SegunElements getSegunAccess() {
		return (pSegun != null) ? pSegun : (pSegun = new SegunElements());
	}
	
	public ParserRule getSegunRule() {
		return getSegunAccess().getRule();
	}

	////negacion returns negacion:
	////	nombre=EString
	////	ssigno=neg;
	////unaria returns unaria:
	////	ssigno=neg
	////	variable=Primaria;
	//TipoVariable returns ecore::EString:
	//	"entero" | "caracter" | "real" | "logico" | "cadena";
	public TipoVariableElements getTipoVariableAccess() {
		return (pTipoVariable != null) ? pTipoVariable : (pTipoVariable = new TipoVariableElements());
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}

	//Variable:
	//	{Variable} nombre=EString;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	////	 Mat+=MAT*;
	////VariableID returns VariableID:
	////	{VariableID} nombre=EString;
	////Mat+=MAT*;
	//terminal CAD:
	//	"\"" ("a".."z" | "A".."Z" | "_" | "-" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9" |
	//	":" | "," | ".")* "\"";
	public TerminalRule getCADRule() {
		return (tCAD != null) ? tCAD : (tCAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAD"));
	} 

	//terminal CAR:
	//	"\'" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9") "\'";
	public TerminalRule getCARRule() {
		return (tCAR != null) ? tCAR : (tCAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAR"));
	} 

	//terminal COMENT:
	//	"/ *" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9")* "* /";
	public TerminalRule getCOMENTRule() {
		return (tCOMENT != null) ? tCOMENT : (tCOMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMENT"));
	} 

	////terminal MAT: 
	////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
	////ConstCadena returns ConstCadena:
	////	{ConstCadena} contenido=CAD;
	////NumeroEntero returns NumeroEntero:
	////	 {NumeroEntero} valor=INTEGER;
	////NumeroDecimal returns NumeroDecimal:
	////	 {NumeroDecimal} valor=FLOAT;
	////ValorBooleano returns ValorBooleano:
	////	 {ValorBooleano} valor=booleano;
	//booleano:
	//	"verdadero" | "falso";
	public BooleanoElements getBooleanoAccess() {
		return (pBooleano != null) ? pBooleano : (pBooleano = new BooleanoElements());
	}
	
	public ParserRule getBooleanoRule() {
		return getBooleanoAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
	//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "=" | "!=";
	public SignoElements getSignoAccess() {
		return (pSigno != null) ? pSigno : (pSigno = new SignoElements());
	}
	
	public ParserRule getSignoRule() {
		return getSignoAccess().getRule();
	}

	//signoOr returns signo:
	//	"o";
	public SignoOrElements getSignoOrAccess() {
		return (pSignoOr != null) ? pSignoOr : (pSignoOr = new SignoOrElements());
	}
	
	public ParserRule getSignoOrRule() {
		return getSignoOrAccess().getRule();
	}

	//signoAnd returns signo:
	//	"y";
	public SignoAndElements getSignoAndAccess() {
		return (pSignoAnd != null) ? pSignoAnd : (pSignoAnd = new SignoAndElements());
	}
	
	public ParserRule getSignoAndRule() {
		return getSignoAndAccess().getRule();
	}

	//signoIgualdad returns signo:
	//	"==" | "!=";
	public SignoIgualdadElements getSignoIgualdadAccess() {
		return (pSignoIgualdad != null) ? pSignoIgualdad : (pSignoIgualdad = new SignoIgualdadElements());
	}
	
	public ParserRule getSignoIgualdadRule() {
		return getSignoIgualdadAccess().getRule();
	}

	//signoComparacion returns signo:
	//	"<" | ">" | ">=" | "<=";
	public SignoComparacionElements getSignoComparacionAccess() {
		return (pSignoComparacion != null) ? pSignoComparacion : (pSignoComparacion = new SignoComparacionElements());
	}
	
	public ParserRule getSignoComparacionRule() {
		return getSignoComparacionAccess().getRule();
	}

	//signoSuma returns signo:
	//	"+";
	public SignoSumaElements getSignoSumaAccess() {
		return (pSignoSuma != null) ? pSignoSuma : (pSignoSuma = new SignoSumaElements());
	}
	
	public ParserRule getSignoSumaRule() {
		return getSignoSumaAccess().getRule();
	}

	//signoResta returns signo:
	//	"-";
	public SignoRestaElements getSignoRestaAccess() {
		return (pSignoResta != null) ? pSignoResta : (pSignoResta = new SignoRestaElements());
	}
	
	public ParserRule getSignoRestaRule() {
		return getSignoRestaAccess().getRule();
	}

	//signoMultiplicacion returns signo:
	//	"*";
	public SignoMultiplicacionElements getSignoMultiplicacionAccess() {
		return (pSignoMultiplicacion != null) ? pSignoMultiplicacion : (pSignoMultiplicacion = new SignoMultiplicacionElements());
	}
	
	public ParserRule getSignoMultiplicacionRule() {
		return getSignoMultiplicacionAccess().getRule();
	}

	//signoDivision returns signo:
	//	"/";
	public SignoDivisionElements getSignoDivisionAccess() {
		return (pSignoDivision != null) ? pSignoDivision : (pSignoDivision = new SignoDivisionElements());
	}
	
	public ParserRule getSignoDivisionRule() {
		return getSignoDivisionAccess().getRule();
	}

	//operacion:
	//	Or;
	public OperacionElements getOperacionAccess() {
		return (pOperacion != null) ? pOperacion : (pOperacion = new OperacionElements());
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}

	//Or returns operacion:
	//	And ({Or.left=current} signo_op=signoOr right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns operacion:
	//	Igualdad ({And.left=current} signo_op=signoAnd right=Igualdad)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Igualdad returns operacion:
	//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad right=Comparacion)*;
	public IgualdadElements getIgualdadAccess() {
		return (pIgualdad != null) ? pIgualdad : (pIgualdad = new IgualdadElements());
	}
	
	public ParserRule getIgualdadRule() {
		return getIgualdadAccess().getRule();
	}

	//Comparacion returns operacion:
	//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion right=SumaResta)*;
	public ComparacionElements getComparacionAccess() {
		return (pComparacion != null) ? pComparacion : (pComparacion = new ComparacionElements());
	}
	
	public ParserRule getComparacionRule() {
		return getComparacionAccess().getRule();
	}

	//SumaResta returns operacion:
	//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	right=MultiplicacionDivision)*;
	public SumaRestaElements getSumaRestaAccess() {
		return (pSumaResta != null) ? pSumaResta : (pSumaResta = new SumaRestaElements());
	}
	
	public ParserRule getSumaRestaRule() {
		return getSumaRestaAccess().getRule();
	}

	//MultiplicacionDivision returns operacion:
	//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
	//	signo_op=signoDivision) right=Primaria)*;
	public MultiplicacionDivisionElements getMultiplicacionDivisionAccess() {
		return (pMultiplicacionDivision != null) ? pMultiplicacionDivision : (pMultiplicacionDivision = new MultiplicacionDivisionElements());
	}
	
	public ParserRule getMultiplicacionDivisionRule() {
		return getMultiplicacionDivisionAccess().getRule();
	}

	//operacionIndice returns operacion:
	//	OrIndice;
	public OperacionIndiceElements getOperacionIndiceAccess() {
		return (pOperacionIndice != null) ? pOperacionIndice : (pOperacionIndice = new OperacionIndiceElements());
	}
	
	public ParserRule getOperacionIndiceRule() {
		return getOperacionIndiceAccess().getRule();
	}

	//OrIndice returns operacion:
	//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*;
	public OrIndiceElements getOrIndiceAccess() {
		return (pOrIndice != null) ? pOrIndice : (pOrIndice = new OrIndiceElements());
	}
	
	public ParserRule getOrIndiceRule() {
		return getOrIndiceAccess().getRule();
	}

	//AndIndice returns operacion:
	//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*;
	public AndIndiceElements getAndIndiceAccess() {
		return (pAndIndice != null) ? pAndIndice : (pAndIndice = new AndIndiceElements());
	}
	
	public ParserRule getAndIndiceRule() {
		return getAndIndiceAccess().getRule();
	}

	//IgualdadIndice returns operacion:
	//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*;
	public IgualdadIndiceElements getIgualdadIndiceAccess() {
		return (pIgualdadIndice != null) ? pIgualdadIndice : (pIgualdadIndice = new IgualdadIndiceElements());
	}
	
	public ParserRule getIgualdadIndiceRule() {
		return getIgualdadIndiceAccess().getRule();
	}

	//ComparacionIndice returns operacion:
	//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*;
	public ComparacionIndiceElements getComparacionIndiceAccess() {
		return (pComparacionIndice != null) ? pComparacionIndice : (pComparacionIndice = new ComparacionIndiceElements());
	}
	
	public ParserRule getComparacionIndiceRule() {
		return getComparacionIndiceAccess().getRule();
	}

	//SumaRestaIndice returns operacion:
	//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	right=MultiplicacionDivisionIndice)*;
	public SumaRestaIndiceElements getSumaRestaIndiceAccess() {
		return (pSumaRestaIndice != null) ? pSumaRestaIndice : (pSumaRestaIndice = new SumaRestaIndiceElements());
	}
	
	public ParserRule getSumaRestaIndiceRule() {
		return getSumaRestaIndiceAccess().getRule();
	}

	//MultiplicacionDivisionIndice returns operacion:
	//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
	//	signo_op=signoDivision) right=PrimariaIndice)*;
	public MultiplicacionDivisionIndiceElements getMultiplicacionDivisionIndiceAccess() {
		return (pMultiplicacionDivisionIndice != null) ? pMultiplicacionDivisionIndice : (pMultiplicacionDivisionIndice = new MultiplicacionDivisionIndiceElements());
	}
	
	public ParserRule getMultiplicacionDivisionIndiceRule() {
		return getMultiplicacionDivisionIndiceAccess().getRule();
	}

	//PrimariaIndice returns operacion:
	//	{NumeroEntero} valor=EInt | {VariableID} nombre=EString;
	public PrimariaIndiceElements getPrimariaIndiceAccess() {
		return (pPrimariaIndice != null) ? pPrimariaIndice : (pPrimariaIndice = new PrimariaIndiceElements());
	}
	
	public ParserRule getPrimariaIndiceRule() {
		return getPrimariaIndiceAccess().getRule();
	}

	//Primaria returns operacion:
	//	VariablesBasicas | "|" operacion "|" | VariablesComplejas | {Negativa} "-(" valor_operacion=operacion ")" | {Negacion}
	//	"no" "(" valor_operacion=operacion ")" | Funciones;
	public PrimariaElements getPrimariaAccess() {
		return (pPrimaria != null) ? pPrimaria : (pPrimaria = new PrimariaElements());
	}
	
	public ParserRule getPrimariaRule() {
		return getPrimariaAccess().getRule();
	}

	//Funciones returns operacion:
	//	{LlamadaFuncion} nombre=EString "(" (operadores+=operacion ("," operadores+=operacion)*)? ")" | {Internas}
	//	nombre=NombreInterna "(" (operadores+=operacion ("," operadores+=operacion)*)? ")";
	public FuncionesElements getFuncionesAccess() {
		return (pFunciones != null) ? pFunciones : (pFunciones = new FuncionesElements());
	}
	
	public ParserRule getFuncionesRule() {
		return getFuncionesAccess().getRule();
	}

	//VariablesComplejas returns operacion:
	//	{ValorVector} (nombre_vector=EString "[" indice=operacionIndice "]") ("." campo+=CampoRegistro)? | {ValorMatriz}
	//	(nombre_matriz=EString "[" primerIndice=operacionIndice "][" segundoIndice=operacionIndice "]") ("."
	//	campo+=CampoRegistro)? | {ValorRegistro} nombre_registro=EString "." (campo+=CampoRegistro ("."
	//	campo+=CampoRegistro)*);
	public VariablesComplejasElements getVariablesComplejasAccess() {
		return (pVariablesComplejas != null) ? pVariablesComplejas : (pVariablesComplejas = new VariablesComplejasElements());
	}
	
	public ParserRule getVariablesComplejasRule() {
		return getVariablesComplejasAccess().getRule();
	}

	//VariablesBasicas returns operacion:
	//	{NumeroEntero} valor=EInt | {NumeroDecimal} valor=EFloat | {ConstCadena} contenido=CAD | {Caracter} contenido=CAR |
	//	{ValorBooleano} valor=booleano | {VariableID} nombre=EString;
	public VariablesBasicasElements getVariablesBasicasAccess() {
		return (pVariablesBasicas != null) ? pVariablesBasicas : (pVariablesBasicas = new VariablesBasicasElements());
	}
	
	public ParserRule getVariablesBasicasRule() {
		return getVariablesBasicasAccess().getRule();
	}

	//Sino:
	//	{Sino} "si_no" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
	public SinoElements getSinoAccess() {
		return (pSino != null) ? pSino : (pSino = new SinoElements());
	}
	
	public ParserRule getSinoRule() {
		return getSinoAccess().getRule();
	}

	//Devolver:
	//	{Devolver} "devolver" devuelve=operacion;
	public DevolverElements getDevolverAccess() {
		return (pDevolver != null) ? pDevolver : (pDevolver = new DevolverElements());
	}
	
	public ParserRule getDevolverRule() {
		return getDevolverAccess().getRule();
	}

	////neg returns neg:
	////	"no" / * TODO: implement this rule and an appropriate IValueConverter * /;
	//ParametroFuncion:
	//	paso=TipoPaso tipo=Tipo ": " variable=Variable;
	public ParametroFuncionElements getParametroFuncionAccess() {
		return (pParametroFuncion != null) ? pParametroFuncion : (pParametroFuncion = new ParametroFuncionElements());
	}
	
	public ParserRule getParametroFuncionRule() {
		return getParametroFuncionAccess().getRule();
	}

	//Funcion:
	//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
	//	parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion
	//	declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
	//	"fin_funcion";
	public FuncionElements getFuncionAccess() {
		return (pFuncion != null) ? pFuncion : (pFuncion = new FuncionElements());
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}

	//Procedimiento:
	//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
	//	"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
	//	sentencias+=Sentencias*)? "fin_procedimiento";
	public ProcedimientoElements getProcedimientoAccess() {
		return (pProcedimiento != null) ? pProcedimiento : (pProcedimiento = new ProcedimientoElements());
	}
	
	public ParserRule getProcedimientoRule() {
		return getProcedimientoAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
	//	"E" | "E/S" | "S";
	public TipoPasoElements getTipoPasoAccess() {
		return (pTipoPaso != null) ? pTipoPaso : (pTipoPaso = new TipoPasoElements());
	}
	
	public ParserRule getTipoPasoRule() {
		return getTipoPasoAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
