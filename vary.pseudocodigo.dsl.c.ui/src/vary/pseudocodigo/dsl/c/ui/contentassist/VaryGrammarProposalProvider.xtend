/*
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.ui.contentassist

import vary.pseudocodigo.dsl.c.ui.contentassist.AbstractVaryGrammarProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import diagramapseudocodigo.Modulo
import diagramapseudocodigo.Variable
import diagramapseudocodigo.Declaracion
import diagramapseudocodigo.DeclaracionBasica
import diagramapseudocodigo.DeclaracionDefinida
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.EcoreUtil2
import diagramapseudocodigo.Algoritmo
import diagramapseudocodigo.Vector
import diagramapseudocodigo.Matriz
import diagramapseudocodigo.Registro
import diagramapseudocodigo.Enumerado
import diagramapseudocodigo.Subrango
import diagramapseudocodigo.Archivo
import java.util.List
import diagramapseudocodigo.TipoComplejo
import diagramapseudocodigo.Subproceso
import diagramapseudocodigo.Procedimiento
import diagramapseudocodigo.Funcion
import diagramapseudocodigo.AsignacionNormal
import diagramapseudocodigo.Parametro
import diagramapseudocodigo.LlamadaFuncion
import diagramapseudocodigo.ValorRegistro
import diagramapseudocodigo.ValorVector
import diagramapseudocodigo.ValorMatriz
import diagramapseudocodigo.TipoDefinido
import diagramapseudocodigo.TipoBasico
import org.eclipse.xtext.Keyword
import com.google.common.collect.Sets
import com.google.inject.Inject
import vary.pseudocodigo.dsl.c.keywords.ReadKeywords
import vary.pseudocodigo.dsl.c.keywords.ReadKeywordsInterface
import java.util.HashSet
import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.graphics.Image
import org.eclipse.jface.resource.ImageDescriptor
import java.util.ArrayList
import diagramapseudocodigo.CabeceraSubproceso
import diagramapseudocodigo.CabeceraFuncion

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class VaryGrammarProposalProvider extends AbstractVaryGrammarProposalProvider {
	
	protected final ReadKeywordsInterface readerKeywords
	protected HashSet<String> filteringKeywods
	private static Image localIcon
	private static Image constPublic
	private static Image typePrivate
	private static Image typePublic
	private static Image typesClassics
	private static Image varPrivate
	private static Image funcionPrivada
	private static Image fieldRegistry
	private static Image varPublic
	
	@Inject
	public new() {
		readerKeywords = new ReadKeywords();
		initializeFilteringKeywords();
		initializeIcons()
	}
	
	public new(String language) {
		readerKeywords = new vary.pseudocodigo.dsl.c.english.keywords.ReadKeywords();
		initializeFilteringKeywords();
		initializeIcons()
	}
	
	def initializeIcons() {
		localIcon = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/localvariable_obj.gif").createImage();
		constPublic = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/compare_field_public.gif").createImage();
		typePrivate = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/typevariable_private.gif").createImage();
		typePublic = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/typevariable_public.gif").createImage();
		typesClassics = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/methpub_obj.gif").createImage();
		varPrivate = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/field_private_obj.gif").createImage();
		funcionPrivada = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/methpri_obj.gif").createImage();
		fieldRegistry = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/compare_field.gif").createImage();
		varPublic = ImageDescriptor.createFromFile(VaryGrammarProposalProvider, "/icons/field_public_obj.gif").createImage();
	}
	
	def initializeFilteringKeywords() {
		filteringKeywods = Sets.newHashSet(readerKeywords.getBundle.getString("KEYWORD_ALGORITMO"), 
		readerKeywords.getBundle.getString("KEYWORD_MODULO"), 
		readerKeywords.getBundle.getString("KEYWORD_ABRIR"),
		readerKeywords.getBundle.getString("KEYWORD_CERRAR"), 
		readerKeywords.getBundle.getString("KEYWORD_DESDE"), 
		readerKeywords.getBundle.getString("KEYWORD_ESCRIBIR"), 
		readerKeywords.getBundle.getString("KEYWORD_ESCRIBIR").concat("("),
		readerKeywords.getBundle.getString("KEYWORD_LEER"), 
		readerKeywords.getBundle.getString("KEYWORD_LEER").concat("("),
		readerKeywords.getBundle.getString("KEYWORD_MIENTRAS"),
		readerKeywords.getBundle.getString("KEYWORD_MIENTRAS").concat("("),
		readerKeywords.getBundle.getString("KEYWORD_REPETIR"),
		readerKeywords.getBundle.getString("KEYWORD_SEGUN_SEA"), 
		readerKeywords.getBundle.getString("KEYWORD_SEGUN_SEA").concat("("),
		readerKeywords.getBundle.getString("KEYWORD_SI"), 
		readerKeywords.getBundle.getString("KEYWORD_SI").concat("("),
		readerKeywords.getBundle.getString("KEYWORD_ARCHIVO"), 
		readerKeywords.getBundle.getString("KEYWORD_MATRIZ"), 
		readerKeywords.getBundle.getString("KEYWORD_PROCEDIMIENTO"), 
		readerKeywords.getBundle.getString("KEYWORD_FUNCION"), 
		readerKeywords.getBundle.getString("KEYWORD_REGISTRO"), 
		readerKeywords.getBundle.getString("KEYWORD_VECTOR"), 
		readerKeywords.getBundle.getString("KEYWORD_DEVOLVER"))
	}
	
	
	//Filtramos los keywords "sueltos" que ofrece -------------------------------------------------------------------------
	override void completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		if(filteringKeywods.contains(keyword.getValue)) {
			return;
		}
		super.completeKeyword(keyword, contentAssistContext, acceptor);
	}
	
	//Proposal para las variables definidas con un tipo personalizado -----------------------------------------------------
	override void completeDeclaracionDefinida_Tipo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		if(context.getRootModel instanceof Algoritmo) {
			var tiposLocales = new ArrayList<String>()
			var algoritmo = context.getRootModel() as Algoritmo;
			//Cogemos todos los tipos
			tiposLocales = completeDeclaracionDefinida_TipoAux(context, acceptor, algoritmo.complejos, tiposLocales)
			completeDeclaracionDefinida_TipoModulos(context, acceptor, algoritmo.importaciones, tiposLocales)
		}
		else if(context.getRootModel instanceof Modulo) {
			var tiposLocales = new ArrayList<String>()
			var modulo = context.getRootModel() as Modulo;
			//Cogemos todos los tipos
			tiposLocales = completeDeclaracionDefinida_TipoAux(context, acceptor, modulo.implementacion.complejos, tiposLocales)
			completeDeclaracionDefinida_TipoModulos(context, acceptor, modulo.importaciones, tiposLocales)
		}
	}
	
	def ArrayList<String> completeDeclaracionDefinida_TipoAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<TipoComplejo> complejos, ArrayList<String> tiposLocales) {
		for(tipo: complejos) {
			if(tipo instanceof Vector) {
				var vector = tipo as Vector
				tiposLocales.add(vector.nombre)
				//Creamos un nuevo proposal
				var styledString = new StyledString(vector.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_VECTOR"))
				var completionProposal = createCompletionProposal(vector.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
			else if(tipo instanceof Matriz) {
				var matriz = tipo as Matriz
				tiposLocales.add(matriz.nombre)
				var styledString = new StyledString(matriz.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_MATRIZ"))
				var completionProposal = createCompletionProposal(matriz.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
			else if(tipo instanceof Registro) {
				var registro = tipo as Registro
				tiposLocales.add(registro.nombre)
				var styledString = new StyledString(registro.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_REGISTRO").replaceAll(":", ""))
				var completionProposal = createCompletionProposal(registro.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
			else if(tipo instanceof Enumerado) {
				var enumerado = tipo as Enumerado
				tiposLocales.add(enumerado.nombre)
				var styledString = new StyledString(enumerado.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_ENUMERADO"))
				var completionProposal = createCompletionProposal(enumerado.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
			else if(tipo instanceof Subrango) {
				var subrango = tipo as Subrango
				tiposLocales.add(subrango.nombre)
				var styledString = new StyledString(subrango.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_SUBRANGO"))
				var completionProposal = createCompletionProposal(subrango.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
			else if(tipo instanceof Archivo) {
				var archivo = tipo as Archivo
				tiposLocales.add(archivo.nombre)
				var styledString = new StyledString(archivo.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_ARCHIVO"))
				var completionProposal = createCompletionProposal(archivo.nombre, styledString, typePrivate, context)
				acceptor.accept(completionProposal)
			}
		}
		return tiposLocales
	}
	
	def void completeDeclaracionDefinida_TipoModulos(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Modulo> modulos, ArrayList<String> tiposLocales) {
		for(modulo: modulos) {
			for(tipo: modulo.implementacion.complejos) {
				if(tipo instanceof Vector) {
					var vector = tipo as Vector
					if(modulo.exporta_tipos.contains(vector.nombre) && !tiposLocales.contains(vector.nombre)) {
						//Creamos un nuevo proposal
						var styledString = new StyledString(vector.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_VECTOR"))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(vector.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				}
				else if(tipo instanceof Matriz) {
					var matriz = tipo as Matriz
					if(modulo.exporta_tipos.contains(matriz.nombre) && !tiposLocales.contains(matriz.nombre)) {
						var styledString = new StyledString(matriz.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_MATRIZ"))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(matriz.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				}
				else if(tipo instanceof Registro) {
					var registro = tipo as Registro
					if(modulo.exporta_tipos.contains(registro.nombre) && !tiposLocales.contains(registro.nombre)) {
						var styledString = new StyledString(registro.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_REGISTRO").replaceAll(":", ""))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(registro.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				}
				else if(tipo instanceof Enumerado) {
					var enumerado = tipo as Enumerado
					if(modulo.exporta_tipos.contains(enumerado.nombre) && !tiposLocales.contains(enumerado.nombre)) {
						var styledString = new StyledString(enumerado.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_ENUMERADO"))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(enumerado.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				}
				else if(tipo instanceof Subrango) {
					var subrango = tipo as Subrango
					if(modulo.exporta_tipos.contains(subrango.nombre) && !tiposLocales.contains(subrango.nombre)) {
						var styledString = new StyledString(subrango.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_SUBRANGO"))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(subrango.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				}
				else if(tipo instanceof Archivo) {
					var archivo = tipo as Archivo
					if(modulo.exporta_tipos.contains(archivo.nombre) && !tiposLocales.contains(archivo.nombre)) {
						var styledString = new StyledString(archivo.nombre + " : " + readerKeywords.bundle.getString("KEYWORD_ARCHIVO"))
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(archivo.nombre, styledString, typePublic, context)
						acceptor.accept(completionProposal)
					}
				
				}
			}
		}
	}
	
	//Proposal para las variables definidas con un tipo nativo ------------------------------------------------------------
	override void completeDeclaracionBasica_Tipo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			var algoritmo = context.getRootModel() as Algoritmo;
			//Cogemos todos los tipos
			completeDeclaracionBasica_TipoAux(context, acceptor)
		}
		else if(context.getRootModel instanceof Modulo) {
			var modulo = context.getRootModel() as Modulo;
			//Cogemos todos los tipos
			completeDeclaracionBasica_TipoAux(context, acceptor)
		}
	}
	
	def void completeDeclaracionBasica_TipoAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//Añadimos todas las propuestas con los tipos nativos posibles
		var styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_ENTERO"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		var completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_ENTERO"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_REAL"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_REAL"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_LOGICO"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_LOGICO"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_CARACTER"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_CARACTER"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_CADENA"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_CADENA"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		
	}
	
	//Proposal para las variableID en las asignacionesNormal---------------------------------------------------------------
	override void completeAsignacionNormal_Operador(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeAsignacionNormalCompleja_Operador(model, assignment, context, acceptor)
	}
	
	def completeAsignacionNormal_OperadorParametrosSubproceso(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Parametro> parametros) {
		for(Parametro parametro: parametros) {
			if(parametro.tipo instanceof TipoDefinido) {
				var tipoDefinido = parametro.tipo as TipoDefinido
				var styledString = new StyledString(parametro.variable.nombre + " : " + tipoDefinido.tipo)
				var completionProposal = createCompletionProposal(parametro.variable.nombre, styledString, varPrivate, context)
				acceptor.accept(completionProposal)
			} else if(parametro.tipo instanceof TipoBasico) {
				var tipoBasico = parametro.tipo as TipoBasico
				var styledString = new StyledString(parametro.variable.nombre + " : " + tipoBasico.tipo)
				var completionProposal = createCompletionProposal(parametro.variable.nombre, styledString, varPrivate, context)
				acceptor.accept(completionProposal)
			}
		}
	}
	
	def completeAsignacionNormal_OperadorAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Declaracion> declaraciones) {
		for(Declaracion declaracion: declaraciones) {
			if(declaracion instanceof DeclaracionDefinida) {
				var dec = declaracion as DeclaracionDefinida
				for(Variable v: dec.variables) {
					var styledString = new StyledString(v.nombre + " : " + dec.tipo)
					var completionProposal = createCompletionProposal(v.nombre, styledString, varPrivate, context)
					acceptor.accept(completionProposal)
				}
			}
			else if(declaracion instanceof DeclaracionBasica) {
				var dec = declaracion as DeclaracionBasica
				for(Variable v: dec.variables) {
					var styledString = new StyledString(v.nombre + " : " + dec.tipo)
					var completionProposal = createCompletionProposal(v.nombre, styledString, varPrivate, context)
					acceptor.accept(completionProposal)
				}
			}
		}
	}
	
	def void completeAsignacionNormal_OperadorAuxModulos(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<String> variablesLocales, List<Modulo> modulos) {
		for(modulo: modulos) {
			var variablesPublicas = registrarVariables(modulo.exporta_globales)
			for(declaracion: modulo.implementacion.globales) {
				if(declaracion instanceof DeclaracionBasica) {
					var declaracionBasica = declaracion as DeclaracionBasica
					for(variable: declaracionBasica.variables) {
						if(!variablesLocales.contains(variable.nombre) && variablesPublicas.contains(variable.nombre)) {
							var styledString = new StyledString(variable.nombre + " : " + declaracionBasica.tipo)
							var styledStringAux = new StyledString(" - " + modulo.nombre)
							styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
							styledString.append(styledStringAux)
							var completionProposal = createCompletionProposal(variable.nombre, styledString, varPublic, context)
							acceptor.accept(completionProposal)
						}
					}
				} else if(declaracion instanceof DeclaracionDefinida) {
					var declaracionPropia = declaracion as DeclaracionDefinida
					for(variable: declaracionPropia.variables) {
						if(!variablesLocales.contains(variable.nombre) && variablesPublicas.contains(variable.nombre)) {
							var styledString = new StyledString(variable.nombre + " : " + declaracionPropia.tipo)
							var styledStringAux = new StyledString(" - " + modulo.nombre)
							styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
							styledString.append(styledStringAux)
							var completionProposal = createCompletionProposal(variable.nombre, styledString, varPublic, context)
							acceptor.accept(completionProposal)
						}
					}
				}
			}
		}
	}
	
	def ArrayList<String> registrarParametros(List<Parametro> parametros) {
		var variables = new ArrayList<String>()
		for(parametro: parametros) {
			variables.add(parametro.variable.nombre)
		}
		return variables
	}
	
	def ArrayList<String> registrarVariables(List<Declaracion> declaraciones) {
		var variables = new ArrayList<String>()
		for(declaracion: declaraciones) {
			if(declaracion instanceof DeclaracionBasica) {
				var declaracionBasica = declaracion as DeclaracionBasica
				for(variable: declaracionBasica.variables) {
				variables.add(variable.nombre)
				}
			}
			else if(declaracion instanceof DeclaracionDefinida) {
				var declaracionDefinida = declaracion as DeclaracionDefinida
				for(variable: declaracionDefinida.variables) {
				variables.add(variable.nombre)
			}
			}
		}
		return variables
	}
	
	//Proposal para las VariableID en las AsignacionesComplejas-------------------------------------------------
	
	override void completeAsignacionCompleja_Operador(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeAsignacionNormalCompleja_Operador(model, assignment, context, acceptor)
	}
	
	def void completeAsignacionNormalCompleja_Operador(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			//Recogemos la sentencia para buscar si pertenece a un Subproceso
			var asignacionNormal = context.currentModel as AsignacionNormal
			var procedimiento = EcoreUtil2.getContainerOfType(asignacionNormal, Procedimiento)
			var funcion = EcoreUtil2.getContainerOfType(asignacionNormal, Funcion)
			var algoritmo = context.getRootModel() as Algoritmo;
			completeFuncionesAsignacion(context, acceptor, algoritmo.subprocesos)
			completeFuncionesAsignacion_Modulos(context, acceptor, algoritmo.importaciones)
			var variablesLocales = new ArrayList<String>()
			variablesLocales = registrarVariables(algoritmo.globales)
			completeAsignacionNormal_OperadorAux(context, acceptor, algoritmo.globales)
			
			if(procedimiento == null && funcion == null) {
				//Si los dos son nulos pertenece a Inicio
				completeAsignacionNormal_OperadorAux(context, acceptor, algoritmo.inicio.declaraciones)
				variablesLocales.addAll(registrarVariables(algoritmo.inicio.declaraciones))
				variablesLocales.addAll(registrarVariables(algoritmo.inicio.declaraciones))
				completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, algoritmo.importaciones)
			}
			else {
				if(procedimiento != null) {
					completeAsignacionNormal_OperadorAux(context, acceptor, procedimiento.declaraciones)
					completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, procedimiento.parametros)
					variablesLocales.addAll(registrarVariables(procedimiento.declaraciones))
					variablesLocales.addAll(registrarParametros(procedimiento.parametros))
					completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, algoritmo.importaciones)
					
				}
				else if(funcion != null) {
					completeAsignacionNormal_OperadorAux(context, acceptor, funcion.declaraciones)
					completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, funcion.parametros)
					variablesLocales.addAll(registrarVariables(funcion.declaraciones))
					variablesLocales.addAll(registrarParametros(funcion.parametros))
					completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, algoritmo.importaciones)
				}
			}
			
		}
		else if(context.getRootModel instanceof Modulo) {
			//Recogemos la sentencia para buscar si pertenece a un Subproceso
			var asignacionNormal = context.currentModel as AsignacionNormal
			var procedimiento = EcoreUtil2.getContainerOfType(asignacionNormal, Procedimiento)
			var funcion = EcoreUtil2.getContainerOfType(asignacionNormal, Funcion)
			var modulo = context.getRootModel() as Modulo
			completeFuncionesAsignacion(context, acceptor, modulo.implementacion.subprocesos)
			completeFuncionesAsignacion_Modulos(context, acceptor, modulo.importaciones)
			var variablesLocales = new ArrayList<String>()
			variablesLocales = registrarVariables(modulo.implementacion.globales)
			completeAsignacionNormal_OperadorAux(context, acceptor, modulo.implementacion.globales)
			
			if(procedimiento != null) {
				completeAsignacionNormal_OperadorAux(context, acceptor, procedimiento.declaraciones)
				completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, procedimiento.parametros)
				variablesLocales.addAll(registrarVariables(procedimiento.declaraciones))
				variablesLocales.addAll(registrarParametros(procedimiento.parametros))
				completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, modulo.importaciones)
			}
			else if(funcion != null) {
				completeAsignacionNormal_OperadorAux(context, acceptor, funcion.declaraciones)
				completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, funcion.parametros)
				variablesLocales.addAll(registrarVariables(funcion.declaraciones))
				variablesLocales.addAll(registrarParametros(funcion.parametros))
				completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, modulo.importaciones)
			}
		}
	}
	
	
	def void completeFuncionesAsignacion(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Subproceso> subprocesos) {
		for(subproceso: subprocesos) {
			if(subproceso instanceof Funcion) {
				var funcion = subproceso as Funcion
				var styledString = new StyledString(funcion.nombre + "(")
				if(funcion.parametros.size == 0) {
					styledString.append(")")
				}
				else {
					for(Parametro p: funcion.parametros) {
						if(funcion.parametros.indexOf(p) != funcion.parametros.size - 1) {
							styledString.append(p.variable.nombre + ",")
						}
						else {
							styledString.append(p.variable.nombre + ")")
						}
					}
				}
				var content = styledString.toString
				styledString.append(" : " + funcion.tipo)
				var completionProposal = createCompletionProposal(content, styledString, funcionPrivada, context)
				acceptor.accept(completionProposal)
			}
		}
	}
	
	def void completeFuncionesAsignacion_Modulos(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Modulo> modulos) {
		for(modulo: modulos) {
			for(subproceso: modulo.implementacion.subprocesos) {
				if(subproceso instanceof Funcion) {
					var funcion = subproceso as Funcion
					var funciones_publicas = registrarFuncionesPublicas(modulo.exporta_subprocesos)
					if(funciones_publicas.contains(funcion.nombre)) {
						var styledString = new StyledString(funcion.nombre + "(")
						if(funcion.parametros.size == 0) {
							styledString.append(")")
						}
						else {
							for(Parametro p: funcion.parametros) {
								if(funcion.parametros.indexOf(p) != funcion.parametros.size - 1) {
									styledString.append(p.variable.nombre + ",")
								}
								else {
									styledString.append(p.variable.nombre + ")")
								}
							}
						}
						var contenido = styledString.toString
						styledString.append(" : " + funcion.tipo)
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(contenido, styledString, typesClassics, context)
						acceptor.accept(completionProposal)
					}
				}
			}
		}
	}
	
	def ArrayList<String> registrarFuncionesPublicas(List<CabeceraSubproceso> cabeceras) {
		var funcionesPublicas = new ArrayList<String>
		for(cabeceraSubproceso: cabeceras) {
			if(cabeceraSubproceso instanceof CabeceraFuncion) {
				funcionesPublicas.add(cabeceraSubproceso.nombre)
			}
		}
		return funcionesPublicas
	}
	
	//Proposal para las llamadas a funciones ------------------------------------------------------------------------------
	
	override void completeInicio_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var algoritmo = context.getRootModel() as Algoritmo
		for(Subproceso s: algoritmo.subprocesos) {
			if(s instanceof Procedimiento) {
				//Sólo los procedimientos porque son los que no devuelven nada
				var procedimiento = s as Procedimiento
				complete_SentenciasAux(context, acceptor, procedimiento)
			}
		}
		complete_SentenciasAux_Modulos(context, acceptor, algoritmo.importaciones)
	}
	
	override void completeProcedimiento_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeFuncion_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeSi_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeMientras_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeRepetir_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeDesde_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeCaso_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeSegun_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	override void completeSino_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_Sentencias(model, assignment, context, acceptor)	
	}
	
	def void complete_Sentencias(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			var algoritmo = context.getRootModel as Algoritmo
			for(Subproceso s: algoritmo.subprocesos) {
				if(s instanceof Procedimiento) {
					//Sólo los procedimientos porque son los que no devuelven nada
					var procedimiento = s as Procedimiento
					complete_SentenciasAux(context, acceptor, procedimiento)
				}
			}
			complete_SentenciasAux_Modulos(context, acceptor, algoritmo.importaciones)
		}
		else if(context.getRootModel instanceof Modulo) {
			var modulo = context.getRootModel as Modulo
			for(Subproceso s: modulo.implementacion.subprocesos) {
				//Sólo los procedimientos porque son los que no devuelven nada
				var procedimiento = s as Procedimiento
				complete_SentenciasAux(context, acceptor, procedimiento)
			}
			complete_SentenciasAux_Modulos(context, acceptor, modulo.importaciones)
		}
	}
	
	def void complete_SentenciasAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor, Procedimiento procedimiento) {
		var styledString = new StyledString(procedimiento.nombre + "(")
		if(procedimiento.parametros.size == 0) {
			styledString.append(")")
		}
		else {
			for(Parametro p: procedimiento.parametros) {
				if(procedimiento.parametros.indexOf(p) != procedimiento.parametros.size - 1) {
					styledString.append(p.variable.nombre + ",")
				}
				else {
					styledString.append(p.variable.nombre + ")")
				}
			}
		}
		var completionProposal = createCompletionProposal(styledString.toString, styledString, funcionPrivada, context)
		acceptor.accept(completionProposal)
	}
	
	def void complete_SentenciasAux_Modulos(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Modulo> modulos) {
		var procedimiento_literal = new String();
		for(modulo: modulos) {
			for(subproceso: modulo.implementacion.subprocesos) {
				if(subproceso instanceof Procedimiento) {
					var procedimiento = subproceso as Procedimiento
					for(cabeceraFuncion: modulo.exporta_subprocesos) {
						if(cabeceraFuncion.nombre.equals(procedimiento.nombre) && cabeceraFuncion.parametros.size == procedimiento.parametros.size) {
						var styledString = new StyledString(procedimiento.nombre + "(")
						procedimiento_literal = procedimiento.nombre + "("
						if(procedimiento.parametros.size == 0) {
							styledString.append(")")
							procedimiento_literal = procedimiento_literal + ")"
						}
						else {
							for(Parametro p: procedimiento.parametros) {
								if(procedimiento.parametros.indexOf(p) != procedimiento.parametros.size - 1) {
									styledString.append(p.variable.nombre + ",")
									procedimiento_literal = procedimiento_literal + p.variable.nombre + ","
								}
								else {
									styledString.append(p.variable.nombre + ")")
									procedimiento_literal = procedimiento_literal + p.variable.nombre + ")"
								}
							}
						}
						var styledStringAux = new StyledString(" - " + modulo.nombre)
						styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
						styledString.append(styledStringAux)
						var completionProposal = createCompletionProposal(procedimiento_literal, styledString, typesClassics, context)
						acceptor.accept(completionProposal)
					}
				}
			}
		}
	 }
  }
	
	//Proposal para los parametros de las llamadas a funciones y procedimientos -------------------------------------------
	
	override void completeFunciones_Operadores(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			var llamadaFuncion = context.currentModel as LlamadaFuncion
			var procedimiento = EcoreUtil2.getContainerOfType(llamadaFuncion, Procedimiento)
			var funcion = EcoreUtil2.getContainerOfType(llamadaFuncion, Funcion)
			var algoritmo = context.getRootModel() as Algoritmo;
			completeAsignacionNormal_OperadorAux(context, acceptor, algoritmo.globales)
			
			if(procedimiento == null && funcion == null) {
				//Si los dos son nulos pertenece a Inicio
				completeAsignacionNormal_OperadorAux(context, acceptor, algoritmo.inicio.declaraciones)
			}
			else {
				if(procedimiento != null) {
					completeAsignacionNormal_OperadorAux(context, acceptor, procedimiento.declaraciones)
					completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, procedimiento.parametros)
					
				}
				else if(funcion != null) {
					completeAsignacionNormal_OperadorAux(context, acceptor, funcion.declaraciones)
					completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, funcion.parametros)
				}
			}
			
		}
		else if(context.getRootModel instanceof Modulo) {
			//Recogemos la sentencia para buscar si pertenece a un Subproceso
			var llamadaFuncion = context.currentModel as LlamadaFuncion
			var procedimiento = EcoreUtil2.getContainerOfType(llamadaFuncion, Procedimiento)
			var funcion = EcoreUtil2.getContainerOfType(llamadaFuncion, Funcion)
			var modulo = context.getRootModel() as Modulo
			completeAsignacionNormal_OperadorAux(context, acceptor, modulo.implementacion.globales)
			
			if(procedimiento != null) {
				completeAsignacionNormal_OperadorAux(context, acceptor, procedimiento.declaraciones)
				completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, procedimiento.parametros)
			}
			else if(funcion != null) {
				completeAsignacionNormal_OperadorAux(context, acceptor, funcion.declaraciones)
				completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, funcion.parametros)
			}
			
		}
	}
	
	//Proposal para los campos de un registro -----------------------------------------------------------------------------
	
	override void completeCampoRegistro_Nombre_campo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			if(context.getCurrentModel instanceof ValorRegistro) {
				var valorRegistro = context.getCurrentModel as ValorRegistro
				var procedimiento = EcoreUtil2.getContainerOfType(valorRegistro, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorRegistro, Funcion)
				var algoritmo = context.getRootModel as Algoritmo
				
				if(procedimiento == null && funcion == null) {
					var declaraciones = algoritmo.inicio.declaraciones
					declaraciones.addAll(algoritmo.globales)
					var complejos = algoritmo.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro, algoritmo.importaciones)
				}
				else {
					if(procedimiento != null) {
						var declaraciones = procedimiento.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro, algoritmo.importaciones)
					}
					else {
						var declaraciones = funcion.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro, algoritmo.importaciones)
					}
				}
			}
			else if(context.getCurrentModel instanceof ValorVector) {
				var valorVector = context.getCurrentModel as ValorVector
				var procedimiento = EcoreUtil2.getContainerOfType(valorVector, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorVector, Funcion)
				var algoritmo = context.getRootModel as Algoritmo
				
				if(procedimiento == null && funcion == null) {
					var declaraciones = algoritmo.inicio.declaraciones
					declaraciones.addAll(algoritmo.globales)
					var complejos = algoritmo.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorVector.nombre_vector)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorVector.nombre_vector, algoritmo.importaciones)
				}
				else {
					if(procedimiento != null) {
						var declaraciones = procedimiento.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorVector.nombre_vector)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorVector.nombre_vector, algoritmo.importaciones)
					}
					else {
						var declaraciones = funcion.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorVector.nombre_vector)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorVector.nombre_vector, algoritmo.importaciones)
					}
				}
			}
			else if(context.getCurrentModel instanceof ValorMatriz) {
				var valorMatriz = context.getCurrentModel as ValorMatriz
				var procedimiento = EcoreUtil2.getContainerOfType(valorMatriz, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorMatriz, Funcion)
				var algoritmo = context.getRootModel as Algoritmo
				
				if(procedimiento == null && funcion == null) {
					var declaraciones = algoritmo.inicio.declaraciones
					declaraciones.addAll(algoritmo.globales)
					var complejos = algoritmo.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz, algoritmo.importaciones)
				}
				else {
					if(procedimiento != null) {
						var declaraciones = procedimiento.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz, algoritmo.importaciones)
					}
					else {
						var declaraciones = funcion.declaraciones
						declaraciones.addAll(algoritmo.globales)
						var complejos = algoritmo.complejos
						completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz)
						completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz, algoritmo.importaciones)
					}
				}
			}
			
		}
		else if(context.getRootModel instanceof Modulo) {
			var modulo = context.getRootModel as Modulo
			if(context.getCurrentModel instanceof ValorRegistro) {
				var valorRegistro = context.getCurrentModel as ValorRegistro
				var procedimiento = EcoreUtil2.getContainerOfType(valorRegistro, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorRegistro, Funcion)
			
				if(procedimiento != null) {
					var declaraciones = procedimiento.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro, modulo.importaciones)
				}
				else {
					var declaraciones = funcion.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorRegistro.nombre_registro, modulo.importaciones)
			
				}	
			} else if(context.getCurrentModel instanceof ValorVector) {
				var valorVector = context.getCurrentModel as ValorVector
				var procedimiento = EcoreUtil2.getContainerOfType(valorVector, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorVector, Funcion)
			
				if(procedimiento != null) {
					var declaraciones = procedimiento.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorVector.nombre_vector)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorVector.nombre_vector, modulo.importaciones)
				}
				else {
					var declaraciones = funcion.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorVector.nombre_vector)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorVector.nombre_vector, modulo.importaciones)
			
				}	
			} else if(context.getCurrentModel instanceof ValorMatriz) {
				var valorMatriz = context.getCurrentModel as ValorMatriz
				var procedimiento = EcoreUtil2.getContainerOfType(valorMatriz, Procedimiento)
				var funcion = EcoreUtil2.getContainerOfType(valorMatriz, Funcion)
			
				if(procedimiento != null) {
					var declaraciones = procedimiento.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz, modulo.importaciones)
				}
				else {
					var declaraciones = funcion.declaraciones
					declaraciones.addAll(modulo.implementacion.globales)
					var complejos = modulo.implementacion.complejos
					completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz)
					completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, valorMatriz.nombre_matriz, modulo.importaciones)
			
				}
			}
		}
	}
	
	//Revisar proposal
	def void completeCampoRegistro_Nombre_campoAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Declaracion> declaraciones, List<TipoComplejo> complejos, String nombreVariable) {
		var tipo = new String()
		if(context.getCurrentModel instanceof ValorRegistro) {
			for(Declaracion dec: declaraciones) {
				if(dec instanceof DeclaracionDefinida) {
					var declaracionDefinida = dec as DeclaracionDefinida
					for(Variable v: declaracionDefinida.variables) {
						if(v.nombre.equals(nombreVariable)) {
							tipo = declaracionDefinida.tipo
						}
					}
				}
				else {
					var declaracionBasica = dec as DeclaracionBasica
					for(Variable v: declaracionBasica.variables) {
						if(v.nombre.equals(nombreVariable)) {
							tipo = declaracionBasica.tipo
						}
					}
				}
			}
		}
		else if(context.getCurrentModel instanceof ValorVector || context.getCurrentModel instanceof ValorMatriz) {
			for(Declaracion dec: declaraciones) {
				if(dec instanceof DeclaracionDefinida) {
					var declaracionDefinida = dec as DeclaracionDefinida
					for(Variable v: declaracionDefinida.variables) {
						if(v.nombre.equals(nombreVariable)) {
							tipo = declaracionDefinida.tipo
						}
					}
				}
				else {
					var declaracionBasica = dec as DeclaracionBasica
					for(Variable v: declaracionBasica.variables) {
						if(v.nombre.equals(nombreVariable)) {
							tipo = declaracionBasica.tipo
						}
					}
				}
			}
			for(TipoComplejo complejo: complejos) {
				if(complejo instanceof Vector) {
					var vector = complejo as Vector
					if(vector.nombre.equals(tipo)) {
						if(vector.tipo instanceof TipoDefinido) {
							var tipoDefinido = vector.tipo as TipoDefinido
							tipo = tipoDefinido.tipo
						} else {
							var tipoBasico = vector.tipo as TipoBasico
							tipo = tipoBasico.tipo
						}
					}
				} else if(complejo instanceof Matriz) {
					var matriz = complejo as Matriz
					if(matriz.nombre.equals(tipo)) {
						if(matriz.tipo instanceof TipoDefinido) {
							var tipoDefinido = matriz.tipo as TipoDefinido
							tipo = tipoDefinido.tipo
						} else {
							var tipoBasico = matriz.tipo as TipoBasico
							tipo = tipoBasico.tipo
						}
					}
				}
			}
		}
		
		for(TipoComplejo complejo: complejos) {
			if(complejo instanceof Registro) {
				var registro = complejo as Registro
				if(registro.nombre.equals(tipo)) {
					for(Declaracion dec: registro.variable) {
						if(dec instanceof DeclaracionDefinida) {
							var declaracionDefinida = dec as DeclaracionDefinida
							for(Variable v: declaracionDefinida.variables) {
								var styledString = new StyledString(v.nombre + " : " + declaracionDefinida.tipo + " : " + tipo)
								var completionProposal = createCompletionProposal(v.nombre, styledString, fieldRegistry, context)
								acceptor.accept(completionProposal)
							}
						}
						else {
							var declaracionBasica = dec as DeclaracionBasica
							for(Variable v: declaracionBasica.variables) {
								var styledString = new StyledString(v.nombre + " : " + declaracionBasica.tipo + " : " + tipo)
								var completionProposal = createCompletionProposal(v.nombre, styledString, fieldRegistry, context)
								acceptor.accept(completionProposal)
							}
						}
					}
				}
			}
		}
		
	}
	
	def void completeCampoRegistro_Nombre_CampoAux_Modulos(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Declaracion> declaraciones, List<TipoComplejo> complejos, String nombreVariable, List<Modulo> modulos) {
		for(modulo: modulos) {
			var tipo = new String()
			if(context.getCurrentModel instanceof ValorRegistro) {
				for(Declaracion dec: declaraciones) {
					if(dec instanceof DeclaracionDefinida) {
						var declaracionDefinida = dec as DeclaracionDefinida
						for(Variable v: declaracionDefinida.variables) {
							if(v.nombre.equals(nombreVariable)) {
							tipo = declaracionDefinida.tipo
							}
						}
					}
					else {
						var declaracionBasica = dec as DeclaracionBasica
						for(Variable v: declaracionBasica.variables) {
							if(v.nombre.equals(nombreVariable)) {
								tipo = declaracionBasica.tipo
							}
						}
					}
				}
			}
			else if(context.getCurrentModel instanceof ValorVector || context.getCurrentModel instanceof ValorMatriz) {
				for(Declaracion dec: declaraciones) {
					if(dec instanceof DeclaracionDefinida) {
						var declaracionDefinida = dec as DeclaracionDefinida
						for(Variable v: declaracionDefinida.variables) {
							if(v.nombre.equals(nombreVariable)) {
								tipo = declaracionDefinida.tipo
							}
						}
					}
					else {
						var declaracionBasica = dec as DeclaracionBasica
						for(Variable v: declaracionBasica.variables) {
							if(v.nombre.equals(nombreVariable)) {
								tipo = declaracionBasica.tipo
							}
						}
					}
				}
				for(TipoComplejo complejo: modulo.implementacion.complejos) {
					if(!complejos.contains(complejo)) {
						if(complejo instanceof Vector) {
							var vector = complejo as Vector
							if(vector.nombre.equals(tipo)) {
								if(vector.tipo instanceof TipoDefinido) {
									var tipoDefinido = vector.tipo as TipoDefinido
									tipo = tipoDefinido.tipo
								} else {
									var tipoBasico = vector.tipo as TipoBasico
									tipo = tipoBasico.tipo
								}
							}
						} else if(complejo instanceof Matriz) {
							var matriz = complejo as Matriz
							if(matriz.nombre.equals(tipo)) {
								if(matriz.tipo instanceof TipoDefinido) {
									var tipoDefinido = matriz.tipo as TipoDefinido
									tipo = tipoDefinido.tipo
								} else {
									var tipoBasico = matriz.tipo as TipoBasico
									tipo = tipoBasico.tipo
								}
							}
						}
					}
				}
			}
		
			for(TipoComplejo complejo: complejos) {
				if(!complejos.contains(complejo)) {
					if(complejo instanceof Registro) {
						var registro = complejo as Registro
						if(registro.nombre.equals(tipo)) {
							for(Declaracion dec: registro.variable) {
								if(dec instanceof DeclaracionDefinida) {
									var declaracionDefinida = dec as DeclaracionDefinida
									for(Variable v: declaracionDefinida.variables) {
										var styledString = new StyledString(v.nombre + " : " + declaracionDefinida.tipo + " : " + tipo)
										var styledStringAux = new StyledString(" - " + modulo.nombre)
										styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
										styledString.append(styledStringAux)
										var completionProposal = createCompletionProposal(v.nombre, styledString, fieldRegistry, context)
										acceptor.accept(completionProposal)
									}	
								}
								else {
									var declaracionBasica = dec as DeclaracionBasica
									for(Variable v: declaracionBasica.variables) {
										var styledString = new StyledString(v.nombre + " : " + declaracionBasica.tipo + " : " + tipo)
										var styledStringAux = new StyledString(" - " + modulo.nombre)
										styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
										styledString.append(styledStringAux)
										var completionProposal = createCompletionProposal(v.nombre, styledString, fieldRegistry, context)
										acceptor.accept(completionProposal)
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	//Proposal para la creación de tipos----------------------------------------------------------------------------------
	
	override void completeTipoDefinido_Tipo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			var tiposLocales = new ArrayList<String>()
			var algoritmo = context.getRootModel as Algoritmo
			tiposLocales = completeDeclaracionDefinida_TipoAux(context, acceptor, algoritmo.complejos, tiposLocales)
			completeDeclaracionDefinida_TipoModulos(context, acceptor, algoritmo.importaciones, tiposLocales)
		} else if(context.getRootModel instanceof Modulo) {
			var tiposLocales = new ArrayList<String>()
			var modulo = context.getRootModel as Modulo
			tiposLocales = completeDeclaracionDefinida_TipoAux(context, acceptor, modulo.implementacion.complejos, tiposLocales)
			completeDeclaracionDefinida_TipoModulos(context, acceptor, modulo.importaciones, tiposLocales)
		}
	}
	
	override void completeTipoBasico_Tipo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeDeclaracionBasica_TipoAux(context, acceptor)
	}
	
	//Proposal para los tipo de paso de los parametros de los subprocesos-------------------------------------------------
	
	override void complete_TipoPaso(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_ENTRADA"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		var completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_ENTRADA"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_SALIDA"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_SALIDA"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
		styledString = new StyledString(readerKeywords.getBundle.getString("KEYWORD_ENTRADASALIDA"))
		styledString.setStyle(0, styledString.length, StyledString.DECORATIONS_STYLER)
		completionProposal = createCompletionProposal(readerKeywords.getBundle.getString("KEYWORD_ENTRADASALIDA"), styledString, typesClassics, context)
		acceptor.accept(completionProposal)
	}
	
	//Proposal para la variable constante que se usa al crear el tipo vector-----------------------------------------------
	
	def void completeVectorMatriz_Valor(EObject model, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(context.getRootModel instanceof Algoritmo) {
			var algoritmo = context.getRootModel as Algoritmo
			var constantesLocales = new ArrayList<String>()
			for(constante: algoritmo.constantes) {
				constantesLocales.add(constante.variable.nombre)
				var styledString = new StyledString(constante.variable.nombre)
				var completionProposal = createCompletionProposal(constante.variable.nombre, styledString, constPublic, context)
				acceptor.accept(completionProposal)
			}
			complete_ValorAux(context, acceptor, algoritmo.importaciones, constantesLocales)
			
		} else if(context.getRootModel instanceof Modulo) {
			var modulo = context.getRootModel as Modulo
			var constantesLocales = new ArrayList<String>()
			for(constante: modulo.implementacion.constantes) {
				constantesLocales.add(constante.variable.nombre)
				var styledString = new StyledString(constante.variable.nombre)
				var completionProposal = createCompletionProposal(constante.variable.nombre, styledString, constPublic, context)
				acceptor.accept(completionProposal)
			}
			complete_ValorAux(context, acceptor, modulo.importaciones, constantesLocales)
		}
	}
	
	override void completeVector_Valor(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeVectorMatriz_Valor(model, context, acceptor)
	}
	
	def void complete_ValorAux(ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<Modulo> modulos, List<String> constantesLocales) {
		for(modulo: modulos) {
			for(constante: modulo.implementacion.constantes) {
				if(modulo.exporta_constantes.contains(constante.variable.nombre) && !constantesLocales.contains(constante.variable.nombre)) {
					var styledString = new StyledString(constante.variable.nombre)
					var styledStringAux = new StyledString(" - " + modulo.nombre)
					styledStringAux.setStyle(0, styledStringAux.length, StyledString.QUALIFIER_STYLER)
					styledString.append(styledStringAux)
					var completionProposal = createCompletionProposal(constante.variable.nombre, styledString, constPublic, context)
					acceptor.accept(completionProposal)
				}
			}
		}
	}
	
	//Proposal para la variable constante que se usa al crear el tipo Matriz-----------------------------------------------
	
	override void completeMatriz_Valor(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeVectorMatriz_Valor(model, context, acceptor)
	}
}