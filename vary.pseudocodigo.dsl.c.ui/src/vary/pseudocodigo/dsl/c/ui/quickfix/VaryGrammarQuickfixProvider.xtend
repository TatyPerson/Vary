/*
* generated by Xtext
*/
package vary.pseudocodigo.dsl.c.ui.quickfix

import diagramapseudocodigo.Constantes
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import vary.pseudocodigo.dsl.c.VaryGrammarModelUtil
import vary.pseudocodigo.dsl.c.validation.VaryGrammarValidator
import static extension org.eclipse.xtext.EcoreUtil2.*
import diagramapseudocodigo.Algoritmo
import vary.pseudocodigo.dsl.c.ui.quickfix.util.VaryGrammarQuickfixProviderUtil
import diagramapseudocodigo.Modulo
import diagramapseudocodigo.Implementacion

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class VaryGrammarQuickfixProvider extends DefaultQuickfixProvider {
	
	@Fix(VaryGrammarValidator::CONSTANTE_NO_DEFINIDA)
	def ofrecerConstante(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Crear la constante no definida", "Crear la constante no definida", "Entity.gif",
		[ EObject element, IModificationContext context |
				var indice = VaryGrammarQuickfixProviderUtil.buscarIndiceVector(context.xtextDocument.get(issue.offset, issue.length))
				if(element instanceof Algoritmo) {
					VaryGrammarModelUtil::addConstante(
					element as Algoritmo,
					element.getContainerOfType(typeof(Constantes)),
					indice
					)
				}
				else if(element instanceof Implementacion) {
					VaryGrammarModelUtil::addConstante(
					element as Implementacion,
					element.getContainerOfType(typeof(Constantes)),
					indice
					)
				}
			]
 		 );
	}

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
