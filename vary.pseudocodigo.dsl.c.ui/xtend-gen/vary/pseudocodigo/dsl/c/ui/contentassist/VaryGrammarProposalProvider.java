/**
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.ui.contentassist;

import com.google.common.base.Objects;
import com.google.common.collect.Sets;
import com.google.inject.Inject;
import diagramapseudocodigo.Algoritmo;
import diagramapseudocodigo.Archivo;
import diagramapseudocodigo.AsignacionNormal;
import diagramapseudocodigo.CabeceraFuncion;
import diagramapseudocodigo.CabeceraSubproceso;
import diagramapseudocodigo.Constantes;
import diagramapseudocodigo.Declaracion;
import diagramapseudocodigo.DeclaracionPropia;
import diagramapseudocodigo.DeclaracionVariable;
import diagramapseudocodigo.Enumerado;
import diagramapseudocodigo.Funcion;
import diagramapseudocodigo.Implementacion;
import diagramapseudocodigo.Inicio;
import diagramapseudocodigo.LlamadaFuncion;
import diagramapseudocodigo.Matriz;
import diagramapseudocodigo.Modulo;
import diagramapseudocodigo.ParametroFuncion;
import diagramapseudocodigo.Procedimiento;
import diagramapseudocodigo.Registro;
import diagramapseudocodigo.Subproceso;
import diagramapseudocodigo.Subrango;
import diagramapseudocodigo.Tipo;
import diagramapseudocodigo.TipoComplejo;
import diagramapseudocodigo.TipoDefinido;
import diagramapseudocodigo.TipoExistente;
import diagramapseudocodigo.ValorMatriz;
import diagramapseudocodigo.ValorRegistro;
import diagramapseudocodigo.ValorVector;
import diagramapseudocodigo.Variable;
import diagramapseudocodigo.Vector;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.ResourceBundle;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import vary.pseudocodigo.dsl.c.keywords.ReadKeywords;
import vary.pseudocodigo.dsl.c.keywords.ReadKeywordsInterface;
import vary.pseudocodigo.dsl.c.ui.contentassist.AbstractVaryGrammarProposalProvider;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class VaryGrammarProposalProvider extends AbstractVaryGrammarProposalProvider {
  protected final ReadKeywordsInterface readerKeywords;
  
  protected HashSet<String> filteringKeywods;
  
  private static Image localIcon;
  
  private static Image constPublic;
  
  private static Image typePrivate;
  
  private static Image typePublic;
  
  private static Image typesClassics;
  
  private static Image varPrivate;
  
  private static Image funcionPrivada;
  
  private static Image fieldRegistry;
  
  private static Image varPublic;
  
  @Inject
  public VaryGrammarProposalProvider() {
    ReadKeywords _readKeywords = new ReadKeywords();
    this.readerKeywords = _readKeywords;
    this.initializeFilteringKeywords();
    this.initializeIcons();
  }
  
  public VaryGrammarProposalProvider(final String language) {
    vary.pseudocodigo.dsl.c.english.keywords.ReadKeywords _readKeywords = new vary.pseudocodigo.dsl.c.english.keywords.ReadKeywords();
    this.readerKeywords = _readKeywords;
    this.initializeFilteringKeywords();
    this.initializeIcons();
  }
  
  public Image initializeIcons() {
    Image _xblockexpression = null;
    {
      ImageDescriptor _createFromFile = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/localvariable_obj.gif");
      Image _createImage = _createFromFile.createImage();
      VaryGrammarProposalProvider.localIcon = _createImage;
      ImageDescriptor _createFromFile_1 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/compare_field_public.gif");
      Image _createImage_1 = _createFromFile_1.createImage();
      VaryGrammarProposalProvider.constPublic = _createImage_1;
      ImageDescriptor _createFromFile_2 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/typevariable_private.gif");
      Image _createImage_2 = _createFromFile_2.createImage();
      VaryGrammarProposalProvider.typePrivate = _createImage_2;
      ImageDescriptor _createFromFile_3 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/typevariable_public.gif");
      Image _createImage_3 = _createFromFile_3.createImage();
      VaryGrammarProposalProvider.typePublic = _createImage_3;
      ImageDescriptor _createFromFile_4 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/methpub_obj.gif");
      Image _createImage_4 = _createFromFile_4.createImage();
      VaryGrammarProposalProvider.typesClassics = _createImage_4;
      ImageDescriptor _createFromFile_5 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/field_private_obj.gif");
      Image _createImage_5 = _createFromFile_5.createImage();
      VaryGrammarProposalProvider.varPrivate = _createImage_5;
      ImageDescriptor _createFromFile_6 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/methpri_obj.gif");
      Image _createImage_6 = _createFromFile_6.createImage();
      VaryGrammarProposalProvider.funcionPrivada = _createImage_6;
      ImageDescriptor _createFromFile_7 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/compare_field.gif");
      Image _createImage_7 = _createFromFile_7.createImage();
      VaryGrammarProposalProvider.fieldRegistry = _createImage_7;
      ImageDescriptor _createFromFile_8 = ImageDescriptor.createFromFile(VaryGrammarProposalProvider.class, "/icons/field_public_obj.gif");
      Image _createImage_8 = _createFromFile_8.createImage();
      _xblockexpression = VaryGrammarProposalProvider.varPublic = _createImage_8;
    }
    return _xblockexpression;
  }
  
  public HashSet<String> initializeFilteringKeywords() {
    ResourceBundle _bundle = this.readerKeywords.getBundle();
    String _string = _bundle.getString("KEYWORD_ALGORITMO");
    ResourceBundle _bundle_1 = this.readerKeywords.getBundle();
    String _string_1 = _bundle_1.getString("KEYWORD_MODULO");
    ResourceBundle _bundle_2 = this.readerKeywords.getBundle();
    String _string_2 = _bundle_2.getString("KEYWORD_ABRIR");
    ResourceBundle _bundle_3 = this.readerKeywords.getBundle();
    String _string_3 = _bundle_3.getString("KEYWORD_CERRAR");
    ResourceBundle _bundle_4 = this.readerKeywords.getBundle();
    String _string_4 = _bundle_4.getString("KEYWORD_DESDE");
    ResourceBundle _bundle_5 = this.readerKeywords.getBundle();
    String _string_5 = _bundle_5.getString("KEYWORD_ESCRIBIR");
    ResourceBundle _bundle_6 = this.readerKeywords.getBundle();
    String _string_6 = _bundle_6.getString("KEYWORD_ESCRIBIR");
    String _concat = _string_6.concat("(");
    ResourceBundle _bundle_7 = this.readerKeywords.getBundle();
    String _string_7 = _bundle_7.getString("KEYWORD_LEER");
    ResourceBundle _bundle_8 = this.readerKeywords.getBundle();
    String _string_8 = _bundle_8.getString("KEYWORD_LEER");
    String _concat_1 = _string_8.concat("(");
    ResourceBundle _bundle_9 = this.readerKeywords.getBundle();
    String _string_9 = _bundle_9.getString("KEYWORD_MIENTRAS");
    ResourceBundle _bundle_10 = this.readerKeywords.getBundle();
    String _string_10 = _bundle_10.getString("KEYWORD_MIENTRAS");
    String _concat_2 = _string_10.concat("(");
    ResourceBundle _bundle_11 = this.readerKeywords.getBundle();
    String _string_11 = _bundle_11.getString("KEYWORD_REPETIR");
    ResourceBundle _bundle_12 = this.readerKeywords.getBundle();
    String _string_12 = _bundle_12.getString("KEYWORD_SEGUN_SEA");
    ResourceBundle _bundle_13 = this.readerKeywords.getBundle();
    String _string_13 = _bundle_13.getString("KEYWORD_SEGUN_SEA");
    String _concat_3 = _string_13.concat("(");
    ResourceBundle _bundle_14 = this.readerKeywords.getBundle();
    String _string_14 = _bundle_14.getString("KEYWORD_SI");
    ResourceBundle _bundle_15 = this.readerKeywords.getBundle();
    String _string_15 = _bundle_15.getString("KEYWORD_SI");
    String _concat_4 = _string_15.concat("(");
    ResourceBundle _bundle_16 = this.readerKeywords.getBundle();
    String _string_16 = _bundle_16.getString("KEYWORD_ARCHIVO");
    ResourceBundle _bundle_17 = this.readerKeywords.getBundle();
    String _string_17 = _bundle_17.getString("KEYWORD_MATRIZ");
    ResourceBundle _bundle_18 = this.readerKeywords.getBundle();
    String _string_18 = _bundle_18.getString("KEYWORD_PROCEDIMIENTO");
    ResourceBundle _bundle_19 = this.readerKeywords.getBundle();
    String _string_19 = _bundle_19.getString("KEYWORD_FUNCION");
    ResourceBundle _bundle_20 = this.readerKeywords.getBundle();
    String _string_20 = _bundle_20.getString("KEYWORD_REGISTRO");
    ResourceBundle _bundle_21 = this.readerKeywords.getBundle();
    String _string_21 = _bundle_21.getString("KEYWORD_VECTOR");
    ResourceBundle _bundle_22 = this.readerKeywords.getBundle();
    String _string_22 = _bundle_22.getString("KEYWORD_DEVOLVER");
    HashSet<String> _newHashSet = Sets.<String>newHashSet(_string, _string_1, _string_2, _string_3, _string_4, _string_5, _concat, _string_7, _concat_1, _string_9, _concat_2, _string_11, _string_12, _concat_3, _string_14, _concat_4, _string_16, _string_17, _string_18, _string_19, _string_20, _string_21, _string_22);
    return this.filteringKeywods = _newHashSet;
  }
  
  @Override
  public void completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
    String _value = keyword.getValue();
    boolean _contains = this.filteringKeywods.contains(_value);
    if (_contains) {
      return;
    }
    super.completeKeyword(keyword, contentAssistContext, acceptor);
  }
  
  @Override
  public void completeDeclaracionPropia_Tipo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      ArrayList<String> tiposLocales = new ArrayList<String>();
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      EList<TipoComplejo> _tipocomplejo = algoritmo.getTipocomplejo();
      ArrayList<String> _completeDeclaracionPropia_TipoAux = this.completeDeclaracionPropia_TipoAux(context, acceptor, _tipocomplejo, tiposLocales);
      tiposLocales = _completeDeclaracionPropia_TipoAux;
      EList<Modulo> _importaciones = algoritmo.getImportaciones();
      this.completeDeclaracionPropia_TipoModulos(context, acceptor, _importaciones, tiposLocales);
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        ArrayList<String> tiposLocales_1 = new ArrayList<String>();
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<TipoComplejo> _tipocomplejo_1 = _implementacion.getTipocomplejo();
        ArrayList<String> _completeDeclaracionPropia_TipoAux_1 = this.completeDeclaracionPropia_TipoAux(context, acceptor, _tipocomplejo_1, tiposLocales_1);
        tiposLocales_1 = _completeDeclaracionPropia_TipoAux_1;
        EList<Modulo> _importaciones_1 = modulo.getImportaciones();
        this.completeDeclaracionPropia_TipoModulos(context, acceptor, _importaciones_1, tiposLocales_1);
      }
    }
  }
  
  public ArrayList<String> completeDeclaracionPropia_TipoAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<TipoComplejo> complejos, final ArrayList<String> tiposLocales) {
    for (final TipoComplejo tipo : complejos) {
      if ((tipo instanceof Vector)) {
        Vector vector = ((Vector) tipo);
        String _nombre = vector.getNombre();
        tiposLocales.add(_nombre);
        String _nombre_1 = vector.getNombre();
        String _plus = (_nombre_1 + " : ");
        ResourceBundle _bundle = this.readerKeywords.getBundle();
        String _string = _bundle.getString("KEYWORD_VECTOR");
        String _plus_1 = (_plus + _string);
        StyledString styledString = new StyledString(_plus_1);
        String _nombre_2 = vector.getNombre();
        ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_2, styledString, VaryGrammarProposalProvider.typePrivate, context);
        acceptor.accept(completionProposal);
      } else {
        if ((tipo instanceof Matriz)) {
          Matriz matriz = ((Matriz) tipo);
          String _nombre_3 = matriz.getNombre();
          tiposLocales.add(_nombre_3);
          String _nombre_4 = matriz.getNombre();
          String _plus_2 = (_nombre_4 + " : ");
          ResourceBundle _bundle_1 = this.readerKeywords.getBundle();
          String _string_1 = _bundle_1.getString("KEYWORD_MATRIZ");
          String _plus_3 = (_plus_2 + _string_1);
          StyledString styledString_1 = new StyledString(_plus_3);
          String _nombre_5 = matriz.getNombre();
          ICompletionProposal completionProposal_1 = this.createCompletionProposal(_nombre_5, styledString_1, VaryGrammarProposalProvider.typePrivate, context);
          acceptor.accept(completionProposal_1);
        } else {
          if ((tipo instanceof Registro)) {
            Registro registro = ((Registro) tipo);
            String _nombre_6 = registro.getNombre();
            tiposLocales.add(_nombre_6);
            String _nombre_7 = registro.getNombre();
            String _plus_4 = (_nombre_7 + " : ");
            ResourceBundle _bundle_2 = this.readerKeywords.getBundle();
            String _string_2 = _bundle_2.getString("KEYWORD_REGISTRO");
            String _replaceAll = _string_2.replaceAll(":", "");
            String _plus_5 = (_plus_4 + _replaceAll);
            StyledString styledString_2 = new StyledString(_plus_5);
            String _nombre_8 = registro.getNombre();
            ICompletionProposal completionProposal_2 = this.createCompletionProposal(_nombre_8, styledString_2, VaryGrammarProposalProvider.typePrivate, context);
            acceptor.accept(completionProposal_2);
          } else {
            if ((tipo instanceof Enumerado)) {
              Enumerado enumerado = ((Enumerado) tipo);
              String _nombre_9 = enumerado.getNombre();
              tiposLocales.add(_nombre_9);
              String _nombre_10 = enumerado.getNombre();
              String _plus_6 = (_nombre_10 + " : ");
              ResourceBundle _bundle_3 = this.readerKeywords.getBundle();
              String _string_3 = _bundle_3.getString("KEYWORD_ENUMERADO");
              String _plus_7 = (_plus_6 + _string_3);
              StyledString styledString_3 = new StyledString(_plus_7);
              String _nombre_11 = enumerado.getNombre();
              ICompletionProposal completionProposal_3 = this.createCompletionProposal(_nombre_11, styledString_3, VaryGrammarProposalProvider.typePrivate, context);
              acceptor.accept(completionProposal_3);
            } else {
              if ((tipo instanceof Subrango)) {
                Subrango subrango = ((Subrango) tipo);
                String _nombre_12 = subrango.getNombre();
                tiposLocales.add(_nombre_12);
                String _nombre_13 = subrango.getNombre();
                String _plus_8 = (_nombre_13 + " : ");
                ResourceBundle _bundle_4 = this.readerKeywords.getBundle();
                String _string_4 = _bundle_4.getString("KEYWORD_SUBRANGO");
                String _plus_9 = (_plus_8 + _string_4);
                StyledString styledString_4 = new StyledString(_plus_9);
                String _nombre_14 = subrango.getNombre();
                ICompletionProposal completionProposal_4 = this.createCompletionProposal(_nombre_14, styledString_4, VaryGrammarProposalProvider.typePrivate, context);
                acceptor.accept(completionProposal_4);
              } else {
                if ((tipo instanceof Archivo)) {
                  Archivo archivo = ((Archivo) tipo);
                  String _nombre_15 = archivo.getNombre();
                  tiposLocales.add(_nombre_15);
                  String _nombre_16 = archivo.getNombre();
                  String _plus_10 = (_nombre_16 + " : ");
                  ResourceBundle _bundle_5 = this.readerKeywords.getBundle();
                  String _string_5 = _bundle_5.getString("KEYWORD_ARCHIVO");
                  String _plus_11 = (_plus_10 + _string_5);
                  StyledString styledString_5 = new StyledString(_plus_11);
                  String _nombre_17 = archivo.getNombre();
                  ICompletionProposal completionProposal_5 = this.createCompletionProposal(_nombre_17, styledString_5, VaryGrammarProposalProvider.typePrivate, context);
                  acceptor.accept(completionProposal_5);
                }
              }
            }
          }
        }
      }
    }
    return tiposLocales;
  }
  
  public void completeDeclaracionPropia_TipoModulos(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Modulo> modulos, final ArrayList<String> tiposLocales) {
    for (final Modulo modulo : modulos) {
      Implementacion _implementacion = modulo.getImplementacion();
      EList<TipoComplejo> _tipocomplejo = _implementacion.getTipocomplejo();
      for (final TipoComplejo tipo : _tipocomplejo) {
        if ((tipo instanceof Vector)) {
          Vector vector = ((Vector) tipo);
          boolean _and = false;
          EList<String> _exporta_tipos = modulo.getExporta_tipos();
          String _nombre = vector.getNombre();
          boolean _contains = _exporta_tipos.contains(_nombre);
          if (!_contains) {
            _and = false;
          } else {
            String _nombre_1 = vector.getNombre();
            boolean _contains_1 = tiposLocales.contains(_nombre_1);
            boolean _not = (!_contains_1);
            _and = _not;
          }
          if (_and) {
            String _nombre_2 = vector.getNombre();
            String _plus = (_nombre_2 + " : ");
            ResourceBundle _bundle = this.readerKeywords.getBundle();
            String _string = _bundle.getString("KEYWORD_VECTOR");
            String _plus_1 = (_plus + _string);
            StyledString styledString = new StyledString(_plus_1);
            String _nombre_3 = modulo.getNombre();
            String _plus_2 = (" - " + _nombre_3);
            StyledString styledStringAux = new StyledString(_plus_2);
            int _length = styledStringAux.length();
            styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
            styledString.append(styledStringAux);
            String _nombre_4 = vector.getNombre();
            ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_4, styledString, VaryGrammarProposalProvider.typePublic, context);
            acceptor.accept(completionProposal);
          }
        } else {
          if ((tipo instanceof Matriz)) {
            Matriz matriz = ((Matriz) tipo);
            boolean _and_1 = false;
            EList<String> _exporta_tipos_1 = modulo.getExporta_tipos();
            String _nombre_5 = matriz.getNombre();
            boolean _contains_2 = _exporta_tipos_1.contains(_nombre_5);
            if (!_contains_2) {
              _and_1 = false;
            } else {
              String _nombre_6 = matriz.getNombre();
              boolean _contains_3 = tiposLocales.contains(_nombre_6);
              boolean _not_1 = (!_contains_3);
              _and_1 = _not_1;
            }
            if (_and_1) {
              String _nombre_7 = matriz.getNombre();
              String _plus_3 = (_nombre_7 + " : ");
              ResourceBundle _bundle_1 = this.readerKeywords.getBundle();
              String _string_1 = _bundle_1.getString("KEYWORD_MATRIZ");
              String _plus_4 = (_plus_3 + _string_1);
              StyledString styledString_1 = new StyledString(_plus_4);
              String _nombre_8 = modulo.getNombre();
              String _plus_5 = (" - " + _nombre_8);
              StyledString styledStringAux_1 = new StyledString(_plus_5);
              int _length_1 = styledStringAux_1.length();
              styledStringAux_1.setStyle(0, _length_1, StyledString.QUALIFIER_STYLER);
              styledString_1.append(styledStringAux_1);
              String _nombre_9 = matriz.getNombre();
              ICompletionProposal completionProposal_1 = this.createCompletionProposal(_nombre_9, styledString_1, VaryGrammarProposalProvider.typePublic, context);
              acceptor.accept(completionProposal_1);
            }
          } else {
            if ((tipo instanceof Registro)) {
              Registro registro = ((Registro) tipo);
              boolean _and_2 = false;
              EList<String> _exporta_tipos_2 = modulo.getExporta_tipos();
              String _nombre_10 = registro.getNombre();
              boolean _contains_4 = _exporta_tipos_2.contains(_nombre_10);
              if (!_contains_4) {
                _and_2 = false;
              } else {
                String _nombre_11 = registro.getNombre();
                boolean _contains_5 = tiposLocales.contains(_nombre_11);
                boolean _not_2 = (!_contains_5);
                _and_2 = _not_2;
              }
              if (_and_2) {
                String _nombre_12 = registro.getNombre();
                String _plus_6 = (_nombre_12 + " : ");
                ResourceBundle _bundle_2 = this.readerKeywords.getBundle();
                String _string_2 = _bundle_2.getString("KEYWORD_REGISTRO");
                String _replaceAll = _string_2.replaceAll(":", "");
                String _plus_7 = (_plus_6 + _replaceAll);
                StyledString styledString_2 = new StyledString(_plus_7);
                String _nombre_13 = modulo.getNombre();
                String _plus_8 = (" - " + _nombre_13);
                StyledString styledStringAux_2 = new StyledString(_plus_8);
                int _length_2 = styledStringAux_2.length();
                styledStringAux_2.setStyle(0, _length_2, StyledString.QUALIFIER_STYLER);
                styledString_2.append(styledStringAux_2);
                String _nombre_14 = registro.getNombre();
                ICompletionProposal completionProposal_2 = this.createCompletionProposal(_nombre_14, styledString_2, VaryGrammarProposalProvider.typePublic, context);
                acceptor.accept(completionProposal_2);
              }
            } else {
              if ((tipo instanceof Enumerado)) {
                Enumerado enumerado = ((Enumerado) tipo);
                boolean _and_3 = false;
                EList<String> _exporta_tipos_3 = modulo.getExporta_tipos();
                String _nombre_15 = enumerado.getNombre();
                boolean _contains_6 = _exporta_tipos_3.contains(_nombre_15);
                if (!_contains_6) {
                  _and_3 = false;
                } else {
                  String _nombre_16 = enumerado.getNombre();
                  boolean _contains_7 = tiposLocales.contains(_nombre_16);
                  boolean _not_3 = (!_contains_7);
                  _and_3 = _not_3;
                }
                if (_and_3) {
                  String _nombre_17 = enumerado.getNombre();
                  String _plus_9 = (_nombre_17 + " : ");
                  ResourceBundle _bundle_3 = this.readerKeywords.getBundle();
                  String _string_3 = _bundle_3.getString("KEYWORD_ENUMERADO");
                  String _plus_10 = (_plus_9 + _string_3);
                  StyledString styledString_3 = new StyledString(_plus_10);
                  String _nombre_18 = modulo.getNombre();
                  String _plus_11 = (" - " + _nombre_18);
                  StyledString styledStringAux_3 = new StyledString(_plus_11);
                  int _length_3 = styledStringAux_3.length();
                  styledStringAux_3.setStyle(0, _length_3, StyledString.QUALIFIER_STYLER);
                  styledString_3.append(styledStringAux_3);
                  String _nombre_19 = enumerado.getNombre();
                  ICompletionProposal completionProposal_3 = this.createCompletionProposal(_nombre_19, styledString_3, VaryGrammarProposalProvider.typePublic, context);
                  acceptor.accept(completionProposal_3);
                }
              } else {
                if ((tipo instanceof Subrango)) {
                  Subrango subrango = ((Subrango) tipo);
                  boolean _and_4 = false;
                  EList<String> _exporta_tipos_4 = modulo.getExporta_tipos();
                  String _nombre_20 = subrango.getNombre();
                  boolean _contains_8 = _exporta_tipos_4.contains(_nombre_20);
                  if (!_contains_8) {
                    _and_4 = false;
                  } else {
                    String _nombre_21 = subrango.getNombre();
                    boolean _contains_9 = tiposLocales.contains(_nombre_21);
                    boolean _not_4 = (!_contains_9);
                    _and_4 = _not_4;
                  }
                  if (_and_4) {
                    String _nombre_22 = subrango.getNombre();
                    String _plus_12 = (_nombre_22 + " : ");
                    ResourceBundle _bundle_4 = this.readerKeywords.getBundle();
                    String _string_4 = _bundle_4.getString("KEYWORD_SUBRANGO");
                    String _plus_13 = (_plus_12 + _string_4);
                    StyledString styledString_4 = new StyledString(_plus_13);
                    String _nombre_23 = modulo.getNombre();
                    String _plus_14 = (" - " + _nombre_23);
                    StyledString styledStringAux_4 = new StyledString(_plus_14);
                    int _length_4 = styledStringAux_4.length();
                    styledStringAux_4.setStyle(0, _length_4, StyledString.QUALIFIER_STYLER);
                    styledString_4.append(styledStringAux_4);
                    String _nombre_24 = subrango.getNombre();
                    ICompletionProposal completionProposal_4 = this.createCompletionProposal(_nombre_24, styledString_4, VaryGrammarProposalProvider.typePublic, context);
                    acceptor.accept(completionProposal_4);
                  }
                } else {
                  if ((tipo instanceof Archivo)) {
                    Archivo archivo = ((Archivo) tipo);
                    boolean _and_5 = false;
                    EList<String> _exporta_tipos_5 = modulo.getExporta_tipos();
                    String _nombre_25 = archivo.getNombre();
                    boolean _contains_10 = _exporta_tipos_5.contains(_nombre_25);
                    if (!_contains_10) {
                      _and_5 = false;
                    } else {
                      String _nombre_26 = archivo.getNombre();
                      boolean _contains_11 = tiposLocales.contains(_nombre_26);
                      boolean _not_5 = (!_contains_11);
                      _and_5 = _not_5;
                    }
                    if (_and_5) {
                      String _nombre_27 = archivo.getNombre();
                      String _plus_15 = (_nombre_27 + " : ");
                      ResourceBundle _bundle_5 = this.readerKeywords.getBundle();
                      String _string_5 = _bundle_5.getString("KEYWORD_ARCHIVO");
                      String _plus_16 = (_plus_15 + _string_5);
                      StyledString styledString_5 = new StyledString(_plus_16);
                      String _nombre_28 = modulo.getNombre();
                      String _plus_17 = (" - " + _nombre_28);
                      StyledString styledStringAux_5 = new StyledString(_plus_17);
                      int _length_5 = styledStringAux_5.length();
                      styledStringAux_5.setStyle(0, _length_5, StyledString.QUALIFIER_STYLER);
                      styledString_5.append(styledStringAux_5);
                      String _nombre_29 = archivo.getNombre();
                      ICompletionProposal completionProposal_5 = this.createCompletionProposal(_nombre_29, styledString_5, VaryGrammarProposalProvider.typePublic, context);
                      acceptor.accept(completionProposal_5);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  @Override
  public void completeDeclaracionVariable_Tipo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      this.completeDeclaracionVariable_TipoAux(context, acceptor);
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        this.completeDeclaracionVariable_TipoAux(context, acceptor);
      }
    }
  }
  
  public void completeDeclaracionVariable_TipoAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ResourceBundle _bundle = this.readerKeywords.getBundle();
    String _string = _bundle.getString("KEYWORD_ENTERO");
    StyledString styledString = new StyledString(_string);
    int _length = styledString.length();
    styledString.setStyle(0, _length, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_1 = this.readerKeywords.getBundle();
    String _string_1 = _bundle_1.getString("KEYWORD_ENTERO");
    ICompletionProposal completionProposal = this.createCompletionProposal(_string_1, styledString, VaryGrammarProposalProvider.typesClassics, context);
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_2 = this.readerKeywords.getBundle();
    String _string_2 = _bundle_2.getString("KEYWORD_REAL");
    StyledString _styledString = new StyledString(_string_2);
    styledString = _styledString;
    int _length_1 = styledString.length();
    styledString.setStyle(0, _length_1, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_3 = this.readerKeywords.getBundle();
    String _string_3 = _bundle_3.getString("KEYWORD_REAL");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_string_3, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal;
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_4 = this.readerKeywords.getBundle();
    String _string_4 = _bundle_4.getString("KEYWORD_LOGICO");
    StyledString _styledString_1 = new StyledString(_string_4);
    styledString = _styledString_1;
    int _length_2 = styledString.length();
    styledString.setStyle(0, _length_2, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_5 = this.readerKeywords.getBundle();
    String _string_5 = _bundle_5.getString("KEYWORD_LOGICO");
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal(_string_5, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal_1;
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_6 = this.readerKeywords.getBundle();
    String _string_6 = _bundle_6.getString("KEYWORD_CARACTER");
    StyledString _styledString_2 = new StyledString(_string_6);
    styledString = _styledString_2;
    int _length_3 = styledString.length();
    styledString.setStyle(0, _length_3, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_7 = this.readerKeywords.getBundle();
    String _string_7 = _bundle_7.getString("KEYWORD_CARACTER");
    ICompletionProposal _createCompletionProposal_2 = this.createCompletionProposal(_string_7, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal_2;
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_8 = this.readerKeywords.getBundle();
    String _string_8 = _bundle_8.getString("KEYWORD_CADENA");
    StyledString _styledString_3 = new StyledString(_string_8);
    styledString = _styledString_3;
    int _length_4 = styledString.length();
    styledString.setStyle(0, _length_4, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_9 = this.readerKeywords.getBundle();
    String _string_9 = _bundle_9.getString("KEYWORD_CADENA");
    ICompletionProposal _createCompletionProposal_3 = this.createCompletionProposal(_string_9, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal_3;
    acceptor.accept(completionProposal);
  }
  
  @Override
  public void completeAsignacionNormal_Operador(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeAsignacionNormalCompleja_Operador(model, assignment, context, acceptor);
  }
  
  public void completeAsignacionNormal_OperadorParametrosSubproceso(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<ParametroFuncion> parametros) {
    for (final ParametroFuncion parametro : parametros) {
      Tipo _tipo = parametro.getTipo();
      if ((_tipo instanceof TipoDefinido)) {
        Tipo _tipo_1 = parametro.getTipo();
        TipoDefinido tipoDefinido = ((TipoDefinido) _tipo_1);
        Variable _variable = parametro.getVariable();
        String _nombre = _variable.getNombre();
        String _plus = (_nombre + " : ");
        String _tipo_2 = tipoDefinido.getTipo();
        String _plus_1 = (_plus + _tipo_2);
        StyledString styledString = new StyledString(_plus_1);
        Variable _variable_1 = parametro.getVariable();
        String _nombre_1 = _variable_1.getNombre();
        ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_1, styledString, VaryGrammarProposalProvider.varPrivate, context);
        acceptor.accept(completionProposal);
      } else {
        Tipo _tipo_3 = parametro.getTipo();
        if ((_tipo_3 instanceof TipoExistente)) {
          Tipo _tipo_4 = parametro.getTipo();
          TipoExistente tipoExistente = ((TipoExistente) _tipo_4);
          Variable _variable_2 = parametro.getVariable();
          String _nombre_2 = _variable_2.getNombre();
          String _plus_2 = (_nombre_2 + " : ");
          String _tipo_5 = tipoExistente.getTipo();
          String _plus_3 = (_plus_2 + _tipo_5);
          StyledString styledString_1 = new StyledString(_plus_3);
          Variable _variable_3 = parametro.getVariable();
          String _nombre_3 = _variable_3.getNombre();
          ICompletionProposal completionProposal_1 = this.createCompletionProposal(_nombre_3, styledString_1, VaryGrammarProposalProvider.varPrivate, context);
          acceptor.accept(completionProposal_1);
        }
      }
    }
  }
  
  public void completeAsignacionNormal_OperadorAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Declaracion> declaraciones) {
    for (final Declaracion declaracion : declaraciones) {
      if ((declaracion instanceof DeclaracionPropia)) {
        DeclaracionPropia dec = ((DeclaracionPropia) declaracion);
        EList<Variable> _variable = dec.getVariable();
        for (final Variable v : _variable) {
          {
            String _nombre = v.getNombre();
            String _plus = (_nombre + " : ");
            String _tipo = dec.getTipo();
            String _plus_1 = (_plus + _tipo);
            StyledString styledString = new StyledString(_plus_1);
            String _nombre_1 = v.getNombre();
            ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_1, styledString, VaryGrammarProposalProvider.varPrivate, context);
            acceptor.accept(completionProposal);
          }
        }
      } else {
        if ((declaracion instanceof DeclaracionVariable)) {
          DeclaracionVariable dec_1 = ((DeclaracionVariable) declaracion);
          EList<Variable> _variable_1 = dec_1.getVariable();
          for (final Variable v_1 : _variable_1) {
            {
              String _nombre = v_1.getNombre();
              String _plus = (_nombre + " : ");
              String _tipo = dec_1.getTipo();
              String _plus_1 = (_plus + _tipo);
              StyledString styledString = new StyledString(_plus_1);
              String _nombre_1 = v_1.getNombre();
              ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_1, styledString, VaryGrammarProposalProvider.varPrivate, context);
              acceptor.accept(completionProposal);
            }
          }
        }
      }
    }
  }
  
  public void completeAsignacionNormal_OperadorAuxModulos(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<String> variablesLocales, final List<Modulo> modulos) {
    for (final Modulo modulo : modulos) {
      {
        EList<Declaracion> _exporta_global = modulo.getExporta_global();
        ArrayList<String> variablesPublicas = this.registrarVariables(_exporta_global);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<Declaracion> _global = _implementacion.getGlobal();
        for (final Declaracion declaracion : _global) {
          if ((declaracion instanceof DeclaracionVariable)) {
            DeclaracionVariable declaracionVariable = ((DeclaracionVariable) declaracion);
            EList<Variable> _variable = declaracionVariable.getVariable();
            for (final Variable variable : _variable) {
              boolean _and = false;
              String _nombre = variable.getNombre();
              boolean _contains = variablesLocales.contains(_nombre);
              boolean _not = (!_contains);
              if (!_not) {
                _and = false;
              } else {
                String _nombre_1 = variable.getNombre();
                boolean _contains_1 = variablesPublicas.contains(_nombre_1);
                _and = _contains_1;
              }
              if (_and) {
                String _nombre_2 = variable.getNombre();
                String _plus = (_nombre_2 + " : ");
                String _tipo = declaracionVariable.getTipo();
                String _plus_1 = (_plus + _tipo);
                StyledString styledString = new StyledString(_plus_1);
                String _nombre_3 = modulo.getNombre();
                String _plus_2 = (" - " + _nombre_3);
                StyledString styledStringAux = new StyledString(_plus_2);
                int _length = styledStringAux.length();
                styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
                styledString.append(styledStringAux);
                String _nombre_4 = variable.getNombre();
                ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_4, styledString, VaryGrammarProposalProvider.varPublic, context);
                acceptor.accept(completionProposal);
              }
            }
          } else {
            if ((declaracion instanceof DeclaracionPropia)) {
              DeclaracionPropia declaracionPropia = ((DeclaracionPropia) declaracion);
              EList<Variable> _variable_1 = declaracionPropia.getVariable();
              for (final Variable variable_1 : _variable_1) {
                boolean _and_1 = false;
                String _nombre_5 = variable_1.getNombre();
                boolean _contains_2 = variablesLocales.contains(_nombre_5);
                boolean _not_1 = (!_contains_2);
                if (!_not_1) {
                  _and_1 = false;
                } else {
                  String _nombre_6 = variable_1.getNombre();
                  boolean _contains_3 = variablesPublicas.contains(_nombre_6);
                  _and_1 = _contains_3;
                }
                if (_and_1) {
                  String _nombre_7 = variable_1.getNombre();
                  String _plus_3 = (_nombre_7 + " : ");
                  String _tipo_1 = declaracionPropia.getTipo();
                  String _plus_4 = (_plus_3 + _tipo_1);
                  StyledString styledString_1 = new StyledString(_plus_4);
                  String _nombre_8 = modulo.getNombre();
                  String _plus_5 = (" - " + _nombre_8);
                  StyledString styledStringAux_1 = new StyledString(_plus_5);
                  int _length_1 = styledStringAux_1.length();
                  styledStringAux_1.setStyle(0, _length_1, StyledString.QUALIFIER_STYLER);
                  styledString_1.append(styledStringAux_1);
                  String _nombre_9 = variable_1.getNombre();
                  ICompletionProposal completionProposal_1 = this.createCompletionProposal(_nombre_9, styledString_1, VaryGrammarProposalProvider.varPublic, context);
                  acceptor.accept(completionProposal_1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  public ArrayList<String> registrarParametros(final List<ParametroFuncion> parametros) {
    ArrayList<String> variables = new ArrayList<String>();
    for (final ParametroFuncion parametro : parametros) {
      Variable _variable = parametro.getVariable();
      String _nombre = _variable.getNombre();
      variables.add(_nombre);
    }
    return variables;
  }
  
  public ArrayList<String> registrarVariables(final List<Declaracion> declaraciones) {
    ArrayList<String> variables = new ArrayList<String>();
    for (final Declaracion declaracion : declaraciones) {
      if ((declaracion instanceof DeclaracionVariable)) {
        DeclaracionVariable declaracionVariable = ((DeclaracionVariable) declaracion);
        EList<Variable> _variable = declaracionVariable.getVariable();
        for (final Variable variable : _variable) {
          String _nombre = variable.getNombre();
          variables.add(_nombre);
        }
      } else {
        if ((declaracion instanceof DeclaracionPropia)) {
          DeclaracionPropia declaracionPropia = ((DeclaracionPropia) declaracion);
          EList<Variable> _variable_1 = declaracionPropia.getVariable();
          for (final Variable variable_1 : _variable_1) {
            String _nombre_1 = variable_1.getNombre();
            variables.add(_nombre_1);
          }
        }
      }
    }
    return variables;
  }
  
  @Override
  public void completeAsignacionCompleja_Operador(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeAsignacionNormalCompleja_Operador(model, assignment, context, acceptor);
  }
  
  public void completeAsignacionNormalCompleja_Operador(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _currentModel = context.getCurrentModel();
      AsignacionNormal asignacionNormal = ((AsignacionNormal) _currentModel);
      Procedimiento procedimiento = EcoreUtil2.<Procedimiento>getContainerOfType(asignacionNormal, Procedimiento.class);
      Funcion funcion = EcoreUtil2.<Funcion>getContainerOfType(asignacionNormal, Funcion.class);
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      EList<Subproceso> _funcion = algoritmo.getFuncion();
      this.completeFuncionesAsignacion(context, acceptor, _funcion);
      EList<Modulo> _importaciones = algoritmo.getImportaciones();
      this.completeFuncionesAsignacion_Modulos(context, acceptor, _importaciones);
      ArrayList<String> variablesLocales = new ArrayList<String>();
      EList<Declaracion> _global = algoritmo.getGlobal();
      ArrayList<String> _registrarVariables = this.registrarVariables(_global);
      variablesLocales = _registrarVariables;
      EList<Declaracion> _global_1 = algoritmo.getGlobal();
      this.completeAsignacionNormal_OperadorAux(context, acceptor, _global_1);
      boolean _and = false;
      boolean _equals = Objects.equal(procedimiento, null);
      if (!_equals) {
        _and = false;
      } else {
        boolean _equals_1 = Objects.equal(funcion, null);
        _and = _equals_1;
      }
      if (_and) {
        Inicio _tiene = algoritmo.getTiene();
        EList<Declaracion> _declaracion = _tiene.getDeclaracion();
        this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion);
        Inicio _tiene_1 = algoritmo.getTiene();
        EList<Declaracion> _declaracion_1 = _tiene_1.getDeclaracion();
        ArrayList<String> _registrarVariables_1 = this.registrarVariables(_declaracion_1);
        variablesLocales.addAll(_registrarVariables_1);
        Inicio _tiene_2 = algoritmo.getTiene();
        EList<Declaracion> _declaracion_2 = _tiene_2.getDeclaracion();
        ArrayList<String> _registrarVariables_2 = this.registrarVariables(_declaracion_2);
        variablesLocales.addAll(_registrarVariables_2);
        EList<Modulo> _importaciones_1 = algoritmo.getImportaciones();
        this.completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, _importaciones_1);
      } else {
        boolean _notEquals = (!Objects.equal(procedimiento, null));
        if (_notEquals) {
          EList<Declaracion> _declaracion_3 = procedimiento.getDeclaracion();
          this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_3);
          EList<ParametroFuncion> _parametrofuncion = procedimiento.getParametrofuncion();
          this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion);
          EList<Declaracion> _declaracion_4 = procedimiento.getDeclaracion();
          ArrayList<String> _registrarVariables_3 = this.registrarVariables(_declaracion_4);
          variablesLocales.addAll(_registrarVariables_3);
          EList<ParametroFuncion> _parametrofuncion_1 = procedimiento.getParametrofuncion();
          ArrayList<String> _registrarParametros = this.registrarParametros(_parametrofuncion_1);
          variablesLocales.addAll(_registrarParametros);
          EList<Modulo> _importaciones_2 = algoritmo.getImportaciones();
          this.completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, _importaciones_2);
        } else {
          boolean _notEquals_1 = (!Objects.equal(funcion, null));
          if (_notEquals_1) {
            EList<Declaracion> _declaracion_5 = funcion.getDeclaracion();
            this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_5);
            EList<ParametroFuncion> _parametrofuncion_2 = funcion.getParametrofuncion();
            this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_2);
            EList<Declaracion> _declaracion_6 = funcion.getDeclaracion();
            ArrayList<String> _registrarVariables_4 = this.registrarVariables(_declaracion_6);
            variablesLocales.addAll(_registrarVariables_4);
            EList<ParametroFuncion> _parametrofuncion_3 = funcion.getParametrofuncion();
            ArrayList<String> _registrarParametros_1 = this.registrarParametros(_parametrofuncion_3);
            variablesLocales.addAll(_registrarParametros_1);
            EList<Modulo> _importaciones_3 = algoritmo.getImportaciones();
            this.completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales, _importaciones_3);
          }
        }
      }
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        EObject _currentModel_1 = context.getCurrentModel();
        AsignacionNormal asignacionNormal_1 = ((AsignacionNormal) _currentModel_1);
        Procedimiento procedimiento_1 = EcoreUtil2.<Procedimiento>getContainerOfType(asignacionNormal_1, Procedimiento.class);
        Funcion funcion_1 = EcoreUtil2.<Funcion>getContainerOfType(asignacionNormal_1, Funcion.class);
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<Subproceso> _funcion_1 = _implementacion.getFuncion();
        this.completeFuncionesAsignacion(context, acceptor, _funcion_1);
        EList<Modulo> _importaciones_4 = modulo.getImportaciones();
        this.completeFuncionesAsignacion_Modulos(context, acceptor, _importaciones_4);
        ArrayList<String> variablesLocales_1 = new ArrayList<String>();
        Implementacion _implementacion_1 = modulo.getImplementacion();
        EList<Declaracion> _global_2 = _implementacion_1.getGlobal();
        ArrayList<String> _registrarVariables_5 = this.registrarVariables(_global_2);
        variablesLocales_1 = _registrarVariables_5;
        Implementacion _implementacion_2 = modulo.getImplementacion();
        EList<Declaracion> _global_3 = _implementacion_2.getGlobal();
        this.completeAsignacionNormal_OperadorAux(context, acceptor, _global_3);
        boolean _notEquals_2 = (!Objects.equal(procedimiento_1, null));
        if (_notEquals_2) {
          EList<Declaracion> _declaracion_7 = procedimiento_1.getDeclaracion();
          this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_7);
          EList<ParametroFuncion> _parametrofuncion_4 = procedimiento_1.getParametrofuncion();
          this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_4);
          EList<Declaracion> _declaracion_8 = procedimiento_1.getDeclaracion();
          ArrayList<String> _registrarVariables_6 = this.registrarVariables(_declaracion_8);
          variablesLocales_1.addAll(_registrarVariables_6);
          EList<ParametroFuncion> _parametrofuncion_5 = procedimiento_1.getParametrofuncion();
          ArrayList<String> _registrarParametros_2 = this.registrarParametros(_parametrofuncion_5);
          variablesLocales_1.addAll(_registrarParametros_2);
          EList<Modulo> _importaciones_5 = modulo.getImportaciones();
          this.completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales_1, _importaciones_5);
        } else {
          boolean _notEquals_3 = (!Objects.equal(funcion_1, null));
          if (_notEquals_3) {
            EList<Declaracion> _declaracion_9 = funcion_1.getDeclaracion();
            this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_9);
            EList<ParametroFuncion> _parametrofuncion_6 = funcion_1.getParametrofuncion();
            this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_6);
            EList<Declaracion> _declaracion_10 = funcion_1.getDeclaracion();
            ArrayList<String> _registrarVariables_7 = this.registrarVariables(_declaracion_10);
            variablesLocales_1.addAll(_registrarVariables_7);
            EList<ParametroFuncion> _parametrofuncion_7 = funcion_1.getParametrofuncion();
            ArrayList<String> _registrarParametros_3 = this.registrarParametros(_parametrofuncion_7);
            variablesLocales_1.addAll(_registrarParametros_3);
            EList<Modulo> _importaciones_6 = modulo.getImportaciones();
            this.completeAsignacionNormal_OperadorAuxModulos(context, acceptor, variablesLocales_1, _importaciones_6);
          }
        }
      }
    }
  }
  
  public void completeFuncionesAsignacion(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Subproceso> subprocesos) {
    for (final Subproceso subproceso : subprocesos) {
      if ((subproceso instanceof Funcion)) {
        Funcion funcion = ((Funcion) subproceso);
        String _nombre = funcion.getNombre();
        String _plus = (_nombre + "(");
        StyledString styledString = new StyledString(_plus);
        EList<ParametroFuncion> _parametrofuncion = funcion.getParametrofuncion();
        int _size = _parametrofuncion.size();
        boolean _equals = (_size == 0);
        if (_equals) {
          styledString.append(")");
        } else {
          EList<ParametroFuncion> _parametrofuncion_1 = funcion.getParametrofuncion();
          for (final ParametroFuncion p : _parametrofuncion_1) {
            EList<ParametroFuncion> _parametrofuncion_2 = funcion.getParametrofuncion();
            int _indexOf = _parametrofuncion_2.indexOf(p);
            EList<ParametroFuncion> _parametrofuncion_3 = funcion.getParametrofuncion();
            int _size_1 = _parametrofuncion_3.size();
            int _minus = (_size_1 - 1);
            boolean _notEquals = (_indexOf != _minus);
            if (_notEquals) {
              Variable _variable = p.getVariable();
              String _nombre_1 = _variable.getNombre();
              String _plus_1 = (_nombre_1 + ",");
              styledString.append(_plus_1);
            } else {
              Variable _variable_1 = p.getVariable();
              String _nombre_2 = _variable_1.getNombre();
              String _plus_2 = (_nombre_2 + ")");
              styledString.append(_plus_2);
            }
          }
        }
        String content = styledString.toString();
        String _tipo = funcion.getTipo();
        String _plus_3 = (" : " + _tipo);
        styledString.append(_plus_3);
        ICompletionProposal completionProposal = this.createCompletionProposal(content, styledString, VaryGrammarProposalProvider.funcionPrivada, context);
        acceptor.accept(completionProposal);
      }
    }
  }
  
  public void completeFuncionesAsignacion_Modulos(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Modulo> modulos) {
    for (final Modulo modulo : modulos) {
      Implementacion _implementacion = modulo.getImplementacion();
      EList<Subproceso> _funcion = _implementacion.getFuncion();
      for (final Subproceso subproceso : _funcion) {
        if ((subproceso instanceof Funcion)) {
          Funcion funcion = ((Funcion) subproceso);
          EList<CabeceraSubproceso> _exporta_funciones = modulo.getExporta_funciones();
          ArrayList<String> funciones_publicas = this.registrarFuncionesPublicas(_exporta_funciones);
          String _nombre = funcion.getNombre();
          boolean _contains = funciones_publicas.contains(_nombre);
          if (_contains) {
            String _nombre_1 = funcion.getNombre();
            String _plus = (_nombre_1 + "(");
            StyledString styledString = new StyledString(_plus);
            EList<ParametroFuncion> _parametrofuncion = funcion.getParametrofuncion();
            int _size = _parametrofuncion.size();
            boolean _equals = (_size == 0);
            if (_equals) {
              styledString.append(")");
            } else {
              EList<ParametroFuncion> _parametrofuncion_1 = funcion.getParametrofuncion();
              for (final ParametroFuncion p : _parametrofuncion_1) {
                EList<ParametroFuncion> _parametrofuncion_2 = funcion.getParametrofuncion();
                int _indexOf = _parametrofuncion_2.indexOf(p);
                EList<ParametroFuncion> _parametrofuncion_3 = funcion.getParametrofuncion();
                int _size_1 = _parametrofuncion_3.size();
                int _minus = (_size_1 - 1);
                boolean _notEquals = (_indexOf != _minus);
                if (_notEquals) {
                  Variable _variable = p.getVariable();
                  String _nombre_2 = _variable.getNombre();
                  String _plus_1 = (_nombre_2 + ",");
                  styledString.append(_plus_1);
                } else {
                  Variable _variable_1 = p.getVariable();
                  String _nombre_3 = _variable_1.getNombre();
                  String _plus_2 = (_nombre_3 + ")");
                  styledString.append(_plus_2);
                }
              }
            }
            String contenido = styledString.toString();
            String _tipo = funcion.getTipo();
            String _plus_3 = (" : " + _tipo);
            styledString.append(_plus_3);
            String _nombre_4 = modulo.getNombre();
            String _plus_4 = (" - " + _nombre_4);
            StyledString styledStringAux = new StyledString(_plus_4);
            int _length = styledStringAux.length();
            styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
            styledString.append(styledStringAux);
            ICompletionProposal completionProposal = this.createCompletionProposal(contenido, styledString, VaryGrammarProposalProvider.typesClassics, context);
            acceptor.accept(completionProposal);
          }
        }
      }
    }
  }
  
  public ArrayList<String> registrarFuncionesPublicas(final List<CabeceraSubproceso> cabeceras) {
    ArrayList<String> funcionesPublicas = new ArrayList<String>();
    for (final CabeceraSubproceso cabeceraSubproceso : cabeceras) {
      if ((cabeceraSubproceso instanceof CabeceraFuncion)) {
        String _nombre = ((CabeceraFuncion)cabeceraSubproceso).getNombre();
        funcionesPublicas.add(_nombre);
      }
    }
    return funcionesPublicas;
  }
  
  @Override
  public void completeInicio_Tiene(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    Algoritmo algoritmo = ((Algoritmo) _rootModel);
    EList<Subproceso> _funcion = algoritmo.getFuncion();
    for (final Subproceso s : _funcion) {
      if ((s instanceof Procedimiento)) {
        Procedimiento procedimiento = ((Procedimiento) s);
        this.complete_SentenciasAux(context, acceptor, procedimiento);
      }
    }
    EList<Modulo> _importaciones = algoritmo.getImportaciones();
    this.complete_SentenciasAux_Modulos(context, acceptor, _importaciones);
  }
  
  @Override
  public void completeProcedimiento_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeFuncion_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeSi_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeMientras_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeRepetir_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeDesde_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeCaso_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeSegun_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  @Override
  public void completeSino_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.complete_Sentencias(model, assignment, context, acceptor);
  }
  
  public void complete_Sentencias(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      EList<Subproceso> _funcion = algoritmo.getFuncion();
      for (final Subproceso s : _funcion) {
        if ((s instanceof Procedimiento)) {
          Procedimiento procedimiento = ((Procedimiento) s);
          this.complete_SentenciasAux(context, acceptor, procedimiento);
        }
      }
      EList<Modulo> _importaciones = algoritmo.getImportaciones();
      this.complete_SentenciasAux_Modulos(context, acceptor, _importaciones);
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<Subproceso> _funcion_1 = _implementacion.getFuncion();
        for (final Subproceso s_1 : _funcion_1) {
          {
            Procedimiento procedimiento_1 = ((Procedimiento) s_1);
            this.complete_SentenciasAux(context, acceptor, procedimiento_1);
          }
        }
        EList<Modulo> _importaciones_1 = modulo.getImportaciones();
        this.complete_SentenciasAux_Modulos(context, acceptor, _importaciones_1);
      }
    }
  }
  
  public void complete_SentenciasAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final Procedimiento procedimiento) {
    String _nombre = procedimiento.getNombre();
    String _plus = (_nombre + "(");
    StyledString styledString = new StyledString(_plus);
    EList<ParametroFuncion> _parametrofuncion = procedimiento.getParametrofuncion();
    int _size = _parametrofuncion.size();
    boolean _equals = (_size == 0);
    if (_equals) {
      styledString.append(")");
    } else {
      EList<ParametroFuncion> _parametrofuncion_1 = procedimiento.getParametrofuncion();
      for (final ParametroFuncion p : _parametrofuncion_1) {
        EList<ParametroFuncion> _parametrofuncion_2 = procedimiento.getParametrofuncion();
        int _indexOf = _parametrofuncion_2.indexOf(p);
        EList<ParametroFuncion> _parametrofuncion_3 = procedimiento.getParametrofuncion();
        int _size_1 = _parametrofuncion_3.size();
        int _minus = (_size_1 - 1);
        boolean _notEquals = (_indexOf != _minus);
        if (_notEquals) {
          Variable _variable = p.getVariable();
          String _nombre_1 = _variable.getNombre();
          String _plus_1 = (_nombre_1 + ",");
          styledString.append(_plus_1);
        } else {
          Variable _variable_1 = p.getVariable();
          String _nombre_2 = _variable_1.getNombre();
          String _plus_2 = (_nombre_2 + ")");
          styledString.append(_plus_2);
        }
      }
    }
    String _string = styledString.toString();
    ICompletionProposal completionProposal = this.createCompletionProposal(_string, styledString, VaryGrammarProposalProvider.funcionPrivada, context);
    acceptor.accept(completionProposal);
  }
  
  public void complete_SentenciasAux_Modulos(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Modulo> modulos) {
    String procedimiento_literal = new String();
    for (final Modulo modulo : modulos) {
      Implementacion _implementacion = modulo.getImplementacion();
      EList<Subproceso> _funcion = _implementacion.getFuncion();
      for (final Subproceso subproceso : _funcion) {
        if ((subproceso instanceof Procedimiento)) {
          Procedimiento procedimiento = ((Procedimiento) subproceso);
          EList<CabeceraSubproceso> _exporta_funciones = modulo.getExporta_funciones();
          for (final CabeceraSubproceso cabeceraFuncion : _exporta_funciones) {
            boolean _and = false;
            String _nombre = cabeceraFuncion.getNombre();
            String _nombre_1 = procedimiento.getNombre();
            boolean _equals = _nombre.equals(_nombre_1);
            if (!_equals) {
              _and = false;
            } else {
              EList<ParametroFuncion> _parametrofuncion = cabeceraFuncion.getParametrofuncion();
              int _size = _parametrofuncion.size();
              EList<ParametroFuncion> _parametrofuncion_1 = procedimiento.getParametrofuncion();
              int _size_1 = _parametrofuncion_1.size();
              boolean _equals_1 = (_size == _size_1);
              _and = _equals_1;
            }
            if (_and) {
              String _nombre_2 = procedimiento.getNombre();
              String _plus = (_nombre_2 + "(");
              StyledString styledString = new StyledString(_plus);
              String _nombre_3 = procedimiento.getNombre();
              String _plus_1 = (_nombre_3 + "(");
              procedimiento_literal = _plus_1;
              EList<ParametroFuncion> _parametrofuncion_2 = procedimiento.getParametrofuncion();
              int _size_2 = _parametrofuncion_2.size();
              boolean _equals_2 = (_size_2 == 0);
              if (_equals_2) {
                styledString.append(")");
                procedimiento_literal = (procedimiento_literal + ")");
              } else {
                EList<ParametroFuncion> _parametrofuncion_3 = procedimiento.getParametrofuncion();
                for (final ParametroFuncion p : _parametrofuncion_3) {
                  EList<ParametroFuncion> _parametrofuncion_4 = procedimiento.getParametrofuncion();
                  int _indexOf = _parametrofuncion_4.indexOf(p);
                  EList<ParametroFuncion> _parametrofuncion_5 = procedimiento.getParametrofuncion();
                  int _size_3 = _parametrofuncion_5.size();
                  int _minus = (_size_3 - 1);
                  boolean _notEquals = (_indexOf != _minus);
                  if (_notEquals) {
                    Variable _variable = p.getVariable();
                    String _nombre_4 = _variable.getNombre();
                    String _plus_2 = (_nombre_4 + ",");
                    styledString.append(_plus_2);
                    Variable _variable_1 = p.getVariable();
                    String _nombre_5 = _variable_1.getNombre();
                    String _plus_3 = (procedimiento_literal + _nombre_5);
                    String _plus_4 = (_plus_3 + ",");
                    procedimiento_literal = _plus_4;
                  } else {
                    Variable _variable_2 = p.getVariable();
                    String _nombre_6 = _variable_2.getNombre();
                    String _plus_5 = (_nombre_6 + ")");
                    styledString.append(_plus_5);
                    Variable _variable_3 = p.getVariable();
                    String _nombre_7 = _variable_3.getNombre();
                    String _plus_6 = (procedimiento_literal + _nombre_7);
                    String _plus_7 = (_plus_6 + ")");
                    procedimiento_literal = _plus_7;
                  }
                }
              }
              String _nombre_8 = modulo.getNombre();
              String _plus_8 = (" - " + _nombre_8);
              StyledString styledStringAux = new StyledString(_plus_8);
              int _length = styledStringAux.length();
              styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
              styledString.append(styledStringAux);
              ICompletionProposal completionProposal = this.createCompletionProposal(procedimiento_literal, styledString, VaryGrammarProposalProvider.typesClassics, context);
              acceptor.accept(completionProposal);
            }
          }
        }
      }
    }
  }
  
  @Override
  public void completeFunciones_Operadores(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _currentModel = context.getCurrentModel();
      LlamadaFuncion llamadaFuncion = ((LlamadaFuncion) _currentModel);
      Procedimiento procedimiento = EcoreUtil2.<Procedimiento>getContainerOfType(llamadaFuncion, Procedimiento.class);
      Funcion funcion = EcoreUtil2.<Funcion>getContainerOfType(llamadaFuncion, Funcion.class);
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      EList<Declaracion> _global = algoritmo.getGlobal();
      this.completeAsignacionNormal_OperadorAux(context, acceptor, _global);
      boolean _and = false;
      boolean _equals = Objects.equal(procedimiento, null);
      if (!_equals) {
        _and = false;
      } else {
        boolean _equals_1 = Objects.equal(funcion, null);
        _and = _equals_1;
      }
      if (_and) {
        Inicio _tiene = algoritmo.getTiene();
        EList<Declaracion> _declaracion = _tiene.getDeclaracion();
        this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion);
      } else {
        boolean _notEquals = (!Objects.equal(procedimiento, null));
        if (_notEquals) {
          EList<Declaracion> _declaracion_1 = procedimiento.getDeclaracion();
          this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_1);
          EList<ParametroFuncion> _parametrofuncion = procedimiento.getParametrofuncion();
          this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion);
        } else {
          boolean _notEquals_1 = (!Objects.equal(funcion, null));
          if (_notEquals_1) {
            EList<Declaracion> _declaracion_2 = funcion.getDeclaracion();
            this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_2);
            EList<ParametroFuncion> _parametrofuncion_1 = funcion.getParametrofuncion();
            this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_1);
          }
        }
      }
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        EObject _currentModel_1 = context.getCurrentModel();
        LlamadaFuncion llamadaFuncion_1 = ((LlamadaFuncion) _currentModel_1);
        Procedimiento procedimiento_1 = EcoreUtil2.<Procedimiento>getContainerOfType(llamadaFuncion_1, Procedimiento.class);
        Funcion funcion_1 = EcoreUtil2.<Funcion>getContainerOfType(llamadaFuncion_1, Funcion.class);
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<Declaracion> _global_1 = _implementacion.getGlobal();
        this.completeAsignacionNormal_OperadorAux(context, acceptor, _global_1);
        boolean _notEquals_2 = (!Objects.equal(procedimiento_1, null));
        if (_notEquals_2) {
          EList<Declaracion> _declaracion_3 = procedimiento_1.getDeclaracion();
          this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_3);
          EList<ParametroFuncion> _parametrofuncion_2 = procedimiento_1.getParametrofuncion();
          this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_2);
        } else {
          boolean _notEquals_3 = (!Objects.equal(funcion_1, null));
          if (_notEquals_3) {
            EList<Declaracion> _declaracion_4 = funcion_1.getDeclaracion();
            this.completeAsignacionNormal_OperadorAux(context, acceptor, _declaracion_4);
            EList<ParametroFuncion> _parametrofuncion_3 = funcion_1.getParametrofuncion();
            this.completeAsignacionNormal_OperadorParametrosSubproceso(context, acceptor, _parametrofuncion_3);
          }
        }
      }
    }
  }
  
  @Override
  public void completeCampoRegistro_Nombre_campo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _currentModel = context.getCurrentModel();
      if ((_currentModel instanceof ValorRegistro)) {
        EObject _currentModel_1 = context.getCurrentModel();
        ValorRegistro valorRegistro = ((ValorRegistro) _currentModel_1);
        Procedimiento procedimiento = EcoreUtil2.<Procedimiento>getContainerOfType(valorRegistro, Procedimiento.class);
        Funcion funcion = EcoreUtil2.<Funcion>getContainerOfType(valorRegistro, Funcion.class);
        EObject _rootModel_1 = context.getRootModel();
        Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
        boolean _and = false;
        boolean _equals = Objects.equal(procedimiento, null);
        if (!_equals) {
          _and = false;
        } else {
          boolean _equals_1 = Objects.equal(funcion, null);
          _and = _equals_1;
        }
        if (_and) {
          Inicio _tiene = algoritmo.getTiene();
          EList<Declaracion> declaraciones = _tiene.getDeclaracion();
          EList<Declaracion> _global = algoritmo.getGlobal();
          declaraciones.addAll(_global);
          EList<TipoComplejo> complejos = algoritmo.getTipocomplejo();
          String _nombre_registro = valorRegistro.getNombre_registro();
          this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones, complejos, _nombre_registro);
          String _nombre_registro_1 = valorRegistro.getNombre_registro();
          EList<Modulo> _importaciones = algoritmo.getImportaciones();
          this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones, complejos, _nombre_registro_1, _importaciones);
        } else {
          boolean _notEquals = (!Objects.equal(procedimiento, null));
          if (_notEquals) {
            EList<Declaracion> declaraciones_1 = procedimiento.getDeclaracion();
            EList<Declaracion> _global_1 = algoritmo.getGlobal();
            declaraciones_1.addAll(_global_1);
            EList<TipoComplejo> complejos_1 = algoritmo.getTipocomplejo();
            String _nombre_registro_2 = valorRegistro.getNombre_registro();
            this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_1, complejos_1, _nombre_registro_2);
            String _nombre_registro_3 = valorRegistro.getNombre_registro();
            EList<Modulo> _importaciones_1 = algoritmo.getImportaciones();
            this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_1, complejos_1, _nombre_registro_3, _importaciones_1);
          } else {
            EList<Declaracion> declaraciones_2 = funcion.getDeclaracion();
            EList<Declaracion> _global_2 = algoritmo.getGlobal();
            declaraciones_2.addAll(_global_2);
            EList<TipoComplejo> complejos_2 = algoritmo.getTipocomplejo();
            String _nombre_registro_4 = valorRegistro.getNombre_registro();
            this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_2, complejos_2, _nombre_registro_4);
            String _nombre_registro_5 = valorRegistro.getNombre_registro();
            EList<Modulo> _importaciones_2 = algoritmo.getImportaciones();
            this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_2, complejos_2, _nombre_registro_5, _importaciones_2);
          }
        }
      } else {
        EObject _currentModel_2 = context.getCurrentModel();
        if ((_currentModel_2 instanceof ValorVector)) {
          EObject _currentModel_3 = context.getCurrentModel();
          ValorVector valorVector = ((ValorVector) _currentModel_3);
          Procedimiento procedimiento_1 = EcoreUtil2.<Procedimiento>getContainerOfType(valorVector, Procedimiento.class);
          Funcion funcion_1 = EcoreUtil2.<Funcion>getContainerOfType(valorVector, Funcion.class);
          EObject _rootModel_2 = context.getRootModel();
          Algoritmo algoritmo_1 = ((Algoritmo) _rootModel_2);
          boolean _and_1 = false;
          boolean _equals_2 = Objects.equal(procedimiento_1, null);
          if (!_equals_2) {
            _and_1 = false;
          } else {
            boolean _equals_3 = Objects.equal(funcion_1, null);
            _and_1 = _equals_3;
          }
          if (_and_1) {
            Inicio _tiene_1 = algoritmo_1.getTiene();
            EList<Declaracion> declaraciones_3 = _tiene_1.getDeclaracion();
            EList<Declaracion> _global_3 = algoritmo_1.getGlobal();
            declaraciones_3.addAll(_global_3);
            EList<TipoComplejo> complejos_3 = algoritmo_1.getTipocomplejo();
            String _nombre_vector = valorVector.getNombre_vector();
            this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_3, complejos_3, _nombre_vector);
            String _nombre_vector_1 = valorVector.getNombre_vector();
            EList<Modulo> _importaciones_3 = algoritmo_1.getImportaciones();
            this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_3, complejos_3, _nombre_vector_1, _importaciones_3);
          } else {
            boolean _notEquals_1 = (!Objects.equal(procedimiento_1, null));
            if (_notEquals_1) {
              EList<Declaracion> declaraciones_4 = procedimiento_1.getDeclaracion();
              EList<Declaracion> _global_4 = algoritmo_1.getGlobal();
              declaraciones_4.addAll(_global_4);
              EList<TipoComplejo> complejos_4 = algoritmo_1.getTipocomplejo();
              String _nombre_vector_2 = valorVector.getNombre_vector();
              this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_4, complejos_4, _nombre_vector_2);
              String _nombre_vector_3 = valorVector.getNombre_vector();
              EList<Modulo> _importaciones_4 = algoritmo_1.getImportaciones();
              this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_4, complejos_4, _nombre_vector_3, _importaciones_4);
            } else {
              EList<Declaracion> declaraciones_5 = funcion_1.getDeclaracion();
              EList<Declaracion> _global_5 = algoritmo_1.getGlobal();
              declaraciones_5.addAll(_global_5);
              EList<TipoComplejo> complejos_5 = algoritmo_1.getTipocomplejo();
              String _nombre_vector_4 = valorVector.getNombre_vector();
              this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_5, complejos_5, _nombre_vector_4);
              String _nombre_vector_5 = valorVector.getNombre_vector();
              EList<Modulo> _importaciones_5 = algoritmo_1.getImportaciones();
              this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_5, complejos_5, _nombre_vector_5, _importaciones_5);
            }
          }
        } else {
          EObject _currentModel_4 = context.getCurrentModel();
          if ((_currentModel_4 instanceof ValorMatriz)) {
            EObject _currentModel_5 = context.getCurrentModel();
            ValorMatriz valorMatriz = ((ValorMatriz) _currentModel_5);
            Procedimiento procedimiento_2 = EcoreUtil2.<Procedimiento>getContainerOfType(valorMatriz, Procedimiento.class);
            Funcion funcion_2 = EcoreUtil2.<Funcion>getContainerOfType(valorMatriz, Funcion.class);
            EObject _rootModel_3 = context.getRootModel();
            Algoritmo algoritmo_2 = ((Algoritmo) _rootModel_3);
            boolean _and_2 = false;
            boolean _equals_4 = Objects.equal(procedimiento_2, null);
            if (!_equals_4) {
              _and_2 = false;
            } else {
              boolean _equals_5 = Objects.equal(funcion_2, null);
              _and_2 = _equals_5;
            }
            if (_and_2) {
              Inicio _tiene_2 = algoritmo_2.getTiene();
              EList<Declaracion> declaraciones_6 = _tiene_2.getDeclaracion();
              EList<Declaracion> _global_6 = algoritmo_2.getGlobal();
              declaraciones_6.addAll(_global_6);
              EList<TipoComplejo> complejos_6 = algoritmo_2.getTipocomplejo();
              String _nombre_matriz = valorMatriz.getNombre_matriz();
              this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_6, complejos_6, _nombre_matriz);
              String _nombre_matriz_1 = valorMatriz.getNombre_matriz();
              EList<Modulo> _importaciones_6 = algoritmo_2.getImportaciones();
              this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_6, complejos_6, _nombre_matriz_1, _importaciones_6);
            } else {
              boolean _notEquals_2 = (!Objects.equal(procedimiento_2, null));
              if (_notEquals_2) {
                EList<Declaracion> declaraciones_7 = procedimiento_2.getDeclaracion();
                EList<Declaracion> _global_7 = algoritmo_2.getGlobal();
                declaraciones_7.addAll(_global_7);
                EList<TipoComplejo> complejos_7 = algoritmo_2.getTipocomplejo();
                String _nombre_matriz_2 = valorMatriz.getNombre_matriz();
                this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_7, complejos_7, _nombre_matriz_2);
                String _nombre_matriz_3 = valorMatriz.getNombre_matriz();
                EList<Modulo> _importaciones_7 = algoritmo_2.getImportaciones();
                this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_7, complejos_7, _nombre_matriz_3, _importaciones_7);
              } else {
                EList<Declaracion> declaraciones_8 = funcion_2.getDeclaracion();
                EList<Declaracion> _global_8 = algoritmo_2.getGlobal();
                declaraciones_8.addAll(_global_8);
                EList<TipoComplejo> complejos_8 = algoritmo_2.getTipocomplejo();
                String _nombre_matriz_4 = valorMatriz.getNombre_matriz();
                this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_8, complejos_8, _nombre_matriz_4);
                String _nombre_matriz_5 = valorMatriz.getNombre_matriz();
                EList<Modulo> _importaciones_8 = algoritmo_2.getImportaciones();
                this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_8, complejos_8, _nombre_matriz_5, _importaciones_8);
              }
            }
          }
        }
      }
    } else {
      EObject _rootModel_4 = context.getRootModel();
      if ((_rootModel_4 instanceof Modulo)) {
        EObject _rootModel_5 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_5);
        EObject _currentModel_6 = context.getCurrentModel();
        if ((_currentModel_6 instanceof ValorRegistro)) {
          EObject _currentModel_7 = context.getCurrentModel();
          ValorRegistro valorRegistro_1 = ((ValorRegistro) _currentModel_7);
          Procedimiento procedimiento_3 = EcoreUtil2.<Procedimiento>getContainerOfType(valorRegistro_1, Procedimiento.class);
          Funcion funcion_3 = EcoreUtil2.<Funcion>getContainerOfType(valorRegistro_1, Funcion.class);
          boolean _notEquals_3 = (!Objects.equal(procedimiento_3, null));
          if (_notEquals_3) {
            EList<Declaracion> declaraciones_9 = procedimiento_3.getDeclaracion();
            Implementacion _implementacion = modulo.getImplementacion();
            EList<Declaracion> _global_9 = _implementacion.getGlobal();
            declaraciones_9.addAll(_global_9);
            Implementacion _implementacion_1 = modulo.getImplementacion();
            EList<TipoComplejo> complejos_9 = _implementacion_1.getTipocomplejo();
            String _nombre_registro_6 = valorRegistro_1.getNombre_registro();
            this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_9, complejos_9, _nombre_registro_6);
            String _nombre_registro_7 = valorRegistro_1.getNombre_registro();
            EList<Modulo> _importaciones_9 = modulo.getImportaciones();
            this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_9, complejos_9, _nombre_registro_7, _importaciones_9);
          } else {
            EList<Declaracion> declaraciones_10 = funcion_3.getDeclaracion();
            Implementacion _implementacion_2 = modulo.getImplementacion();
            EList<Declaracion> _global_10 = _implementacion_2.getGlobal();
            declaraciones_10.addAll(_global_10);
            Implementacion _implementacion_3 = modulo.getImplementacion();
            EList<TipoComplejo> complejos_10 = _implementacion_3.getTipocomplejo();
            String _nombre_registro_8 = valorRegistro_1.getNombre_registro();
            this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_10, complejos_10, _nombre_registro_8);
            String _nombre_registro_9 = valorRegistro_1.getNombre_registro();
            EList<Modulo> _importaciones_10 = modulo.getImportaciones();
            this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_10, complejos_10, _nombre_registro_9, _importaciones_10);
          }
        } else {
          EObject _currentModel_8 = context.getCurrentModel();
          if ((_currentModel_8 instanceof ValorVector)) {
            EObject _currentModel_9 = context.getCurrentModel();
            ValorVector valorVector_1 = ((ValorVector) _currentModel_9);
            Procedimiento procedimiento_4 = EcoreUtil2.<Procedimiento>getContainerOfType(valorVector_1, Procedimiento.class);
            Funcion funcion_4 = EcoreUtil2.<Funcion>getContainerOfType(valorVector_1, Funcion.class);
            boolean _notEquals_4 = (!Objects.equal(procedimiento_4, null));
            if (_notEquals_4) {
              EList<Declaracion> declaraciones_11 = procedimiento_4.getDeclaracion();
              Implementacion _implementacion_4 = modulo.getImplementacion();
              EList<Declaracion> _global_11 = _implementacion_4.getGlobal();
              declaraciones_11.addAll(_global_11);
              Implementacion _implementacion_5 = modulo.getImplementacion();
              EList<TipoComplejo> complejos_11 = _implementacion_5.getTipocomplejo();
              String _nombre_vector_6 = valorVector_1.getNombre_vector();
              this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_11, complejos_11, _nombre_vector_6);
              String _nombre_vector_7 = valorVector_1.getNombre_vector();
              EList<Modulo> _importaciones_11 = modulo.getImportaciones();
              this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_11, complejos_11, _nombre_vector_7, _importaciones_11);
            } else {
              EList<Declaracion> declaraciones_12 = funcion_4.getDeclaracion();
              Implementacion _implementacion_6 = modulo.getImplementacion();
              EList<Declaracion> _global_12 = _implementacion_6.getGlobal();
              declaraciones_12.addAll(_global_12);
              Implementacion _implementacion_7 = modulo.getImplementacion();
              EList<TipoComplejo> complejos_12 = _implementacion_7.getTipocomplejo();
              String _nombre_vector_8 = valorVector_1.getNombre_vector();
              this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_12, complejos_12, _nombre_vector_8);
              String _nombre_vector_9 = valorVector_1.getNombre_vector();
              EList<Modulo> _importaciones_12 = modulo.getImportaciones();
              this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_12, complejos_12, _nombre_vector_9, _importaciones_12);
            }
          } else {
            EObject _currentModel_10 = context.getCurrentModel();
            if ((_currentModel_10 instanceof ValorMatriz)) {
              EObject _currentModel_11 = context.getCurrentModel();
              ValorMatriz valorMatriz_1 = ((ValorMatriz) _currentModel_11);
              Procedimiento procedimiento_5 = EcoreUtil2.<Procedimiento>getContainerOfType(valorMatriz_1, Procedimiento.class);
              Funcion funcion_5 = EcoreUtil2.<Funcion>getContainerOfType(valorMatriz_1, Funcion.class);
              boolean _notEquals_5 = (!Objects.equal(procedimiento_5, null));
              if (_notEquals_5) {
                EList<Declaracion> declaraciones_13 = procedimiento_5.getDeclaracion();
                Implementacion _implementacion_8 = modulo.getImplementacion();
                EList<Declaracion> _global_13 = _implementacion_8.getGlobal();
                declaraciones_13.addAll(_global_13);
                Implementacion _implementacion_9 = modulo.getImplementacion();
                EList<TipoComplejo> complejos_13 = _implementacion_9.getTipocomplejo();
                String _nombre_matriz_6 = valorMatriz_1.getNombre_matriz();
                this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_13, complejos_13, _nombre_matriz_6);
                String _nombre_matriz_7 = valorMatriz_1.getNombre_matriz();
                EList<Modulo> _importaciones_13 = modulo.getImportaciones();
                this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_13, complejos_13, _nombre_matriz_7, _importaciones_13);
              } else {
                EList<Declaracion> declaraciones_14 = funcion_5.getDeclaracion();
                Implementacion _implementacion_10 = modulo.getImplementacion();
                EList<Declaracion> _global_14 = _implementacion_10.getGlobal();
                declaraciones_14.addAll(_global_14);
                Implementacion _implementacion_11 = modulo.getImplementacion();
                EList<TipoComplejo> complejos_14 = _implementacion_11.getTipocomplejo();
                String _nombre_matriz_8 = valorMatriz_1.getNombre_matriz();
                this.completeCampoRegistro_Nombre_campoAux(context, acceptor, declaraciones_14, complejos_14, _nombre_matriz_8);
                String _nombre_matriz_9 = valorMatriz_1.getNombre_matriz();
                EList<Modulo> _importaciones_14 = modulo.getImportaciones();
                this.completeCampoRegistro_Nombre_CampoAux_Modulos(context, acceptor, declaraciones_14, complejos_14, _nombre_matriz_9, _importaciones_14);
              }
            }
          }
        }
      }
    }
  }
  
  public void completeCampoRegistro_Nombre_campoAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Declaracion> declaraciones, final List<TipoComplejo> complejos, final String nombreVariable) {
    String tipo = new String();
    EObject _currentModel = context.getCurrentModel();
    if ((_currentModel instanceof ValorRegistro)) {
      for (final Declaracion dec : declaraciones) {
        if ((dec instanceof DeclaracionPropia)) {
          DeclaracionPropia decPropia = ((DeclaracionPropia) dec);
          EList<Variable> _variable = decPropia.getVariable();
          for (final Variable v : _variable) {
            String _nombre = v.getNombre();
            boolean _equals = _nombre.equals(nombreVariable);
            if (_equals) {
              String _tipo = decPropia.getTipo();
              tipo = _tipo;
            }
          }
        } else {
          DeclaracionVariable decVariable = ((DeclaracionVariable) dec);
          EList<Variable> _variable_1 = decVariable.getVariable();
          for (final Variable v_1 : _variable_1) {
            String _nombre_1 = v_1.getNombre();
            boolean _equals_1 = _nombre_1.equals(nombreVariable);
            if (_equals_1) {
              String _tipo_1 = decVariable.getTipo();
              tipo = _tipo_1;
            }
          }
        }
      }
    } else {
      boolean _or = false;
      EObject _currentModel_1 = context.getCurrentModel();
      if ((_currentModel_1 instanceof ValorVector)) {
        _or = true;
      } else {
        EObject _currentModel_2 = context.getCurrentModel();
        _or = (_currentModel_2 instanceof ValorMatriz);
      }
      if (_or) {
        for (final Declaracion dec_1 : declaraciones) {
          if ((dec_1 instanceof DeclaracionPropia)) {
            DeclaracionPropia decPropia_1 = ((DeclaracionPropia) dec_1);
            EList<Variable> _variable_2 = decPropia_1.getVariable();
            for (final Variable v_2 : _variable_2) {
              String _nombre_2 = v_2.getNombre();
              boolean _equals_2 = _nombre_2.equals(nombreVariable);
              if (_equals_2) {
                String _tipo_2 = decPropia_1.getTipo();
                tipo = _tipo_2;
              }
            }
          } else {
            DeclaracionVariable decVariable_1 = ((DeclaracionVariable) dec_1);
            EList<Variable> _variable_3 = decVariable_1.getVariable();
            for (final Variable v_3 : _variable_3) {
              String _nombre_3 = v_3.getNombre();
              boolean _equals_3 = _nombre_3.equals(nombreVariable);
              if (_equals_3) {
                String _tipo_3 = decVariable_1.getTipo();
                tipo = _tipo_3;
              }
            }
          }
        }
        for (final TipoComplejo complejo : complejos) {
          if ((complejo instanceof Vector)) {
            Vector vector = ((Vector) complejo);
            String _nombre_4 = vector.getNombre();
            boolean _equals_4 = _nombre_4.equals(tipo);
            if (_equals_4) {
              Tipo _tipo_4 = vector.getTipo();
              if ((_tipo_4 instanceof TipoDefinido)) {
                Tipo _tipo_5 = vector.getTipo();
                TipoDefinido tipoDefinido = ((TipoDefinido) _tipo_5);
                String _tipo_6 = tipoDefinido.getTipo();
                tipo = _tipo_6;
              } else {
                Tipo _tipo_7 = vector.getTipo();
                TipoExistente tipoExistente = ((TipoExistente) _tipo_7);
                String _tipo_8 = tipoExistente.getTipo();
                tipo = _tipo_8;
              }
            }
          } else {
            if ((complejo instanceof Matriz)) {
              Matriz matriz = ((Matriz) complejo);
              String _nombre_5 = matriz.getNombre();
              boolean _equals_5 = _nombre_5.equals(tipo);
              if (_equals_5) {
                Tipo _tipo_9 = matriz.getTipo();
                if ((_tipo_9 instanceof TipoDefinido)) {
                  Tipo _tipo_10 = matriz.getTipo();
                  TipoDefinido tipoDefinido_1 = ((TipoDefinido) _tipo_10);
                  String _tipo_11 = tipoDefinido_1.getTipo();
                  tipo = _tipo_11;
                } else {
                  Tipo _tipo_12 = matriz.getTipo();
                  TipoExistente tipoExistente_1 = ((TipoExistente) _tipo_12);
                  String _tipo_13 = tipoExistente_1.getTipo();
                  tipo = _tipo_13;
                }
              }
            }
          }
        }
      }
    }
    for (final TipoComplejo complejo_1 : complejos) {
      if ((complejo_1 instanceof Registro)) {
        Registro registro = ((Registro) complejo_1);
        String _nombre_6 = registro.getNombre();
        boolean _equals_6 = _nombre_6.equals(tipo);
        if (_equals_6) {
          EList<Declaracion> _variable_4 = registro.getVariable();
          for (final Declaracion dec_2 : _variable_4) {
            if ((dec_2 instanceof DeclaracionPropia)) {
              DeclaracionPropia decPropia_2 = ((DeclaracionPropia) dec_2);
              EList<Variable> _variable_5 = decPropia_2.getVariable();
              for (final Variable v_4 : _variable_5) {
                {
                  String _nombre_7 = v_4.getNombre();
                  String _plus = (_nombre_7 + " : ");
                  String _tipo_14 = decPropia_2.getTipo();
                  String _plus_1 = (_plus + _tipo_14);
                  String _plus_2 = (_plus_1 + " : ");
                  String _plus_3 = (_plus_2 + tipo);
                  StyledString styledString = new StyledString(_plus_3);
                  String _nombre_8 = v_4.getNombre();
                  ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_8, styledString, VaryGrammarProposalProvider.fieldRegistry, context);
                  acceptor.accept(completionProposal);
                }
              }
            } else {
              DeclaracionVariable decVariable_2 = ((DeclaracionVariable) dec_2);
              EList<Variable> _variable_6 = decVariable_2.getVariable();
              for (final Variable v_5 : _variable_6) {
                {
                  String _nombre_7 = v_5.getNombre();
                  String _plus = (_nombre_7 + " : ");
                  String _tipo_14 = decVariable_2.getTipo();
                  String _plus_1 = (_plus + _tipo_14);
                  String _plus_2 = (_plus_1 + " : ");
                  String _plus_3 = (_plus_2 + tipo);
                  StyledString styledString = new StyledString(_plus_3);
                  String _nombre_8 = v_5.getNombre();
                  ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_8, styledString, VaryGrammarProposalProvider.fieldRegistry, context);
                  acceptor.accept(completionProposal);
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void completeCampoRegistro_Nombre_CampoAux_Modulos(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Declaracion> declaraciones, final List<TipoComplejo> complejos, final String nombreVariable, final List<Modulo> modulos) {
    for (final Modulo modulo : modulos) {
      {
        String tipo = new String();
        EObject _currentModel = context.getCurrentModel();
        if ((_currentModel instanceof ValorRegistro)) {
          for (final Declaracion dec : declaraciones) {
            if ((dec instanceof DeclaracionPropia)) {
              DeclaracionPropia decPropia = ((DeclaracionPropia) dec);
              EList<Variable> _variable = decPropia.getVariable();
              for (final Variable v : _variable) {
                String _nombre = v.getNombre();
                boolean _equals = _nombre.equals(nombreVariable);
                if (_equals) {
                  String _tipo = decPropia.getTipo();
                  tipo = _tipo;
                }
              }
            } else {
              DeclaracionVariable decVariable = ((DeclaracionVariable) dec);
              EList<Variable> _variable_1 = decVariable.getVariable();
              for (final Variable v_1 : _variable_1) {
                String _nombre_1 = v_1.getNombre();
                boolean _equals_1 = _nombre_1.equals(nombreVariable);
                if (_equals_1) {
                  String _tipo_1 = decVariable.getTipo();
                  tipo = _tipo_1;
                }
              }
            }
          }
        } else {
          boolean _or = false;
          EObject _currentModel_1 = context.getCurrentModel();
          if ((_currentModel_1 instanceof ValorVector)) {
            _or = true;
          } else {
            EObject _currentModel_2 = context.getCurrentModel();
            _or = (_currentModel_2 instanceof ValorMatriz);
          }
          if (_or) {
            for (final Declaracion dec_1 : declaraciones) {
              if ((dec_1 instanceof DeclaracionPropia)) {
                DeclaracionPropia decPropia_1 = ((DeclaracionPropia) dec_1);
                EList<Variable> _variable_2 = decPropia_1.getVariable();
                for (final Variable v_2 : _variable_2) {
                  String _nombre_2 = v_2.getNombre();
                  boolean _equals_2 = _nombre_2.equals(nombreVariable);
                  if (_equals_2) {
                    String _tipo_2 = decPropia_1.getTipo();
                    tipo = _tipo_2;
                  }
                }
              } else {
                DeclaracionVariable decVariable_1 = ((DeclaracionVariable) dec_1);
                EList<Variable> _variable_3 = decVariable_1.getVariable();
                for (final Variable v_3 : _variable_3) {
                  String _nombre_3 = v_3.getNombre();
                  boolean _equals_3 = _nombre_3.equals(nombreVariable);
                  if (_equals_3) {
                    String _tipo_3 = decVariable_1.getTipo();
                    tipo = _tipo_3;
                  }
                }
              }
            }
            Implementacion _implementacion = modulo.getImplementacion();
            EList<TipoComplejo> _tipocomplejo = _implementacion.getTipocomplejo();
            for (final TipoComplejo complejo : _tipocomplejo) {
              boolean _contains = complejos.contains(complejo);
              boolean _not = (!_contains);
              if (_not) {
                if ((complejo instanceof Vector)) {
                  Vector vector = ((Vector) complejo);
                  String _nombre_4 = vector.getNombre();
                  boolean _equals_4 = _nombre_4.equals(tipo);
                  if (_equals_4) {
                    Tipo _tipo_4 = vector.getTipo();
                    if ((_tipo_4 instanceof TipoDefinido)) {
                      Tipo _tipo_5 = vector.getTipo();
                      TipoDefinido tipoDefinido = ((TipoDefinido) _tipo_5);
                      String _tipo_6 = tipoDefinido.getTipo();
                      tipo = _tipo_6;
                    } else {
                      Tipo _tipo_7 = vector.getTipo();
                      TipoExistente tipoExistente = ((TipoExistente) _tipo_7);
                      String _tipo_8 = tipoExistente.getTipo();
                      tipo = _tipo_8;
                    }
                  }
                } else {
                  if ((complejo instanceof Matriz)) {
                    Matriz matriz = ((Matriz) complejo);
                    String _nombre_5 = matriz.getNombre();
                    boolean _equals_5 = _nombre_5.equals(tipo);
                    if (_equals_5) {
                      Tipo _tipo_9 = matriz.getTipo();
                      if ((_tipo_9 instanceof TipoDefinido)) {
                        Tipo _tipo_10 = matriz.getTipo();
                        TipoDefinido tipoDefinido_1 = ((TipoDefinido) _tipo_10);
                        String _tipo_11 = tipoDefinido_1.getTipo();
                        tipo = _tipo_11;
                      } else {
                        Tipo _tipo_12 = matriz.getTipo();
                        TipoExistente tipoExistente_1 = ((TipoExistente) _tipo_12);
                        String _tipo_13 = tipoExistente_1.getTipo();
                        tipo = _tipo_13;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        for (final TipoComplejo complejo_1 : complejos) {
          boolean _contains_1 = complejos.contains(complejo_1);
          boolean _not_1 = (!_contains_1);
          if (_not_1) {
            if ((complejo_1 instanceof Registro)) {
              Registro registro = ((Registro) complejo_1);
              String _nombre_6 = registro.getNombre();
              boolean _equals_6 = _nombre_6.equals(tipo);
              if (_equals_6) {
                EList<Declaracion> _variable_4 = registro.getVariable();
                for (final Declaracion dec_2 : _variable_4) {
                  if ((dec_2 instanceof DeclaracionPropia)) {
                    DeclaracionPropia decPropia_2 = ((DeclaracionPropia) dec_2);
                    EList<Variable> _variable_5 = decPropia_2.getVariable();
                    for (final Variable v_4 : _variable_5) {
                      {
                        String _nombre_7 = v_4.getNombre();
                        String _plus = (_nombre_7 + " : ");
                        String _tipo_14 = decPropia_2.getTipo();
                        String _plus_1 = (_plus + _tipo_14);
                        String _plus_2 = (_plus_1 + " : ");
                        String _plus_3 = (_plus_2 + tipo);
                        StyledString styledString = new StyledString(_plus_3);
                        String _nombre_8 = modulo.getNombre();
                        String _plus_4 = (" - " + _nombre_8);
                        StyledString styledStringAux = new StyledString(_plus_4);
                        int _length = styledStringAux.length();
                        styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
                        styledString.append(styledStringAux);
                        String _nombre_9 = v_4.getNombre();
                        ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_9, styledString, VaryGrammarProposalProvider.fieldRegistry, context);
                        acceptor.accept(completionProposal);
                      }
                    }
                  } else {
                    DeclaracionVariable decVariable_2 = ((DeclaracionVariable) dec_2);
                    EList<Variable> _variable_6 = decVariable_2.getVariable();
                    for (final Variable v_5 : _variable_6) {
                      {
                        String _nombre_7 = v_5.getNombre();
                        String _plus = (_nombre_7 + " : ");
                        String _tipo_14 = decVariable_2.getTipo();
                        String _plus_1 = (_plus + _tipo_14);
                        String _plus_2 = (_plus_1 + " : ");
                        String _plus_3 = (_plus_2 + tipo);
                        StyledString styledString = new StyledString(_plus_3);
                        String _nombre_8 = modulo.getNombre();
                        String _plus_4 = (" - " + _nombre_8);
                        StyledString styledStringAux = new StyledString(_plus_4);
                        int _length = styledStringAux.length();
                        styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
                        styledString.append(styledStringAux);
                        String _nombre_9 = v_5.getNombre();
                        ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_9, styledString, VaryGrammarProposalProvider.fieldRegistry, context);
                        acceptor.accept(completionProposal);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  @Override
  public void completeTipoDefinido_Tipo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      ArrayList<String> tiposLocales = new ArrayList<String>();
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      EList<TipoComplejo> _tipocomplejo = algoritmo.getTipocomplejo();
      ArrayList<String> _completeDeclaracionPropia_TipoAux = this.completeDeclaracionPropia_TipoAux(context, acceptor, _tipocomplejo, tiposLocales);
      tiposLocales = _completeDeclaracionPropia_TipoAux;
      EList<Modulo> _importaciones = algoritmo.getImportaciones();
      this.completeDeclaracionPropia_TipoModulos(context, acceptor, _importaciones, tiposLocales);
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        ArrayList<String> tiposLocales_1 = new ArrayList<String>();
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        Implementacion _implementacion = modulo.getImplementacion();
        EList<TipoComplejo> _tipocomplejo_1 = _implementacion.getTipocomplejo();
        ArrayList<String> _completeDeclaracionPropia_TipoAux_1 = this.completeDeclaracionPropia_TipoAux(context, acceptor, _tipocomplejo_1, tiposLocales_1);
        tiposLocales_1 = _completeDeclaracionPropia_TipoAux_1;
        EList<Modulo> _importaciones_1 = modulo.getImportaciones();
        this.completeDeclaracionPropia_TipoModulos(context, acceptor, _importaciones_1, tiposLocales_1);
      }
    }
  }
  
  @Override
  public void completeTipoExistente_Tipo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeDeclaracionVariable_TipoAux(context, acceptor);
  }
  
  @Override
  public void complete_TipoPaso(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ResourceBundle _bundle = this.readerKeywords.getBundle();
    String _string = _bundle.getString("KEYWORD_ENTRADA");
    StyledString styledString = new StyledString(_string);
    int _length = styledString.length();
    styledString.setStyle(0, _length, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_1 = this.readerKeywords.getBundle();
    String _string_1 = _bundle_1.getString("KEYWORD_ENTRADA");
    ICompletionProposal completionProposal = this.createCompletionProposal(_string_1, styledString, VaryGrammarProposalProvider.typesClassics, context);
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_2 = this.readerKeywords.getBundle();
    String _string_2 = _bundle_2.getString("KEYWORD_SALIDA");
    StyledString _styledString = new StyledString(_string_2);
    styledString = _styledString;
    int _length_1 = styledString.length();
    styledString.setStyle(0, _length_1, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_3 = this.readerKeywords.getBundle();
    String _string_3 = _bundle_3.getString("KEYWORD_SALIDA");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_string_3, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal;
    acceptor.accept(completionProposal);
    ResourceBundle _bundle_4 = this.readerKeywords.getBundle();
    String _string_4 = _bundle_4.getString("KEYWORD_ENTRADASALIDA");
    StyledString _styledString_1 = new StyledString(_string_4);
    styledString = _styledString_1;
    int _length_2 = styledString.length();
    styledString.setStyle(0, _length_2, StyledString.DECORATIONS_STYLER);
    ResourceBundle _bundle_5 = this.readerKeywords.getBundle();
    String _string_5 = _bundle_5.getString("KEYWORD_ENTRADASALIDA");
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal(_string_5, styledString, VaryGrammarProposalProvider.typesClassics, context);
    completionProposal = _createCompletionProposal_1;
    acceptor.accept(completionProposal);
  }
  
  public void completeVectorMatriz_Valor(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = context.getRootModel();
    if ((_rootModel instanceof Algoritmo)) {
      EObject _rootModel_1 = context.getRootModel();
      Algoritmo algoritmo = ((Algoritmo) _rootModel_1);
      ArrayList<String> constantesLocales = new ArrayList<String>();
      EList<Constantes> _constantes = algoritmo.getConstantes();
      for (final Constantes constante : _constantes) {
        {
          Variable _variable = constante.getVariable();
          String _nombre = _variable.getNombre();
          constantesLocales.add(_nombre);
          Variable _variable_1 = constante.getVariable();
          String _nombre_1 = _variable_1.getNombre();
          StyledString styledString = new StyledString(_nombre_1);
          Variable _variable_2 = constante.getVariable();
          String _nombre_2 = _variable_2.getNombre();
          ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_2, styledString, VaryGrammarProposalProvider.constPublic, context);
          acceptor.accept(completionProposal);
        }
      }
      EList<Modulo> _importaciones = algoritmo.getImportaciones();
      this.complete_ValorAux(context, acceptor, _importaciones, constantesLocales);
    } else {
      EObject _rootModel_2 = context.getRootModel();
      if ((_rootModel_2 instanceof Modulo)) {
        EObject _rootModel_3 = context.getRootModel();
        Modulo modulo = ((Modulo) _rootModel_3);
        ArrayList<String> constantesLocales_1 = new ArrayList<String>();
        Implementacion _implementacion = modulo.getImplementacion();
        EList<Constantes> _constantes_1 = _implementacion.getConstantes();
        for (final Constantes constante_1 : _constantes_1) {
          {
            Variable _variable = constante_1.getVariable();
            String _nombre = _variable.getNombre();
            constantesLocales_1.add(_nombre);
            Variable _variable_1 = constante_1.getVariable();
            String _nombre_1 = _variable_1.getNombre();
            StyledString styledString = new StyledString(_nombre_1);
            Variable _variable_2 = constante_1.getVariable();
            String _nombre_2 = _variable_2.getNombre();
            ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_2, styledString, VaryGrammarProposalProvider.constPublic, context);
            acceptor.accept(completionProposal);
          }
        }
        EList<Modulo> _importaciones_1 = modulo.getImportaciones();
        this.complete_ValorAux(context, acceptor, _importaciones_1, constantesLocales_1);
      }
    }
  }
  
  @Override
  public void completeVector_Valor(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeVectorMatriz_Valor(model, context, acceptor);
  }
  
  public void complete_ValorAux(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final List<Modulo> modulos, final List<String> constantesLocales) {
    for (final Modulo modulo : modulos) {
      Implementacion _implementacion = modulo.getImplementacion();
      EList<Constantes> _constantes = _implementacion.getConstantes();
      for (final Constantes constante : _constantes) {
        boolean _and = false;
        EList<String> _exporta_constantes = modulo.getExporta_constantes();
        Variable _variable = constante.getVariable();
        String _nombre = _variable.getNombre();
        boolean _contains = _exporta_constantes.contains(_nombre);
        if (!_contains) {
          _and = false;
        } else {
          Variable _variable_1 = constante.getVariable();
          String _nombre_1 = _variable_1.getNombre();
          boolean _contains_1 = constantesLocales.contains(_nombre_1);
          boolean _not = (!_contains_1);
          _and = _not;
        }
        if (_and) {
          Variable _variable_2 = constante.getVariable();
          String _nombre_2 = _variable_2.getNombre();
          StyledString styledString = new StyledString(_nombre_2);
          String _nombre_3 = modulo.getNombre();
          String _plus = (" - " + _nombre_3);
          StyledString styledStringAux = new StyledString(_plus);
          int _length = styledStringAux.length();
          styledStringAux.setStyle(0, _length, StyledString.QUALIFIER_STYLER);
          styledString.append(styledStringAux);
          Variable _variable_3 = constante.getVariable();
          String _nombre_4 = _variable_3.getNombre();
          ICompletionProposal completionProposal = this.createCompletionProposal(_nombre_4, styledString, VaryGrammarProposalProvider.constPublic, context);
          acceptor.accept(completionProposal);
        }
      }
    }
  }
  
  @Override
  public void completeMatriz_Valor(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeVectorMatriz_Valor(model, context, acceptor);
  }
}
