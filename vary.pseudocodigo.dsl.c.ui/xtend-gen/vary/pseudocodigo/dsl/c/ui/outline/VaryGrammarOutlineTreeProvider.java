/**
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.ui.outline;

import com.google.common.base.Objects;
import diagramapseudocodigo.Algoritmo;
import diagramapseudocodigo.Archivo;
import diagramapseudocodigo.Constante;
import diagramapseudocodigo.Declaracion;
import diagramapseudocodigo.Funcion;
import diagramapseudocodigo.Implementacion;
import diagramapseudocodigo.Inicio;
import diagramapseudocodigo.Matriz;
import diagramapseudocodigo.Modulo;
import diagramapseudocodigo.Procedimiento;
import diagramapseudocodigo.Registro;
import diagramapseudocodigo.Subproceso;
import diagramapseudocodigo.TipoComplejo;
import diagramapseudocodigo.Vector;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
@SuppressWarnings("all")
public class VaryGrammarOutlineTreeProvider extends DefaultOutlineTreeProvider {
  protected void _createChildren(final IOutlineNode parentNode, final Inicio modelElement) {
    EList<Declaracion> _declaraciones = modelElement.getDeclaraciones();
    for (final Declaracion declaracion : _declaraciones) {
      super._createChildren(parentNode, declaracion);
    }
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final Procedimiento modelElement) {
    EList<Declaracion> _declaraciones = modelElement.getDeclaraciones();
    for (final Declaracion declaracion : _declaraciones) {
      super._createChildren(parentNode, declaracion);
    }
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final Funcion modelElement) {
    EList<Declaracion> _declaraciones = modelElement.getDeclaraciones();
    for (final Declaracion declaracion : _declaraciones) {
      super._createChildren(parentNode, declaracion);
    }
  }
  
  protected Object _createChildren(final IOutlineNode parentNode, final Vector modelElement) {
    return null;
  }
  
  protected Object _createChildren(final IOutlineNode parentNode, final Matriz modelElement) {
    return null;
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final Registro modelElement) {
    EList<Declaracion> _variable = modelElement.getVariable();
    for (final Declaracion declaracion : _variable) {
      super._createChildren(parentNode, declaracion);
    }
  }
  
  protected Object _createChildren(final IOutlineNode parentNode, final Constante modelElement) {
    return null;
  }
  
  protected Object _createChildren(final IOutlineNode parentNode, final Archivo modelElement) {
    return null;
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final Algoritmo modelElement) {
    EList<Modulo> _importaciones = modelElement.getImportaciones();
    for (final Modulo modulo : _importaciones) {
      super._createNode(parentNode, modulo);
    }
    EList<Constante> _constantes = modelElement.getConstantes();
    for (final Constante constante : _constantes) {
      super._createNode(parentNode, constante);
    }
    EList<TipoComplejo> _complejos = modelElement.getComplejos();
    for (final TipoComplejo tipoComplejo : _complejos) {
      super._createNode(parentNode, tipoComplejo);
    }
    EList<Declaracion> _globales = modelElement.getGlobales();
    for (final Declaracion declaracion : _globales) {
      super._createChildren(parentNode, declaracion);
    }
    EList<Subproceso> _subprocesos = modelElement.getSubprocesos();
    for (final Subproceso subproceso : _subprocesos) {
      super._createNode(parentNode, subproceso);
    }
    Inicio _inicio = modelElement.getInicio();
    boolean _notEquals = (!Objects.equal(_inicio, null));
    if (_notEquals) {
      Inicio _inicio_1 = modelElement.getInicio();
      super._createNode(parentNode, _inicio_1);
    }
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final Modulo modelElement) {
    EList<Modulo> _importaciones = modelElement.getImportaciones();
    for (final Modulo modulo : _importaciones) {
      super._createNode(parentNode, modulo);
    }
    Implementacion _implementacion = modelElement.getImplementacion();
    EList<Constante> _constantes = _implementacion.getConstantes();
    for (final Constante constante : _constantes) {
      super._createNode(parentNode, constante);
    }
    Implementacion _implementacion_1 = modelElement.getImplementacion();
    EList<TipoComplejo> _complejos = _implementacion_1.getComplejos();
    for (final TipoComplejo tipoComplejo : _complejos) {
      super._createNode(parentNode, tipoComplejo);
    }
    Implementacion _implementacion_2 = modelElement.getImplementacion();
    EList<Declaracion> _globales = _implementacion_2.getGlobales();
    for (final Declaracion declaracion : _globales) {
      super._createChildren(parentNode, declaracion);
    }
    Implementacion _implementacion_3 = modelElement.getImplementacion();
    EList<Subproceso> _subprocesos = _implementacion_3.getSubprocesos();
    for (final Subproceso subproceso : _subprocesos) {
      super._createNode(parentNode, subproceso);
    }
  }
}
