/**
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import diagramapseudocodigo.Algoritmo;
import diagramapseudocodigo.Archivo;
import diagramapseudocodigo.CabeceraFuncion;
import diagramapseudocodigo.CabeceraProcedimiento;
import diagramapseudocodigo.CabeceraSubproceso;
import diagramapseudocodigo.Caracter;
import diagramapseudocodigo.ConstCadena;
import diagramapseudocodigo.Constantes;
import diagramapseudocodigo.Declaracion;
import diagramapseudocodigo.DeclaracionPropia;
import diagramapseudocodigo.DeclaracionVariable;
import diagramapseudocodigo.Enumerado;
import diagramapseudocodigo.Funcion;
import diagramapseudocodigo.Inicio;
import diagramapseudocodigo.Matriz;
import diagramapseudocodigo.Modulo;
import diagramapseudocodigo.NumeroDecimal;
import diagramapseudocodigo.NumeroEntero;
import diagramapseudocodigo.ParametroFuncion;
import diagramapseudocodigo.Procedimiento;
import diagramapseudocodigo.Registro;
import diagramapseudocodigo.Subrango;
import diagramapseudocodigo.SubrangoEnumerado;
import diagramapseudocodigo.SubrangoNumerico;
import diagramapseudocodigo.Tipo;
import diagramapseudocodigo.TipoComplejo;
import diagramapseudocodigo.TipoDefinido;
import diagramapseudocodigo.TipoExistente;
import diagramapseudocodigo.ValorBooleano;
import diagramapseudocodigo.Variable;
import diagramapseudocodigo.VariableID;
import diagramapseudocodigo.Vector;
import diagramapseudocodigo.booleano;
import diagramapseudocodigo.operacion;
import java.util.List;
import java.util.ResourceBundle;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ui.editor.utils.TextStyle;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.ui.label.StylerFactory;
import vary.pseudocodigo.dsl.c.keywords.ReadKeywords;
import vary.pseudocodigo.dsl.c.keywords.ReadKeywordsInterface;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class VaryGrammarLabelProvider extends DefaultEObjectLabelProvider {
  protected final ReadKeywordsInterface readerKeywords;
  
  @Inject
  protected StylerFactory stylerFactory;
  
  @Inject
  public VaryGrammarLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
    ReadKeywords _readKeywords = new ReadKeywords();
    this.readerKeywords = _readKeywords;
  }
  
  public VaryGrammarLabelProvider(final AdapterFactoryLabelProvider delegate, final String language) {
    super(delegate);
    vary.pseudocodigo.dsl.c.english.keywords.ReadKeywords _readKeywords = new vary.pseudocodigo.dsl.c.english.keywords.ReadKeywords();
    this.readerKeywords = _readKeywords;
  }
  
  protected TextStyle getAlgoritmoTextStyle() {
    TextStyle textStyle = new TextStyle();
    RGB _rGB = new RGB(220, 20, 60);
    textStyle.setColor(_rGB);
    textStyle.setStyle(SWT.ITALIC);
    return textStyle;
  }
  
  protected TextStyle getPrincipalesTextStyle() {
    TextStyle textStyle = new TextStyle();
    RGB _rGB = new RGB(0, 0, 139);
    textStyle.setColor(_rGB);
    textStyle.setStyle(SWT.ITALIC);
    return textStyle;
  }
  
  protected TextStyle getTiposTextStyle() {
    TextStyle textStyle = new TextStyle();
    RGB _rGB = new RGB(139, 0, 139);
    textStyle.setColor(_rGB);
    textStyle.setStyle(SWT.ITALIC);
    return textStyle;
  }
  
  protected TextStyle getDeclaracionTextStyle() {
    TextStyle textStyle = new TextStyle();
    RGB _rGB = new RGB(205, 155, 29);
    textStyle.setColor(_rGB);
    textStyle.setStyle(SWT.ITALIC);
    return textStyle;
  }
  
  public StyledString text(final Modulo modulo) {
    String _nombre = modulo.getNombre();
    TextStyle _algoritmoTextStyle = this.getAlgoritmoTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_algoritmoTextStyle);
    return new StyledString(_nombre, _createXtextStyleAdapterStyler);
  }
  
  public String image(final Modulo modulo) {
    return "modulo.gif";
  }
  
  public StyledString text(final Registro registro) {
    String _nombre = registro.getNombre();
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_nombre, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final Archivo archivo) {
    String tipo = new String();
    Tipo _tipo = archivo.getTipo();
    if ((_tipo instanceof TipoExistente)) {
      Tipo _tipo_1 = archivo.getTipo();
      TipoExistente tipoAux = ((TipoExistente) _tipo_1);
      String _tipo_2 = tipoAux.getTipo();
      tipo = _tipo_2;
    } else {
      Tipo _tipo_3 = archivo.getTipo();
      TipoDefinido tipoAux_1 = ((TipoDefinido) _tipo_3);
      String _tipo_4 = tipoAux_1.getTipo();
      tipo = _tipo_4;
    }
    String _nombre = archivo.getNombre();
    String _plus = (_nombre + " : ");
    String _plus_1 = (_plus + tipo);
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_plus_1, _createXtextStyleAdapterStyler);
  }
  
  public String image(final TipoComplejo tipoComplejo) {
    String _xblockexpression = null;
    {
      Modulo modulo = EcoreUtil2.<Modulo>getContainerOfType(tipoComplejo, Modulo.class);
      String _xifexpression = null;
      boolean _equals = Objects.equal(modulo, null);
      if (_equals) {
        _xifexpression = "typevariable_private.gif";
      } else {
        String _xblockexpression_1 = null;
        {
          String nombre = new String();
          if ((tipoComplejo instanceof Vector)) {
            Vector vector = ((Vector) tipoComplejo);
            String _nombre = vector.getNombre();
            nombre = _nombre;
          } else {
            if ((tipoComplejo instanceof Matriz)) {
              Matriz matriz = ((Matriz) tipoComplejo);
              String _nombre_1 = matriz.getNombre();
              nombre = _nombre_1;
            } else {
              if ((tipoComplejo instanceof Registro)) {
                Registro registro = ((Registro) tipoComplejo);
                String _nombre_2 = registro.getNombre();
                nombre = _nombre_2;
              } else {
                if ((tipoComplejo instanceof Enumerado)) {
                  Enumerado enumerado = ((Enumerado) tipoComplejo);
                  String _nombre_3 = enumerado.getNombre();
                  nombre = _nombre_3;
                } else {
                  if ((tipoComplejo instanceof Archivo)) {
                    Archivo archivo = ((Archivo) tipoComplejo);
                    String _nombre_4 = archivo.getNombre();
                    nombre = _nombre_4;
                  } else {
                    Subrango subrango = ((Subrango) tipoComplejo);
                    String _nombre_5 = subrango.getNombre();
                    nombre = _nombre_5;
                  }
                }
              }
            }
          }
          String _xifexpression_1 = null;
          EList<String> _exporta_tipos = modulo.getExporta_tipos();
          boolean _contains = _exporta_tipos.contains(nombre);
          if (_contains) {
            _xifexpression_1 = "typevariable_public.gif";
          } else {
            _xifexpression_1 = "typevariable_private.gif";
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public StyledString text(final Vector vector) {
    Tipo _tipo = vector.getTipo();
    if ((_tipo instanceof TipoExistente)) {
      Tipo _tipo_1 = vector.getTipo();
      TipoExistente tipo = ((TipoExistente) _tipo_1);
      operacion _valor = vector.getValor();
      if ((_valor instanceof NumeroEntero)) {
        operacion _valor_1 = vector.getValor();
        NumeroEntero indice = ((NumeroEntero) _valor_1);
        String _nombre = vector.getNombre();
        String _plus = (_nombre + "[");
        int _valor_2 = indice.getValor();
        String _plus_1 = (_plus + Integer.valueOf(_valor_2));
        String _plus_2 = (_plus_1 + "] : ");
        String _tipo_2 = tipo.getTipo();
        String _plus_3 = (_plus_2 + _tipo_2);
        String _plus_4 = (_plus_3 + " : ");
        String _plus_5 = (_plus_4 + tipo);
        TextStyle _tiposTextStyle = this.getTiposTextStyle();
        StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
        return new StyledString(_plus_5, _createXtextStyleAdapterStyler);
      } else {
        operacion _valor_3 = vector.getValor();
        VariableID indice_1 = ((VariableID) _valor_3);
        String _nombre_1 = vector.getNombre();
        String _plus_6 = (_nombre_1 + "[");
        String _nombre_2 = indice_1.getNombre();
        String _plus_7 = (_plus_6 + _nombre_2);
        String _plus_8 = (_plus_7 + "] : ");
        String _tipo_3 = tipo.getTipo();
        String _plus_9 = (_plus_8 + _tipo_3);
        TextStyle _tiposTextStyle_1 = this.getTiposTextStyle();
        StyledString.Styler _createXtextStyleAdapterStyler_1 = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle_1);
        return new StyledString(_plus_9, _createXtextStyleAdapterStyler_1);
      }
    } else {
      Tipo _tipo_4 = vector.getTipo();
      TipoDefinido tipo_1 = ((TipoDefinido) _tipo_4);
      operacion _valor_4 = vector.getValor();
      if ((_valor_4 instanceof NumeroEntero)) {
        operacion _valor_5 = vector.getValor();
        NumeroEntero indice_2 = ((NumeroEntero) _valor_5);
        String _nombre_3 = vector.getNombre();
        String _plus_10 = (_nombre_3 + "[");
        int _valor_6 = indice_2.getValor();
        String _plus_11 = (_plus_10 + Integer.valueOf(_valor_6));
        String _plus_12 = (_plus_11 + "] : ");
        String _tipo_5 = tipo_1.getTipo();
        String _plus_13 = (_plus_12 + _tipo_5);
        TextStyle _tiposTextStyle_2 = this.getTiposTextStyle();
        StyledString.Styler _createXtextStyleAdapterStyler_2 = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle_2);
        return new StyledString(_plus_13, _createXtextStyleAdapterStyler_2);
      } else {
        operacion _valor_7 = vector.getValor();
        VariableID indice_3 = ((VariableID) _valor_7);
        String _nombre_4 = vector.getNombre();
        String _plus_14 = (_nombre_4 + "[");
        String _nombre_5 = indice_3.getNombre();
        String _plus_15 = (_plus_14 + _nombre_5);
        String _plus_16 = (_plus_15 + "] : ");
        String _tipo_6 = tipo_1.getTipo();
        String _plus_17 = (_plus_16 + _tipo_6);
        TextStyle _tiposTextStyle_3 = this.getTiposTextStyle();
        StyledString.Styler _createXtextStyleAdapterStyler_3 = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle_3);
        return new StyledString(_plus_17, _createXtextStyleAdapterStyler_3);
      }
    }
  }
  
  public String image(final Constantes constante) {
    String _xblockexpression = null;
    {
      Modulo modulo = EcoreUtil2.<Modulo>getContainerOfType(constante, Modulo.class);
      String _xifexpression = null;
      boolean _equals = Objects.equal(modulo, null);
      if (_equals) {
        _xifexpression = "compare_field_private.gif";
      } else {
        String _xifexpression_1 = null;
        EList<String> _exporta_constantes = modulo.getExporta_constantes();
        Variable _variable = constante.getVariable();
        String _nombre = _variable.getNombre();
        boolean _contains = _exporta_constantes.contains(_nombre);
        if (_contains) {
          _xifexpression_1 = "compare_field_public.gif";
        } else {
          _xifexpression_1 = "compare_field_private.gif";
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public StyledString text(final Constantes constantes) {
    String valor = new String();
    operacion _valor = constantes.getValor();
    if ((_valor instanceof NumeroEntero)) {
      operacion _valor_1 = constantes.getValor();
      NumeroEntero numero = ((NumeroEntero) _valor_1);
      int _valor_2 = numero.getValor();
      String _string = Integer.valueOf(_valor_2).toString();
      valor = _string;
    } else {
      operacion _valor_3 = constantes.getValor();
      if ((_valor_3 instanceof ConstCadena)) {
        operacion _valor_4 = constantes.getValor();
        ConstCadena cadena = ((ConstCadena) _valor_4);
        String _contenido = cadena.getContenido();
        valor = _contenido;
      } else {
        operacion _valor_5 = constantes.getValor();
        if ((_valor_5 instanceof Caracter)) {
          operacion _valor_6 = constantes.getValor();
          Caracter caracter = ((Caracter) _valor_6);
          String _contenido_1 = caracter.getContenido();
          valor = _contenido_1;
        } else {
          operacion _valor_7 = constantes.getValor();
          if ((_valor_7 instanceof NumeroDecimal)) {
            operacion _valor_8 = constantes.getValor();
            NumeroDecimal real = ((NumeroDecimal) _valor_8);
            float _valor_9 = real.getValor();
            String _string_1 = Float.valueOf(_valor_9).toString();
            valor = _string_1;
          } else {
            operacion _valor_10 = constantes.getValor();
            if ((_valor_10 instanceof ValorBooleano)) {
              operacion _valor_11 = constantes.getValor();
              ValorBooleano logico = ((ValorBooleano) _valor_11);
              booleano _valor_12 = logico.getValor();
              String _literal = _valor_12.getLiteral();
              valor = _literal;
            } else {
              operacion _valor_13 = constantes.getValor();
              if ((_valor_13 instanceof VariableID)) {
                operacion _valor_14 = constantes.getValor();
                VariableID variable = ((VariableID) _valor_14);
                String _nombre = variable.getNombre();
                valor = _nombre;
              }
            }
          }
        }
      }
    }
    Variable _variable = constantes.getVariable();
    String _nombre_1 = _variable.getNombre();
    String _plus = (_nombre_1 + " ");
    String _plus_1 = (_plus + valor);
    TextStyle _principalesTextStyle = this.getPrincipalesTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_principalesTextStyle);
    return new StyledString(_plus_1, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final Matriz matriz) {
    Tipo _tipo = matriz.getTipo();
    if ((_tipo instanceof TipoExistente)) {
      Tipo _tipo_1 = matriz.getTipo();
      TipoExistente tipo = ((TipoExistente) _tipo_1);
      String indice1 = new String();
      String indice2 = new String();
      EList<operacion> _valor = matriz.getValor();
      int _size = _valor.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        EList<operacion> _valor_1 = matriz.getValor();
        operacion _get = _valor_1.get(0);
        if ((_get instanceof NumeroEntero)) {
          EList<operacion> _valor_2 = matriz.getValor();
          operacion _get_1 = _valor_2.get(0);
          NumeroEntero indice = ((NumeroEntero) _get_1);
          int _valor_3 = indice.getValor();
          String _string = Integer.valueOf(_valor_3).toString();
          indice1 = _string;
        } else {
          EList<operacion> _valor_4 = matriz.getValor();
          operacion _get_2 = _valor_4.get(0);
          VariableID indice_1 = ((VariableID) _get_2);
          String _nombre = indice_1.getNombre();
          indice1 = _nombre;
        }
      }
      EList<operacion> _valor_5 = matriz.getValor();
      int _size_1 = _valor_5.size();
      boolean _greaterThan_1 = (_size_1 > 1);
      if (_greaterThan_1) {
        EList<operacion> _valor_6 = matriz.getValor();
        operacion _get_3 = _valor_6.get(1);
        if ((_get_3 instanceof NumeroEntero)) {
          EList<operacion> _valor_7 = matriz.getValor();
          operacion _get_4 = _valor_7.get(1);
          NumeroEntero indice_2 = ((NumeroEntero) _get_4);
          int _valor_8 = indice_2.getValor();
          String _string_1 = Integer.valueOf(_valor_8).toString();
          indice2 = _string_1;
        } else {
          EList<operacion> _valor_9 = matriz.getValor();
          operacion _get_5 = _valor_9.get(1);
          VariableID indice_3 = ((VariableID) _get_5);
          String _nombre_1 = indice_3.getNombre();
          indice2 = _nombre_1;
        }
      }
      String _nombre_2 = matriz.getNombre();
      String _plus = (_nombre_2 + "[");
      String _plus_1 = (_plus + indice1);
      String _plus_2 = (_plus_1 + "][");
      String _plus_3 = (_plus_2 + indice2);
      String _plus_4 = (_plus_3 + "] : ");
      String _tipo_2 = tipo.getTipo();
      String _plus_5 = (_plus_4 + _tipo_2);
      TextStyle _tiposTextStyle = this.getTiposTextStyle();
      StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
      return new StyledString(_plus_5, _createXtextStyleAdapterStyler);
    } else {
      Tipo _tipo_3 = matriz.getTipo();
      TipoDefinido tipo_1 = ((TipoDefinido) _tipo_3);
      String indice1_1 = new String();
      String indice2_1 = new String();
      EList<operacion> _valor_10 = matriz.getValor();
      int _size_2 = _valor_10.size();
      boolean _greaterThan_2 = (_size_2 > 0);
      if (_greaterThan_2) {
        EList<operacion> _valor_11 = matriz.getValor();
        operacion _get_6 = _valor_11.get(0);
        if ((_get_6 instanceof NumeroEntero)) {
          EList<operacion> _valor_12 = matriz.getValor();
          operacion _get_7 = _valor_12.get(0);
          NumeroEntero indice_4 = ((NumeroEntero) _get_7);
          int _valor_13 = indice_4.getValor();
          String _string_2 = Integer.valueOf(_valor_13).toString();
          indice1_1 = _string_2;
        } else {
          EList<operacion> _valor_14 = matriz.getValor();
          operacion _get_8 = _valor_14.get(0);
          VariableID indice_5 = ((VariableID) _get_8);
          String _nombre_3 = indice_5.getNombre();
          indice1_1 = _nombre_3;
        }
      }
      EList<operacion> _valor_15 = matriz.getValor();
      int _size_3 = _valor_15.size();
      boolean _greaterThan_3 = (_size_3 > 1);
      if (_greaterThan_3) {
        EList<operacion> _valor_16 = matriz.getValor();
        operacion _get_9 = _valor_16.get(1);
        if ((_get_9 instanceof NumeroEntero)) {
          EList<operacion> _valor_17 = matriz.getValor();
          operacion _get_10 = _valor_17.get(1);
          NumeroEntero indice_6 = ((NumeroEntero) _get_10);
          int _valor_18 = indice_6.getValor();
          String _string_3 = Integer.valueOf(_valor_18).toString();
          indice2_1 = _string_3;
        } else {
          EList<operacion> _valor_19 = matriz.getValor();
          operacion _get_11 = _valor_19.get(1);
          VariableID indice_7 = ((VariableID) _get_11);
          String _nombre_4 = indice_7.getNombre();
          indice2_1 = _nombre_4;
        }
      }
      String _nombre_5 = matriz.getNombre();
      String _plus_6 = (_nombre_5 + "[");
      String _plus_7 = (_plus_6 + indice1_1);
      String _plus_8 = (_plus_7 + "][");
      String _plus_9 = (_plus_8 + indice2_1);
      String _plus_10 = (_plus_9 + "] : ");
      String _tipo_4 = tipo_1.getTipo();
      String _plus_11 = (_plus_10 + _tipo_4);
      TextStyle _tiposTextStyle_1 = this.getTiposTextStyle();
      StyledString.Styler _createXtextStyleAdapterStyler_1 = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle_1);
      return new StyledString(_plus_11, _createXtextStyleAdapterStyler_1);
    }
  }
  
  public String image(final Inicio inicio) {
    return "envvar_obj.gif";
  }
  
  public StyledString text(final Inicio inicio) {
    ResourceBundle _bundle = this.readerKeywords.getBundle();
    String _string = _bundle.getString("KEYWORD_PRINCIPAL");
    TextStyle _principalesTextStyle = this.getPrincipalesTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_principalesTextStyle);
    return new StyledString(_string, _createXtextStyleAdapterStyler);
  }
  
  public String image(final VariableID variableID) {
    return "compare_field.gif";
  }
  
  public StyledString text(final Enumerado enumerado) {
    String _nombre = enumerado.getNombre();
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_nombre, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final SubrangoEnumerado subrango) {
    String _nombre = subrango.getNombre();
    String _plus = (_nombre + " [");
    String _limite_inf = subrango.getLimite_inf();
    String _plus_1 = (_plus + _limite_inf);
    String _plus_2 = (_plus_1 + ",");
    String _limite_sup = subrango.getLimite_sup();
    String _plus_3 = (_plus_2 + _limite_sup);
    String _plus_4 = (_plus_3 + "]");
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_plus_4, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final SubrangoNumerico subrango) {
    String _nombre = subrango.getNombre();
    String _plus = (_nombre + " [");
    int _limite_inf = subrango.getLimite_inf();
    String _plus_1 = (_plus + Integer.valueOf(_limite_inf));
    String _plus_2 = (_plus_1 + ",");
    int _limite_sup = subrango.getLimite_sup();
    String _plus_3 = (_plus_2 + Integer.valueOf(_limite_sup));
    String _plus_4 = (_plus_3 + "]");
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_plus_4, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final Funcion funcion) {
    String _nombre = funcion.getNombre();
    String _plus = (_nombre + "(");
    EList<ParametroFuncion> _parametrofuncion = funcion.getParametrofuncion();
    String _cadenaTiposSubproceso = this.cadenaTiposSubproceso(_parametrofuncion);
    String _plus_1 = (_plus + _cadenaTiposSubproceso);
    String _plus_2 = (_plus_1 + ") : ");
    String _tipo = funcion.getTipo();
    String _plus_3 = (_plus_2 + _tipo);
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_plus_3, _createXtextStyleAdapterStyler);
  }
  
  public StyledString text(final Procedimiento procedimiento) {
    String _nombre = procedimiento.getNombre();
    String _plus = (_nombre + "(");
    EList<ParametroFuncion> _parametrofuncion = procedimiento.getParametrofuncion();
    String _cadenaTiposSubproceso = this.cadenaTiposSubproceso(_parametrofuncion);
    String _plus_1 = (_plus + _cadenaTiposSubproceso);
    String _plus_2 = (_plus_1 + ")");
    TextStyle _tiposTextStyle = this.getTiposTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_tiposTextStyle);
    return new StyledString(_plus_2, _createXtextStyleAdapterStyler);
  }
  
  public String image(final Algoritmo algoritmo) {
    return "algoritmo.gif";
  }
  
  public StyledString text(final Algoritmo algoritmo) {
    String _nombre = algoritmo.getNombre();
    TextStyle _algoritmoTextStyle = this.getAlgoritmoTextStyle();
    StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_algoritmoTextStyle);
    return new StyledString(_nombre, _createXtextStyleAdapterStyler);
  }
  
  public String cadenaTiposSubproceso(final List<ParametroFuncion> parametros) {
    String tiposParametros = new String();
    for (final ParametroFuncion parametro : parametros) {
      {
        Tipo _tipo = parametro.getTipo();
        if ((_tipo instanceof TipoExistente)) {
          Tipo _tipo_1 = parametro.getTipo();
          TipoExistente tipo = ((TipoExistente) _tipo_1);
          String _tipo_2 = tipo.getTipo();
          String _plus = (tiposParametros + _tipo_2);
          tiposParametros = _plus;
        } else {
          Tipo _tipo_3 = parametro.getTipo();
          TipoDefinido tipo_1 = ((TipoDefinido) _tipo_3);
          String _tipo_4 = tipo_1.getTipo();
          String _plus_1 = (tiposParametros + _tipo_4);
          tiposParametros = _plus_1;
        }
        int _indexOf = parametros.indexOf(parametro);
        int _size = parametros.size();
        int _minus = (_size - 1);
        boolean _notEquals = (_indexOf != _minus);
        if (_notEquals) {
          tiposParametros = (tiposParametros + ",");
        }
      }
    }
    return tiposParametros;
  }
  
  public String image(final Procedimiento procedimiento) {
    String _xblockexpression = null;
    {
      Modulo modulo = EcoreUtil2.<Modulo>getContainerOfType(procedimiento, Modulo.class);
      Algoritmo algoritmo = EcoreUtil2.<Algoritmo>getContainerOfType(procedimiento, Algoritmo.class);
      String _xifexpression = null;
      boolean _notEquals = (!Objects.equal(modulo, null));
      if (_notEquals) {
        EList<CabeceraSubproceso> _exporta_funciones = modulo.getExporta_funciones();
        for (final CabeceraSubproceso cabecera : _exporta_funciones) {
          boolean _and = false;
          String _nombre = cabecera.getNombre();
          String _nombre_1 = procedimiento.getNombre();
          boolean _equals = _nombre.equals(_nombre_1);
          if (!_equals) {
            _and = false;
          } else {
            _and = (cabecera instanceof CabeceraProcedimiento);
          }
          if (_and) {
            return "methpub_obj.gif";
          }
        }
        return "methpri_obj.gif";
      } else {
        String _xifexpression_1 = null;
        boolean _notEquals_1 = (!Objects.equal(algoritmo, null));
        if (_notEquals_1) {
          _xifexpression_1 = "methpri_obj.gif";
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String image(final Funcion funcion) {
    Modulo modulo = EcoreUtil2.<Modulo>getContainerOfType(funcion, Modulo.class);
    Algoritmo algoritmo = EcoreUtil2.<Algoritmo>getContainerOfType(funcion, Algoritmo.class);
    boolean _notEquals = (!Objects.equal(modulo, null));
    if (_notEquals) {
      EList<CabeceraSubproceso> _exporta_funciones = modulo.getExporta_funciones();
      for (final CabeceraSubproceso cabecera : _exporta_funciones) {
        boolean _and = false;
        String _nombre = cabecera.getNombre();
        String _nombre_1 = funcion.getNombre();
        boolean _equals = _nombre.equals(_nombre_1);
        if (!_equals) {
          _and = false;
        } else {
          _and = (cabecera instanceof CabeceraFuncion);
        }
        if (_and) {
          return "methpub_obj.gif";
        }
      }
      return "methpri_obj.gif";
    } else {
      boolean _notEquals_1 = (!Objects.equal(algoritmo, null));
      if (_notEquals_1) {
        return "methpri_obj.gif";
      }
    }
    return null;
  }
  
  public String image(final Variable variable) {
    Modulo modulo = EcoreUtil2.<Modulo>getContainerOfType(variable, Modulo.class);
    Registro registro = EcoreUtil2.<Registro>getContainerOfType(variable, Registro.class);
    boolean _notEquals = (!Objects.equal(modulo, null));
    if (_notEquals) {
      boolean _notEquals_1 = (!Objects.equal(registro, null));
      if (_notEquals_1) {
        return "compare_field.gif";
      }
      Boolean esPublica = new Boolean(false);
      EList<Declaracion> _exporta_global = modulo.getExporta_global();
      for (final Declaracion declaracion : _exporta_global) {
        if ((declaracion instanceof DeclaracionPropia)) {
          DeclaracionPropia declaracionAux = ((DeclaracionPropia) declaracion);
          EList<Variable> _variable = declaracionAux.getVariable();
          for (final Variable variableAux : _variable) {
            String _nombre = variableAux.getNombre();
            String _nombre_1 = variable.getNombre();
            boolean _equals = _nombre.equals(_nombre_1);
            if (_equals) {
              esPublica = Boolean.valueOf(true);
            }
          }
        } else {
          DeclaracionVariable declaracionAux_1 = ((DeclaracionVariable) declaracion);
          EList<Variable> _variable_1 = declaracionAux_1.getVariable();
          for (final Variable variableAux_1 : _variable_1) {
            String _nombre_2 = variableAux_1.getNombre();
            String _nombre_3 = variable.getNombre();
            boolean _equals_1 = _nombre_2.equals(_nombre_3);
            if (_equals_1) {
              esPublica = Boolean.valueOf(true);
            }
          }
        }
      }
      if ((esPublica).booleanValue()) {
        return "field_public_obj.gif";
      } else {
        return "field_private_obj.gif";
      }
    } else {
      boolean _notEquals_2 = (!Objects.equal(registro, null));
      if (_notEquals_2) {
        return "compare_field.gif";
      } else {
        return "field_private_obj.gif";
      }
    }
  }
  
  public Object text(final Variable variable) {
    DeclaracionVariable declaracionVariable = EcoreUtil2.<DeclaracionVariable>getContainerOfType(variable, DeclaracionVariable.class);
    DeclaracionPropia declaracionPropia = EcoreUtil2.<DeclaracionPropia>getContainerOfType(variable, DeclaracionPropia.class);
    Registro registro = EcoreUtil2.<Registro>getContainerOfType(variable, Registro.class);
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(declaracionVariable, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _equals = Objects.equal(registro, null);
      _and = _equals;
    }
    if (_and) {
      String _nombre = variable.getNombre();
      String _plus = (_nombre + " : ");
      String _tipo = declaracionVariable.getTipo();
      String _plus_1 = (_plus + _tipo);
      TextStyle _declaracionTextStyle = this.getDeclaracionTextStyle();
      StyledString.Styler _createXtextStyleAdapterStyler = this.stylerFactory.createXtextStyleAdapterStyler(_declaracionTextStyle);
      return new StyledString(_plus_1, _createXtextStyleAdapterStyler);
    } else {
      boolean _and_1 = false;
      boolean _equals_1 = Objects.equal(declaracionVariable, null);
      if (!_equals_1) {
        _and_1 = false;
      } else {
        boolean _equals_2 = Objects.equal(registro, null);
        _and_1 = _equals_2;
      }
      if (_and_1) {
        String _nombre_1 = variable.getNombre();
        String _plus_2 = (_nombre_1 + " : ");
        String _tipo_1 = declaracionPropia.getTipo();
        String _plus_3 = (_plus_2 + _tipo_1);
        TextStyle _declaracionTextStyle_1 = this.getDeclaracionTextStyle();
        StyledString.Styler _createXtextStyleAdapterStyler_1 = this.stylerFactory.createXtextStyleAdapterStyler(_declaracionTextStyle_1);
        return new StyledString(_plus_3, _createXtextStyleAdapterStyler_1);
      } else {
        boolean _and_2 = false;
        boolean _notEquals_1 = (!Objects.equal(declaracionVariable, null));
        if (!_notEquals_1) {
          _and_2 = false;
        } else {
          boolean _notEquals_2 = (!Objects.equal(registro, null));
          _and_2 = _notEquals_2;
        }
        if (_and_2) {
          String _nombre_2 = variable.getNombre();
          String _plus_4 = (_nombre_2 + " : ");
          String _tipo_2 = declaracionVariable.getTipo();
          return (_plus_4 + _tipo_2);
        } else {
          boolean _and_3 = false;
          boolean _equals_3 = Objects.equal(declaracionVariable, null);
          if (!_equals_3) {
            _and_3 = false;
          } else {
            boolean _equals_4 = Objects.equal(registro, null);
            _and_3 = _equals_4;
          }
          if (_and_3) {
            String _nombre_3 = variable.getNombre();
            String _plus_5 = (_nombre_3 + " : ");
            String _tipo_3 = declaracionPropia.getTipo();
            return (_plus_5 + _tipo_3);
          }
        }
      }
    }
    return null;
  }
}
