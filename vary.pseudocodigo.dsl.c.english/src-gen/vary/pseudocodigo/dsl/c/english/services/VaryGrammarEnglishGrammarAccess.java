/*
 * generated by Xtext
 */
package vary.pseudocodigo.dsl.c.english.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VaryGrammarEnglishGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodigoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Codigo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlgoritmoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuloParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Codigo:
		//	Algoritmo | Modulo;
		@Override public ParserRule getRule() { return rule; }

		//Algoritmo | Modulo
		public Alternatives getAlternatives() { return cAlternatives; }

		//Algoritmo
		public RuleCall getAlgoritmoParserRuleCall_0() { return cAlgoritmoParserRuleCall_0; }

		//Modulo
		public RuleCall getModuloParserRuleCall_1() { return cModuloParserRuleCall_1; }
	}

	public class AlgoritmoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Algoritmo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportacionesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportacionesModuloCrossReference_2_1_0 = (CrossReference)cImportacionesAssignment_2_1.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_2_1_0_1 = (RuleCall)cImportacionesModuloCrossReference_2_1_0.eContents().get(1);
		private final Keyword cEnd_importKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstantesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstantesConstantesParserRuleCall_3_1_0 = (RuleCall)cConstantesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTipocomplejoAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_4_1_0 = (RuleCall)cTipocomplejoAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGlobalAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGlobalDeclaracionParserRuleCall_5_1_0 = (RuleCall)cGlobalAssignment_5_1.eContents().get(0);
		private final Assignment cFuncionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFuncionSubprocesoParserRuleCall_6_0 = (RuleCall)cFuncionAssignment_6.eContents().get(0);
		private final Assignment cTieneAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTieneInicioParserRuleCall_7_0 = (RuleCall)cTieneAssignment_7.eContents().get(0);
		private final Keyword cEnd_algorithmKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Algoritmo:
		//	'Algorithm' nombre=EString ('import'
		//	importaciones+=[Modulo]*
		//	'end_import')? ('const'
		//	constantes+=Constantes*)? ('type'
		//	tipocomplejo+=TipoComplejo*)? ('var'
		//	global+=Declaracion*)?
		//	funcion+=Subproceso*
		//	tiene=Inicio
		//	'end_algorithm';
		@Override public ParserRule getRule() { return rule; }

		//'Algorithm' nombre=EString ('import' importaciones+=[Modulo]* 'end_import')? ('const' constantes+=Constantes*)? ('type'
		//tipocomplejo+=TipoComplejo*)? ('var' global+=Declaracion*)? funcion+=Subproceso* tiene=Inicio 'end_algorithm'
		public Group getGroup() { return cGroup; }

		//'Algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//('import' importaciones+=[Modulo]* 'end_import')?
		public Group getGroup_2() { return cGroup_2; }

		//'import'
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_2_1() { return cImportacionesAssignment_2_1; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_2_1_0() { return cImportacionesModuloCrossReference_2_1_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_2_1_0_1() { return cImportacionesModuloIDTerminalRuleCall_2_1_0_1; }

		//'end_import'
		public Keyword getEnd_importKeyword_2_2() { return cEnd_importKeyword_2_2; }

		//('const' constantes+=Constantes*)?
		public Group getGroup_3() { return cGroup_3; }

		//'const'
		public Keyword getConstKeyword_3_0() { return cConstKeyword_3_0; }

		//constantes+=Constantes*
		public Assignment getConstantesAssignment_3_1() { return cConstantesAssignment_3_1; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_3_1_0() { return cConstantesConstantesParserRuleCall_3_1_0; }

		//('type' tipocomplejo+=TipoComplejo*)?
		public Group getGroup_4() { return cGroup_4; }

		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//tipocomplejo+=TipoComplejo*
		public Assignment getTipocomplejoAssignment_4_1() { return cTipocomplejoAssignment_4_1; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_4_1_0() { return cTipocomplejoTipoComplejoParserRuleCall_4_1_0; }

		//('var' global+=Declaracion*)?
		public Group getGroup_5() { return cGroup_5; }

		//'var'
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }

		//global+=Declaracion*
		public Assignment getGlobalAssignment_5_1() { return cGlobalAssignment_5_1; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_5_1_0() { return cGlobalDeclaracionParserRuleCall_5_1_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_6() { return cFuncionAssignment_6; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_6_0() { return cFuncionSubprocesoParserRuleCall_6_0; }

		//tiene=Inicio
		public Assignment getTieneAssignment_7() { return cTieneAssignment_7; }

		//Inicio
		public RuleCall getTieneInicioParserRuleCall_7_0() { return cTieneInicioParserRuleCall_7_0; }

		//'end_algorithm'
		public Keyword getEnd_algorithmKeyword_8() { return cEnd_algorithmKeyword_8; }
	}

	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportacionesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cImportacionesModuloCrossReference_3_0 = (CrossReference)cImportacionesAssignment_3.eContents().get(0);
		private final RuleCall cImportacionesModuloIDTerminalRuleCall_3_0_1 = (RuleCall)cImportacionesModuloCrossReference_3_0.eContents().get(1);
		private final Keyword cEnd_importKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cExportKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExporta_constantesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExporta_constantesEStringParserRuleCall_6_1_0 = (RuleCall)cExporta_constantesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTypeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExporta_tiposAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExporta_tiposEStringParserRuleCall_7_1_0 = (RuleCall)cExporta_tiposAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVarKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cExporta_globalAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cExporta_globalDeclaracionParserRuleCall_8_1_0 = (RuleCall)cExporta_globalAssignment_8_1.eContents().get(0);
		private final Assignment cExporta_funcionesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cExporta_funcionesCabeceraSubprocesoParserRuleCall_9_0 = (RuleCall)cExporta_funcionesAssignment_9.eContents().get(0);
		private final Keyword cEnd_exportKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cImplementacionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cImplementacionImplementacionParserRuleCall_11_0 = (RuleCall)cImplementacionAssignment_11.eContents().get(0);
		private final Keyword cEnd_moduleKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Modulo:
		//	'Module' nombre=ID
		//	'import'
		//	importaciones+=[Modulo]*
		//	'end_import'
		//	'export' ('const'
		//	exporta_constantes+=EString*)? ('type'
		//	exporta_tipos+=EString*)? ('var'
		//	exporta_global+=Declaracion*)?
		//	exporta_funciones+=CabeceraSubproceso*
		//	'end_export'
		//	implementacion=Implementacion
		//	'end_module';
		@Override public ParserRule getRule() { return rule; }

		//'Module' nombre=ID 'import' importaciones+=[Modulo]* 'end_import' 'export' ('const' exporta_constantes+=EString*)?
		//('type' exporta_tipos+=EString*)? ('var' exporta_global+=Declaracion*)? exporta_funciones+=CabeceraSubproceso*
		//'end_export' implementacion=Implementacion 'end_module'
		public Group getGroup() { return cGroup; }

		//'Module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }

		//importaciones+=[Modulo]*
		public Assignment getImportacionesAssignment_3() { return cImportacionesAssignment_3; }

		//[Modulo]
		public CrossReference getImportacionesModuloCrossReference_3_0() { return cImportacionesModuloCrossReference_3_0; }

		//ID
		public RuleCall getImportacionesModuloIDTerminalRuleCall_3_0_1() { return cImportacionesModuloIDTerminalRuleCall_3_0_1; }

		//'end_import'
		public Keyword getEnd_importKeyword_4() { return cEnd_importKeyword_4; }

		//'export'
		public Keyword getExportKeyword_5() { return cExportKeyword_5; }

		//('const' exporta_constantes+=EString*)?
		public Group getGroup_6() { return cGroup_6; }

		//'const'
		public Keyword getConstKeyword_6_0() { return cConstKeyword_6_0; }

		//exporta_constantes+=EString*
		public Assignment getExporta_constantesAssignment_6_1() { return cExporta_constantesAssignment_6_1; }

		//EString
		public RuleCall getExporta_constantesEStringParserRuleCall_6_1_0() { return cExporta_constantesEStringParserRuleCall_6_1_0; }

		//('type' exporta_tipos+=EString*)?
		public Group getGroup_7() { return cGroup_7; }

		//'type'
		public Keyword getTypeKeyword_7_0() { return cTypeKeyword_7_0; }

		//exporta_tipos+=EString*
		public Assignment getExporta_tiposAssignment_7_1() { return cExporta_tiposAssignment_7_1; }

		//EString
		public RuleCall getExporta_tiposEStringParserRuleCall_7_1_0() { return cExporta_tiposEStringParserRuleCall_7_1_0; }

		//('var' exporta_global+=Declaracion*)?
		public Group getGroup_8() { return cGroup_8; }

		//'var'
		public Keyword getVarKeyword_8_0() { return cVarKeyword_8_0; }

		//exporta_global+=Declaracion*
		public Assignment getExporta_globalAssignment_8_1() { return cExporta_globalAssignment_8_1; }

		//Declaracion
		public RuleCall getExporta_globalDeclaracionParserRuleCall_8_1_0() { return cExporta_globalDeclaracionParserRuleCall_8_1_0; }

		//exporta_funciones+=CabeceraSubproceso*
		public Assignment getExporta_funcionesAssignment_9() { return cExporta_funcionesAssignment_9; }

		//CabeceraSubproceso
		public RuleCall getExporta_funcionesCabeceraSubprocesoParserRuleCall_9_0() { return cExporta_funcionesCabeceraSubprocesoParserRuleCall_9_0; }

		//'end_export'
		public Keyword getEnd_exportKeyword_10() { return cEnd_exportKeyword_10; }

		//implementacion=Implementacion
		public Assignment getImplementacionAssignment_11() { return cImplementacionAssignment_11; }

		//Implementacion
		public RuleCall getImplementacionImplementacionParserRuleCall_11_0() { return cImplementacionImplementacionParserRuleCall_11_0; }

		//'end_module'
		public Keyword getEnd_moduleKeyword_12() { return cEnd_moduleKeyword_12; }
	}

	public class ImplementacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Implementacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementacionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantesConstantesParserRuleCall_2_1_0 = (RuleCall)cConstantesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTipocomplejoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_3_1_0 = (RuleCall)cTipocomplejoAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGlobalAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGlobalDeclaracionParserRuleCall_4_1_0 = (RuleCall)cGlobalAssignment_4_1.eContents().get(0);
		private final Assignment cFuncionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFuncionSubprocesoParserRuleCall_5_0 = (RuleCall)cFuncionAssignment_5.eContents().get(0);
		private final Keyword cEnd_implementationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Implementacion:
		//	{Implementacion}
		//	'implementation' ('const'
		//	constantes+=Constantes*)? ('type'
		//	tipocomplejo+=TipoComplejo*)? ('var'
		//	global+=Declaracion*)?
		//	funcion+=Subproceso*
		//	'end_implementation';
		@Override public ParserRule getRule() { return rule; }

		//{Implementacion} 'implementation' ('const' constantes+=Constantes*)? ('type' tipocomplejo+=TipoComplejo*)? ('var'
		//global+=Declaracion*)? funcion+=Subproceso* 'end_implementation'
		public Group getGroup() { return cGroup; }

		//{Implementacion}
		public Action getImplementacionAction_0() { return cImplementacionAction_0; }

		//'implementation'
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }

		//('const' constantes+=Constantes*)?
		public Group getGroup_2() { return cGroup_2; }

		//'const'
		public Keyword getConstKeyword_2_0() { return cConstKeyword_2_0; }

		//constantes+=Constantes*
		public Assignment getConstantesAssignment_2_1() { return cConstantesAssignment_2_1; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_2_1_0() { return cConstantesConstantesParserRuleCall_2_1_0; }

		//('type' tipocomplejo+=TipoComplejo*)?
		public Group getGroup_3() { return cGroup_3; }

		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//tipocomplejo+=TipoComplejo*
		public Assignment getTipocomplejoAssignment_3_1() { return cTipocomplejoAssignment_3_1; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_3_1_0() { return cTipocomplejoTipoComplejoParserRuleCall_3_1_0; }

		//('var' global+=Declaracion*)?
		public Group getGroup_4() { return cGroup_4; }

		//'var'
		public Keyword getVarKeyword_4_0() { return cVarKeyword_4_0; }

		//global+=Declaracion*
		public Assignment getGlobalAssignment_4_1() { return cGlobalAssignment_4_1; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_4_1_0() { return cGlobalDeclaracionParserRuleCall_4_1_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_5() { return cFuncionAssignment_5; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_5_0() { return cFuncionSubprocesoParserRuleCall_5_0; }

		//'end_implementation'
		public Keyword getEnd_implementationKeyword_6() { return cEnd_implementationKeyword_6; }
	}

	public class CabeceraSubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CabeceraSubproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCabeceraProcedimientoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCabeceraFuncionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CabeceraSubproceso:
		//	CabeceraProcedimiento | CabeceraFuncion;
		@Override public ParserRule getRule() { return rule; }

		//CabeceraProcedimiento | CabeceraFuncion
		public Alternatives getAlternatives() { return cAlternatives; }

		//CabeceraProcedimiento
		public RuleCall getCabeceraProcedimientoParserRuleCall_0() { return cCabeceraProcedimientoParserRuleCall_0; }

		//CabeceraFuncion
		public RuleCall getCabeceraFuncionParserRuleCall_1() { return cCabeceraFuncionParserRuleCall_1; }
	}

	public class CabeceraProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CabeceraProcedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametrofuncionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_2_0_0 = (RuleCall)cParametrofuncionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_2_1_1_0 = (RuleCall)cParametrofuncionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CabeceraProcedimiento:
		//	'procedure'
		//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//'procedure' nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')'
		public Group getGroup() { return cGroup; }

		//'procedure'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_1_0; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_2_0() { return cParametrofuncionAssignment_2_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_2_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_2_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_2_1_1() { return cParametrofuncionAssignment_2_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_2_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CabeceraFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CabeceraFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CabeceraFuncion:
		//	tipo=TipoVariable 'function'
		//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable 'function' nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ')'
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_2_0() { return cNombreNOMBRE_FUNTerminalRuleCall_2_0; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TipoComplejoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.TipoComplejo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatrizParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegistroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArchivoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumeradoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubrangoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TipoComplejo:
		//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
		@Override public ParserRule getRule() { return rule; }

		//Vector | Matriz | Registro | Archivo | Enumerado | Subrango
		public Alternatives getAlternatives() { return cAlternatives; }

		//Vector
		public RuleCall getVectorParserRuleCall_0() { return cVectorParserRuleCall_0; }

		//Matriz
		public RuleCall getMatrizParserRuleCall_1() { return cMatrizParserRuleCall_1; }

		//Registro
		public RuleCall getRegistroParserRuleCall_2() { return cRegistroParserRuleCall_2; }

		//Archivo
		public RuleCall getArchivoParserRuleCall_3() { return cArchivoParserRuleCall_3; }

		//Enumerado
		public RuleCall getEnumeradoParserRuleCall_4() { return cEnumeradoParserRuleCall_4; }

		//Subrango
		public RuleCall getSubrangoParserRuleCall_5() { return cSubrangoParserRuleCall_5; }
	}

	public class SubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Subproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subproceso:
		//	Funcion | Procedimiento;
		@Override public ParserRule getRule() { return rule; }

		//Funcion | Procedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//Funcion
		public RuleCall getFuncionParserRuleCall_0() { return cFuncionParserRuleCall_0; }

		//Procedimiento
		public RuleCall getProcedimientoParserRuleCall_1() { return cProcedimientoParserRuleCall_1; }
	}

	public class ComentarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Comentario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComentarioAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMensajeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMensajeCOMENTTerminalRuleCall_2_0 = (RuleCall)cMensajeAssignment_2.eContents().get(0);
		
		//Comentario:
		//	{Comentario} SL_COMMENT mensaje=COMENT;
		@Override public ParserRule getRule() { return rule; }

		//{Comentario} SL_COMMENT mensaje=COMENT
		public Group getGroup() { return cGroup; }

		//{Comentario}
		public Action getComentarioAction_0() { return cComentarioAction_0; }

		/// * ML_COMMENT | * / SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//mensaje=COMENT
		public Assignment getMensajeAssignment_2() { return cMensajeAssignment_2; }

		//COMENT
		public RuleCall getMensajeCOMENTTerminalRuleCall_2_0() { return cMensajeCOMENTTerminalRuleCall_2_0; }
	}

	public class SentenciasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Sentencias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEscribirParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBloqueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncionFicheroAbrirParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuncionFicheroCerrarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAsignacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFuncionesParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Sentencias:
		//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
		@Override public ParserRule getRule() { return rule; }

		//Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones
		public Alternatives getAlternatives() { return cAlternatives; }

		//Escribir
		public RuleCall getEscribirParserRuleCall_0() { return cEscribirParserRuleCall_0; }

		//Leer
		public RuleCall getLeerParserRuleCall_1() { return cLeerParserRuleCall_1; }

		//Bloque
		public RuleCall getBloqueParserRuleCall_2() { return cBloqueParserRuleCall_2; }

		//FuncionFicheroAbrir
		public RuleCall getFuncionFicheroAbrirParserRuleCall_3() { return cFuncionFicheroAbrirParserRuleCall_3; }

		//FuncionFicheroCerrar
		public RuleCall getFuncionFicheroCerrarParserRuleCall_4() { return cFuncionFicheroCerrarParserRuleCall_4; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_5() { return cAsignacionParserRuleCall_5; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_6() { return cFuncionesParserRuleCall_6; }
	}

	public class BloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Bloque");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMientrasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepetirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDesdeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSegunParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Bloque:
		//	Si | mientras | repetir | desde | segun;
		@Override public ParserRule getRule() { return rule; }

		//Si | mientras | repetir | desde | segun
		public Alternatives getAlternatives() { return cAlternatives; }

		//Si
		public RuleCall getSiParserRuleCall_0() { return cSiParserRuleCall_0; }

		//mientras
		public RuleCall getMientrasParserRuleCall_1() { return cMientrasParserRuleCall_1; }

		//repetir
		public RuleCall getRepetirParserRuleCall_2() { return cRepetirParserRuleCall_2; }

		//desde
		public RuleCall getDesdeParserRuleCall_3() { return cDesdeParserRuleCall_3; }

		//segun
		public RuleCall getSegunParserRuleCall_4() { return cSegunParserRuleCall_4; }
	}

	public class DeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Declaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracionVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracionPropiaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaracion:
		//	DeclaracionVariable | DeclaracionPropia;
		@Override public ParserRule getRule() { return rule; }

		//DeclaracionVariable | DeclaracionPropia
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaracionVariable
		public RuleCall getDeclaracionVariableParserRuleCall_0() { return cDeclaracionVariableParserRuleCall_0; }

		//DeclaracionPropia
		public RuleCall getDeclaracionPropiaParserRuleCall_1() { return cDeclaracionPropiaParserRuleCall_1; }
	}

	public class FuncionFicheroAbrirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.FuncionFicheroAbrir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablePrimariaParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cModoAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cModoModoAperturaParserRuleCall_2_2_0 = (RuleCall)cModoAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cVariableAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVariablePrimariaParserRuleCall_2_4_0 = (RuleCall)cVariableAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroAbrir:
		//	'open'
		//	'(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'open' '(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria) ')'
		public Group getGroup() { return cGroup; }

		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
		public Group getGroup_2() { return cGroup_2; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_0_0() { return cVariablePrimariaParserRuleCall_2_0_0; }

		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//modo=ModoApertura
		public Assignment getModoAssignment_2_2() { return cModoAssignment_2_2; }

		//ModoApertura
		public RuleCall getModoModoAperturaParserRuleCall_2_2_0() { return cModoModoAperturaParserRuleCall_2_2_0; }

		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_4() { return cVariableAssignment_2_4; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_4_0() { return cVariablePrimariaParserRuleCall_2_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FuncionFicheroCerrarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.FuncionFicheroCerrar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCloseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablePrimariaParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroCerrar:
		//	'close'
		//	'('
		//	variable=Primaria ')';
		@Override public ParserRule getRule() { return rule; }

		//'close' '(' variable=Primaria ')'
		public Group getGroup() { return cGroup; }

		//'close'
		public Keyword getCloseKeyword_0() { return cCloseKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=Primaria
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_0() { return cVariablePrimariaParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModoAperturaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.ModoApertura");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWritingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReadingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ModoApertura ModoApertura:
		//	'writing' | 'reading'
		@Override public ParserRule getRule() { return rule; }

		//'writing' | 'reading'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'writing'
		public Keyword getWritingKeyword_0() { return cWritingKeyword_0; }

		//'reading'
		public Keyword getReadingKeyword_1() { return cReadingKeyword_1; }
	}

	public class NombreInternaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.NombreInterna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSquareKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExpKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLnKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSinKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSqrtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLengthKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConcatenaKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCopyKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//NombreInterna:
		//	'cos(' | 'square(' | 'exp(' | 'ln(' | 'log(' | 'sin(' | 'sqrt(' | 'length(' | 'concatena(' | 'copy(';
		@Override public ParserRule getRule() { return rule; }

		//'cos(' | 'square(' | 'exp(' | 'ln(' | 'log(' | 'sin(' | 'sqrt(' | 'length(' | 'concatena(' | 'copy('
		public Alternatives getAlternatives() { return cAlternatives; }

		//'cos('
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }

		//'square('
		public Keyword getSquareKeyword_1() { return cSquareKeyword_1; }

		//'exp('
		public Keyword getExpKeyword_2() { return cExpKeyword_2; }

		//'ln('
		public Keyword getLnKeyword_3() { return cLnKeyword_3; }

		//'log('
		public Keyword getLogKeyword_4() { return cLogKeyword_4; }

		//'sin('
		public Keyword getSinKeyword_5() { return cSinKeyword_5; }

		//'sqrt('
		public Keyword getSqrtKeyword_6() { return cSqrtKeyword_6; }

		//'length('
		public Keyword getLengthKeyword_7() { return cLengthKeyword_7; }

		//'concatena('
		public Keyword getConcatenaKeyword_8() { return cConcatenaKeyword_8; }

		//'copy('
		public Keyword getCopyKeyword_9() { return cCopyKeyword_9; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		////terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
		//EFloat ecore::EFloat:
		//	INT '.' INT (('E' | 'e') ('+' | '-')? INT)?
		@Override public ParserRule getRule() { return rule; }

		//INT '.' INT (('E' | 'e') ('+' | '-')? INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//(('E' | 'e') ('+' | '-')? INT)?
		public Group getGroup_3() { return cGroup_3; }

		//('E' | 'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//('+' | '-')?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//'+'
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class CampoRegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CampoRegistro");
		private final Assignment cNombre_campoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_0 = (RuleCall)cNombre_campoAssignment.eContents().get(0);
		
		////('0'..'9')+ '.' ('0'..'9')* EXPONENT?
		////|   '.' ('0'..'9')+ EXPONENT?
		////|   ('0'..'9')+ EXPONENT
		////;
		////ValorRegistro returns ValorRegistro:
		////	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
		////ValorVector returns ValorVector:
		////	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;
		//CampoRegistro:
		//	nombre_campo=EString;
		@Override public ParserRule getRule() { return rule; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment() { return cNombre_campoAssignment; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_0() { return cNombre_campoEStringParserRuleCall_0; }
	}

	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoDefinidoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoExistenteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Tipo:
		//	TipoDefinido | TipoExistente;
		@Override public ParserRule getRule() { return rule; }

		//TipoDefinido | TipoExistente
		public Alternatives getAlternatives() { return cAlternatives; }

		//TipoDefinido
		public RuleCall getTipoDefinidoParserRuleCall_0() { return cTipoDefinidoParserRuleCall_0; }

		//TipoExistente
		public RuleCall getTipoExistenteParserRuleCall_1() { return cTipoExistenteParserRuleCall_1; }
	}

	public class TipoDefinidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.TipoDefinido");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoEStringParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoDefinido:
		//	tipo=EString;
		@Override public ParserRule getRule() { return rule; }

		//tipo=EString
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0() { return cTipoEStringParserRuleCall_0; }
	}

	public class TipoExistenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.TipoExistente");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoTipoVariableParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoExistente:
		//	tipo=TipoVariable;
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0() { return cTipoTipoVariableParserRuleCall_0; }
	}

	public class ConstantesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Constantes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//Constantes:
		//	variable=Variable '=' valor=Primaria;
		@Override public ParserRule getRule() { return rule; }

		//variable=Variable '=' valor=Primaria
		public Group getGroup() { return cGroup; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTipoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoTipoParserRuleCall_5_0 = (RuleCall)cTipoAssignment_5.eContents().get(0);
		private final Keyword cColonSpaceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNombreAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNombreEStringParserRuleCall_7_0 = (RuleCall)cNombreAssignment_7.eContents().get(0);
		
		//Vector:
		//	'vector' '[' valor=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'vector' '[' valor=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'vector'
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//tipo=Tipo
		public Assignment getTipoAssignment_5() { return cTipoAssignment_5; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_5_0() { return cTipoTipoParserRuleCall_5_0; }

		//': '
		public Keyword getColonSpaceKeyword_6() { return cColonSpaceKeyword_6; }

		//nombre=EString
		public Assignment getNombreAssignment_7() { return cNombreAssignment_7; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_7_0() { return cNombreEStringParserRuleCall_7_0; }
	}

	public class MatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Matriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorPrimariaParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorPrimariaParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTipoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTipoTipoParserRuleCall_7_0 = (RuleCall)cTipoAssignment_7.eContents().get(0);
		private final Keyword cColonSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNombreAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNombreEStringParserRuleCall_9_0 = (RuleCall)cNombreAssignment_9.eContents().get(0);
		
		//Matriz:
		//	'matrix' '[' valor+=Primaria '][' valor+=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'matrix' '[' valor+=Primaria '][' valor+=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'matrix'
		public Keyword getMatrixKeyword_0() { return cMatrixKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor+=Primaria
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_2_0() { return cValorPrimariaParserRuleCall_2_0; }

		//']['
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_3() { return cRightSquareBracketLeftSquareBracketKeyword_3; }

		//valor+=Primaria
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_4_0() { return cValorPrimariaParserRuleCall_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//'of'
		public Keyword getOfKeyword_6() { return cOfKeyword_6; }

		//tipo=Tipo
		public Assignment getTipoAssignment_7() { return cTipoAssignment_7; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_7_0() { return cTipoTipoParserRuleCall_7_0; }

		//': '
		public Keyword getColonSpaceKeyword_8() { return cColonSpaceKeyword_8; }

		//nombre=EString
		public Assignment getNombreAssignment_9() { return cNombreAssignment_9; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_9_0() { return cNombreEStringParserRuleCall_9_0; }
	}

	public class RegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Registro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableDeclaracionParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cEnd_registryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Registro:
		//	'registry:' nombre=EString
		//	variable+=Declaracion+
		//	'end_registry';
		@Override public ParserRule getRule() { return rule; }

		//'registry:' nombre=EString variable+=Declaracion+ 'end_registry'
		public Group getGroup() { return cGroup; }

		//'registry:'
		public Keyword getRegistryKeyword_0() { return cRegistryKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//variable+=Declaracion+
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Declaracion
		public RuleCall getVariableDeclaracionParserRuleCall_2_0() { return cVariableDeclaracionParserRuleCall_2_0; }

		//'end_registry'
		public Keyword getEnd_registryKeyword_3() { return cEnd_registryKeyword_3; }
	}

	public class ArchivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Archivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNombreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNombreEStringParserRuleCall_3_0 = (RuleCall)cNombreAssignment_3.eContents().get(0);
		
		//Archivo:
		//	'file of ' tipo=Tipo ': ' nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//'file of ' tipo=Tipo ': ' nombre=EString
		public Group getGroup() { return cGroup; }

		//'file of '
		public Keyword getFileOfKeyword_0() { return cFileOfKeyword_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//': '
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//nombre=EString
		public Assignment getNombreAssignment_3() { return cNombreAssignment_3; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_3_0() { return cNombreEStringParserRuleCall_3_0; }
	}

	public class EnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Enumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValorPrimariaParserRuleCall_3_0_0 = (RuleCall)cValorAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValorAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValorPrimariaParserRuleCall_3_1_1_0 = (RuleCall)cValorAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumerado:
		//	nombre=EString '=' '{' (valor+=Primaria (',' valor+=Primaria)*) '}';
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' '{' (valor+=Primaria (',' valor+=Primaria)*) '}'
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(valor+=Primaria (',' valor+=Primaria)*)
		public Group getGroup_3() { return cGroup_3; }

		//valor+=Primaria
		public Assignment getValorAssignment_3_0() { return cValorAssignment_3_0; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_3_0_0() { return cValorPrimariaParserRuleCall_3_0_0; }

		//(',' valor+=Primaria)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//valor+=Primaria
		public Assignment getValorAssignment_3_1_1() { return cValorAssignment_3_1_1; }

		//Primaria
		public RuleCall getValorPrimariaParserRuleCall_3_1_1_0() { return cValorPrimariaParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubrangoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Subrango");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrangoNumericoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubrangoEnumeradoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subrango:
		//	SubrangoNumerico | SubrangoEnumerado;
		@Override public ParserRule getRule() { return rule; }

		//SubrangoNumerico | SubrangoEnumerado
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubrangoNumerico
		public RuleCall getSubrangoNumericoParserRuleCall_0() { return cSubrangoNumericoParserRuleCall_0; }

		//SubrangoEnumerado
		public RuleCall getSubrangoEnumeradoParserRuleCall_1() { return cSubrangoEnumeradoParserRuleCall_1; }
	}

	public class SubrangoNumericoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.SubrangoNumerico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEIntParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEIntParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoNumerico:
		//	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(limite_inf=EInt '..' limite_sup=EInt)
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EInt
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EInt
		public RuleCall getLimite_infEIntParserRuleCall_2_0_0() { return cLimite_infEIntParserRuleCall_2_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EInt
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EInt
		public RuleCall getLimite_supEIntParserRuleCall_2_2_0() { return cLimite_supEIntParserRuleCall_2_2_0; }
	}

	public class SubrangoEnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.SubrangoEnumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLimite_infAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLimite_infEStringParserRuleCall_2_0_0 = (RuleCall)cLimite_infAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLimite_supAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLimite_supEStringParserRuleCall_2_2_0 = (RuleCall)cLimite_supAssignment_2_2.eContents().get(0);
		
		//SubrangoEnumerado:
		//	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);
		@Override public ParserRule getRule() { return rule; }

		//nombre=EString '=' (limite_inf=EString '..' limite_sup=EString)
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(limite_inf=EString '..' limite_sup=EString)
		public Group getGroup_2() { return cGroup_2; }

		//limite_inf=EString
		public Assignment getLimite_infAssignment_2_0() { return cLimite_infAssignment_2_0; }

		//EString
		public RuleCall getLimite_infEStringParserRuleCall_2_0_0() { return cLimite_infEStringParserRuleCall_2_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//limite_sup=EString
		public Assignment getLimite_supAssignment_2_2() { return cLimite_supAssignment_2_2; }

		//EString
		public RuleCall getLimite_supEStringParserRuleCall_2_2_0() { return cLimite_supEStringParserRuleCall_2_2_0; }
	}

	public class InicioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Inicio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInicioAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaracionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_3_0 = (RuleCall)cDeclaracionAssignment_3.eContents().get(0);
		private final Keyword cInitiationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTieneAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTieneSentenciasParserRuleCall_5_0 = (RuleCall)cTieneAssignment_5.eContents().get(0);
		private final Keyword cEnd_mainKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inicio:
		//	'main' {Inicio}
		//	'var'
		//	declaracion+=Declaracion*
		//	'initiation'
		//	tiene+=Sentencias*
		//	'end_main';
		@Override public ParserRule getRule() { return rule; }

		//'main' {Inicio} 'var' declaracion+=Declaracion* 'initiation' tiene+=Sentencias* 'end_main'
		public Group getGroup() { return cGroup; }

		//'main'
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//{Inicio}
		public Action getInicioAction_1() { return cInicioAction_1; }

		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_3() { return cDeclaracionAssignment_3; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_3_0() { return cDeclaracionDeclaracionParserRuleCall_3_0; }

		//'initiation'
		public Keyword getInitiationKeyword_4() { return cInitiationKeyword_4; }

		//tiene+=Sentencias*
		public Assignment getTieneAssignment_5() { return cTieneAssignment_5; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_5_0() { return cTieneSentenciasParserRuleCall_5_0; }

		//'end_main'
		public Keyword getEnd_mainKeyword_6() { return cEnd_mainKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DeclaracionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.DeclaracionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionVariable:
		//	tipo=TipoVariable ': '
		//	variable+=Variable (',' variable+=Variable)*;
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable ': ' variable+=Variable (',' variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//': '
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//(',' variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class DeclaracionPropiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.DeclaracionPropia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoEStringParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionPropia:
		//	tipo=EString ': '
		//	variable+=Variable (',' variable+=Variable)*;
		@Override public ParserRule getRule() { return rule; }

		//tipo=EString ': ' variable+=Variable (',' variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=EString
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0_0() { return cTipoEStringParserRuleCall_0_0; }

		//': '
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//(',' variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Asignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsignacionNormalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionComplejaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Asignacion:
		//	AsignacionNormal | AsignacionCompleja;
		@Override public ParserRule getRule() { return rule; }

		//AsignacionNormal | AsignacionCompleja
		public Alternatives getAlternatives() { return cAlternatives; }

		//AsignacionNormal
		public RuleCall getAsignacionNormalParserRuleCall_0() { return cAsignacionNormalParserRuleCall_0; }

		//AsignacionCompleja
		public RuleCall getAsignacionComplejaParserRuleCall_1() { return cAsignacionComplejaParserRuleCall_1; }
	}

	public class AsignacionNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.AsignacionNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionEStringParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionCompletaParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionNormal:
		//	valor_asignacion=EString
		//	//	 Mat+=MAT*
		//	'<-'
		//	operador=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//valor_asignacion=EString //	 Mat+=MAT*
		//'<-' operador=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//valor_asignacion=EString
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//EString
		public RuleCall getValor_asignacionEStringParserRuleCall_0_0() { return cValor_asignacionEStringParserRuleCall_0_0; }

		////	 Mat+=MAT*
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=OperacionCompleta
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//OperacionCompleta
		public RuleCall getOperadorOperacionCompletaParserRuleCall_2_0() { return cOperadorOperacionCompletaParserRuleCall_2_0; }
	}

	public class AsignacionComplejaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.AsignacionCompleja");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValor_asignacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValor_asignacionVariablesComplejasParserRuleCall_0_0 = (RuleCall)cValor_asignacionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperacionCompletaParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionCompleja:
		//	valor_asignacion=VariablesComplejas
		//	'<-'
		//	operador=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//valor_asignacion=VariablesComplejas '<-' operador=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//valor_asignacion=VariablesComplejas
		public Assignment getValor_asignacionAssignment_0() { return cValor_asignacionAssignment_0; }

		//VariablesComplejas
		public RuleCall getValor_asignacionVariablesComplejasParserRuleCall_0_0() { return cValor_asignacionVariablesComplejasParserRuleCall_0_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//operador=OperacionCompleta
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//OperacionCompleta
		public RuleCall getOperadorOperacionCompletaParserRuleCall_2_0() { return cOperadorOperacionCompletaParserRuleCall_2_0; }
	}

	public class EscribirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Escribir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_1_0 = (RuleCall)cOperadorAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cOperadorAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_2_0_1_0 = (RuleCall)cOperadorAssignment_2_0_1.eContents().get(0);
		private final Assignment cOperadorAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOperadorOperacionParserRuleCall_2_1_0 = (RuleCall)cOperadorAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////AsignacionCompleja returns AsignacionCompleja:
		////	operadores+=Primaria
		////	Mat+=MAT*
		////	 '='
		////	operadores+=Primaria;
		//Escribir:
		//	'write('
		//	operador+=Primaria ("," operador+=Primaria | operador+=operacion)*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'write(' operador+=Primaria ("," operador+=Primaria | operador+=operacion)* ')'
		public Group getGroup() { return cGroup; }

		//'write('
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }

		//operador+=Primaria
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_1_0() { return cOperadorPrimariaParserRuleCall_1_0; }

		//("," operador+=Primaria | operador+=operacion)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"," operador+=Primaria
		public Group getGroup_2_0() { return cGroup_2_0; }

		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }

		//operador+=Primaria
		public Assignment getOperadorAssignment_2_0_1() { return cOperadorAssignment_2_0_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_2_0_1_0() { return cOperadorPrimariaParserRuleCall_2_0_1_0; }

		//operador+=operacion
		public Assignment getOperadorAssignment_2_1() { return cOperadorAssignment_2_1; }

		//operacion
		public RuleCall getOperadorOperacionParserRuleCall_2_1_0() { return cOperadorOperacionParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Leer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablePrimariaParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablePrimariaParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Leer:
		//	'read('
		//	variable+=Primaria ("," variable+=Primaria)*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'read(' variable+=Primaria ("," variable+=Primaria)* ')'
		public Group getGroup() { return cGroup; }

		//'read('
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }

		//variable+=Primaria
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_1_0() { return cVariablePrimariaParserRuleCall_1_0; }

		//("," variable+=Primaria)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variable+=Primaria
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//Primaria
		public RuleCall getVariablePrimariaParserRuleCall_2_1_0() { return cVariablePrimariaParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Si");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cIfKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cIfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorOperacionCompletaParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSentenciasSentenciasParserRuleCall_4_0 = (RuleCall)cSentenciasAssignment_4.eContents().get(0);
		private final Assignment cDevuelveAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDevuelveDevolverParserRuleCall_5_0 = (RuleCall)cDevuelveAssignment_5.eContents().get(0);
		private final Assignment cSinoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSinoSinoParserRuleCall_6_0 = (RuleCall)cSinoAssignment_6.eContents().get(0);
		private final Keyword cEnd_ifKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Si:
		//	('if'
		//	'(' | 'if(') valor=OperacionCompleta
		//	')' 'then'
		//	sentencias+=Sentencias*
		//	devuelve=Devolver?
		//	sino=Sino?
		//	'end_if';
		@Override public ParserRule getRule() { return rule; }

		//('if' '(' | 'if(') valor=OperacionCompleta ')' 'then' sentencias+=Sentencias* devuelve=Devolver? sino=Sino? 'end_if'
		public Group getGroup() { return cGroup; }

		//('if' '(' | 'if(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'if' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'if'
		public Keyword getIfKeyword_0_0_0() { return cIfKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'if('
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }

		//valor=OperacionCompleta
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//OperacionCompleta
		public RuleCall getValorOperacionCompletaParserRuleCall_1_0() { return cValorOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_4() { return cSentenciasAssignment_4; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_4_0() { return cSentenciasSentenciasParserRuleCall_4_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_5() { return cDevuelveAssignment_5; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_5_0() { return cDevuelveDevolverParserRuleCall_5_0; }

		//sino=Sino?
		public Assignment getSinoAssignment_6() { return cSinoAssignment_6; }

		//Sino
		public RuleCall getSinoSinoParserRuleCall_6_0() { return cSinoSinoParserRuleCall_6_0; }

		//'end_if'
		public Keyword getEnd_ifKeyword_7() { return cEnd_ifKeyword_7; }
	}

	public class MientrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.mientras");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cWhileKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cWhileKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorOperacionCompletaParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSentenciasSentenciasParserRuleCall_4_0 = (RuleCall)cSentenciasAssignment_4.eContents().get(0);
		private final Keyword cEnd_whileKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//mientras:
		//	('while'
		//	'(' | 'while(') valor=OperacionCompleta
		//	')' 'do'
		//	sentencias+=Sentencias*
		//	'end_while';
		@Override public ParserRule getRule() { return rule; }

		//('while' '(' | 'while(') valor=OperacionCompleta ')' 'do' sentencias+=Sentencias* 'end_while'
		public Group getGroup() { return cGroup; }

		//('while' '(' | 'while(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'while' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'while'
		public Keyword getWhileKeyword_0_0_0() { return cWhileKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'while('
		public Keyword getWhileKeyword_0_1() { return cWhileKeyword_0_1; }

		//valor=OperacionCompleta
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//OperacionCompleta
		public RuleCall getValorOperacionCompletaParserRuleCall_1_0() { return cValorOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_4() { return cSentenciasAssignment_4; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_4_0() { return cSentenciasSentenciasParserRuleCall_4_0; }

		//'end_while'
		public Keyword getEnd_whileKeyword_5() { return cEnd_whileKeyword_5; }
	}

	public class RepetirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.repetir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSentenciasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_0 = (RuleCall)cSentenciasAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cUntilKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cUntilKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorOperacionCompletaParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//repetir:
		//	'repeat'
		//	sentencias+=Sentencias* ('until'
		//	'(' | 'until(') valor=OperacionCompleta ')';
		@Override public ParserRule getRule() { return rule; }

		//'repeat' sentencias+=Sentencias* ('until' '(' | 'until(') valor=OperacionCompleta ')'
		public Group getGroup() { return cGroup; }

		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_1() { return cSentenciasAssignment_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_0() { return cSentenciasSentenciasParserRuleCall_1_0; }

		//('until' '(' | 'until(')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'until' '('
		public Group getGroup_2_0() { return cGroup_2_0; }

		//'until'
		public Keyword getUntilKeyword_2_0_0() { return cUntilKeyword_2_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }

		//'until('
		public Keyword getUntilKeyword_2_1() { return cUntilKeyword_2_1; }

		//valor=OperacionCompleta
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//OperacionCompleta
		public RuleCall getValorOperacionCompletaParserRuleCall_3_0() { return cValorOperacionCompletaParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DesdeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.desde");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAsignacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsignacionAsignacionNormalParserRuleCall_1_0 = (RuleCall)cAsignacionAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorOperacionCompletaParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSentenciasAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_0 = (RuleCall)cSentenciasAssignment_5.eContents().get(0);
		private final Keyword cEnd_forKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//desde:
		//	'for' asignacion=AsignacionNormal 'to' valor=OperacionCompleta 'do'
		//	sentencias+=Sentencias*
		//	'end_for';
		@Override public ParserRule getRule() { return rule; }

		//'for' asignacion=AsignacionNormal 'to' valor=OperacionCompleta 'do' sentencias+=Sentencias* 'end_for'
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//asignacion=AsignacionNormal
		public Assignment getAsignacionAssignment_1() { return cAsignacionAssignment_1; }

		//AsignacionNormal
		public RuleCall getAsignacionAsignacionNormalParserRuleCall_1_0() { return cAsignacionAsignacionNormalParserRuleCall_1_0; }

		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//valor=OperacionCompleta
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//OperacionCompleta
		public RuleCall getValorOperacionCompletaParserRuleCall_3_0() { return cValorOperacionCompletaParserRuleCall_3_0; }

		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_5() { return cSentenciasAssignment_5; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_0() { return cSentenciasSentenciasParserRuleCall_5_0; }

		//'end_for'
		public Keyword getEnd_forKeyword_6() { return cEnd_forKeyword_6; }
	}

	public class CasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Caso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperadorPrimariaParserRuleCall_1_0 = (RuleCall)cOperadorAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0 = (RuleCall)cSentenciasAssignment_3.eContents().get(0);
		private final Assignment cDevuelveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevuelveDevolverParserRuleCall_4_0 = (RuleCall)cDevuelveAssignment_4.eContents().get(0);
		
		//Caso:
		//	'case' operador=Primaria ': ' sentencias+=Sentencias*
		//	devuelve=Devolver?;
		@Override public ParserRule getRule() { return rule; }

		//'case' operador=Primaria ': ' sentencias+=Sentencias* devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//operador=Primaria
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//Primaria
		public RuleCall getOperadorPrimariaParserRuleCall_1_0() { return cOperadorPrimariaParserRuleCall_1_0; }

		//': '
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3() { return cSentenciasAssignment_3; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0() { return cSentenciasSentenciasParserRuleCall_3_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_4() { return cDevuelveAssignment_4; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_4_0() { return cDevuelveDevolverParserRuleCall_4_0; }
	}

	public class SegunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.segun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cAccording_toKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cAccording_toKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorOperacionCompletaParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasoCasoParserRuleCall_4_0 = (RuleCall)cCasoAssignment_4.eContents().get(0);
		private final Keyword cOtherwiseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSentenciasSentenciasParserRuleCall_6_0 = (RuleCall)cSentenciasAssignment_6.eContents().get(0);
		private final Assignment cDevuelveAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDevuelveDevolverParserRuleCall_7_0 = (RuleCall)cDevuelveAssignment_7.eContents().get(0);
		private final Keyword cEnd_according_toKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//segun:
		//	('according_to' '(' | 'according_to(') valor=OperacionCompleta ')' 'do'
		//	caso+=Caso*
		//	'otherwise:'
		//	sentencias+=Sentencias*
		//	devuelve=Devolver?
		//	'end_according_to';
		@Override public ParserRule getRule() { return rule; }

		//('according_to' '(' | 'according_to(') valor=OperacionCompleta ')' 'do' caso+=Caso* 'otherwise:' sentencias+=Sentencias*
		//devuelve=Devolver? 'end_according_to'
		public Group getGroup() { return cGroup; }

		//('according_to' '(' | 'according_to(')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'according_to' '('
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'according_to'
		public Keyword getAccording_toKeyword_0_0_0() { return cAccording_toKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//'according_to('
		public Keyword getAccording_toKeyword_0_1() { return cAccording_toKeyword_0_1; }

		//valor=OperacionCompleta
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//OperacionCompleta
		public RuleCall getValorOperacionCompletaParserRuleCall_1_0() { return cValorOperacionCompletaParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//caso+=Caso*
		public Assignment getCasoAssignment_4() { return cCasoAssignment_4; }

		//Caso
		public RuleCall getCasoCasoParserRuleCall_4_0() { return cCasoCasoParserRuleCall_4_0; }

		//'otherwise:'
		public Keyword getOtherwiseKeyword_5() { return cOtherwiseKeyword_5; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_6() { return cSentenciasAssignment_6; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_6_0() { return cSentenciasSentenciasParserRuleCall_6_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_7() { return cDevuelveAssignment_7; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_7_0() { return cDevuelveDevolverParserRuleCall_7_0; }

		//'end_according_to'
		public Keyword getEnd_according_toKeyword_8() { return cEnd_according_toKeyword_8; }
	}

	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharacterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStringKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		////negacion returns negacion:
		////	nombre=EString
		////	ssigno=neg;
		////unaria returns unaria:
		////	ssigno=neg
		////	variable=Primaria;
		//TipoVariable:
		//	'integer' | 'character' | 'real' | 'boolean' | 'string';
		@Override public ParserRule getRule() { return rule; }

		//'integer' | 'character' | 'real' | 'boolean' | 'string'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'integer'
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }

		//'character'
		public Keyword getCharacterKeyword_1() { return cCharacterKeyword_1; }

		//'real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//'boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }

		//'string'
		public Keyword getStringKeyword_4() { return cStringKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Variable:
		//	{Variable} nombre=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Variable} nombre=EString
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }
	}

	public class SignoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cYKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cModKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDivKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		////terminal MAT: 
		////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
		////ConstCadena returns ConstCadena:
		////	{ConstCadena} contenido=CAD;
		////NumeroEntero returns NumeroEntero:
		////	 {NumeroEntero} valor=INTEGER;
		////NumeroDecimal returns NumeroDecimal:
		////	 {NumeroDecimal} valor=FLOAT;
		////ValorBooleano returns ValorBooleano:
		////	 {ValorBooleano} valor=booleano;
		//signo signo:
		//	'+' | '-' | '*' | '/' | '<' | '>' | '>=' | '<=' | 'y' | 'o' | '=' | '!=' | 'mod' | 'div'
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-' | '*' | '/' | '<' | '>' | '>=' | '<=' | 'y' | 'o' | '=' | '!=' | 'mod' | 'div'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }

		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//'y'
		public Keyword getYKeyword_8() { return cYKeyword_8; }

		//'o'
		public Keyword getOKeyword_9() { return cOKeyword_9; }

		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_11() { return cExclamationMarkEqualsSignKeyword_11; }

		//'mod'
		public Keyword getModKeyword_12() { return cModKeyword_12; }

		//'div'
		public Keyword getDivKeyword_13() { return cDivKeyword_13; }
	}

	public class SignoOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoOr");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//signoOr signo:
		//	'or'
		@Override public ParserRule getRule() { return rule; }

		//'or'
		public Keyword getOrKeyword() { return cOrKeyword; }
	}

	public class SignoAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoAnd");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//signoAnd signo:
		//	'and'
		@Override public ParserRule getRule() { return rule; }

		//'and'
		public Keyword getAndKeyword() { return cAndKeyword; }
	}

	public class SignoIgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoIgualdad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//signoIgualdad signo:
		//	'=' | '!='
		@Override public ParserRule getRule() { return rule; }

		//'=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class SignoComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoComparacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//signoComparacion signo:
		//	'<' | '>' | '>=' | '<='
		@Override public ParserRule getRule() { return rule; }

		//'<' | '>' | '>=' | '<='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}

	public class SignoSumaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoSuma");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//signoSuma signo:
		//	'+'
		@Override public ParserRule getRule() { return rule; }

		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SignoRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoResta");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoResta signo:
		//	'-'
		@Override public ParserRule getRule() { return rule; }

		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignoMultiplicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoMultiplicacion");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//signoMultiplicacion signo:
		//	'*'
		@Override public ParserRule getRule() { return rule; }

		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class SignoDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoDivision");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//signoDivision signo:
		//	'/'
		@Override public ParserRule getRule() { return rule; }

		//'/'
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class SignoModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoModulo");
		private final Keyword cModKeyword = (Keyword)rule.eContents().get(1);
		
		//signoModulo signo:
		//	'mod'
		@Override public ParserRule getRule() { return rule; }

		//'mod'
		public Keyword getModKeyword() { return cModKeyword; }
	}

	public class SignoDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.signoDiv");
		private final Keyword cDivKeyword = (Keyword)rule.eContents().get(1);
		
		//signoDiv signo:
		//	'div'
		@Override public ParserRule getRule() { return rule; }

		//'div'
		public Keyword getDivKeyword() { return cDivKeyword; }
	}

	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.operacion");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//operacion:
		//	Or;
		@Override public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightAndParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Or operacion:
		//	And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		@Override public ParserRule getRule() { return rule; }

		//And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=And
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//And
		public RuleCall getRightAndParserRuleCall_1_4_0() { return cRightAndParserRuleCall_1_4_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightModParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//And operacion:
		//	Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		@Override public ParserRule getRule() { return rule; }

		//Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		public Group getGroup() { return cGroup; }

		//Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Mod
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Mod
		public RuleCall getRightModParserRuleCall_1_4_0() { return cRightModParserRuleCall_1_4_0; }
	}

	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoModuloParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightIgualdadParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Mod operacion:
		//	Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		@Override public ParserRule getRule() { return rule; }

		//Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		public Group getGroup() { return cGroup; }

		//Igualdad
		public RuleCall getIgualdadParserRuleCall_0() { return cIgualdadParserRuleCall_0; }

		//({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mod.left=current}
		public Action getModLeftAction_1_0() { return cModLeftAction_1_0; }

		//signo_op=signoModulo
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoModulo
		public RuleCall getSigno_opSignoModuloParserRuleCall_1_1_0() { return cSigno_opSignoModuloParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Igualdad
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Igualdad
		public RuleCall getRightIgualdadParserRuleCall_1_4_0() { return cRightIgualdadParserRuleCall_1_4_0; }
	}

	public class IgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Igualdad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightComparacionParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Igualdad operacion:
		//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
		//	right=Comparacion)*
		@Override public ParserRule getRule() { return rule; }

		//Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
		//right=Comparacion)*
		public Group getGroup() { return cGroup; }

		//Comparacion
		public RuleCall getComparacionParserRuleCall_0() { return cComparacionParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'* right=Comparacion)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=Comparacion
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//Comparacion
		public RuleCall getRightComparacionParserRuleCall_1_4_0() { return cRightComparacionParserRuleCall_1_4_0; }
	}

	public class ComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Comparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_1_3_0 = (Keyword)cNegacionesFinalesAssignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightSumaRestaParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Comparacion operacion:
		//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
		//	right=SumaResta)*
		@Override public ParserRule getRule() { return rule; }

		//SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
		//right=SumaResta)*
		public Group getGroup() { return cGroup; }

		//SumaResta
		public RuleCall getSumaRestaParserRuleCall_0() { return cSumaRestaParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'* right=SumaResta)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_2_0() { return cNegacionesFinalesHyphenMinusKeyword_1_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_3() { return cNegacionesFinalesAssignment_1_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_3_0() { return cNegacionesFinalesNoKeyword_1_3_0; }

		//right=SumaResta
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//SumaResta
		public RuleCall getRightSumaRestaParserRuleCall_1_4_0() { return cRightSumaRestaParserRuleCall_1_4_0; }
	}

	public class SumaRestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.SumaResta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_1_0 = (Keyword)cNegacionesFinalesAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesNoKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightMultiplicacionDivisionParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//SumaResta operacion:
		//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivision
		public RuleCall getMultiplicacionDivisionParserRuleCall_0() { return cMultiplicacionDivisionParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta) negacionesFinales+='-'*
		//negacionesFinales+='no'* right=MultiplicacionDivision)*
		public Group getGroup_1() { return cGroup_1; }

		//({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_1() { return cNegacionesFinalesAssignment_1_1; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_1_0() { return cNegacionesFinalesHyphenMinusKeyword_1_1_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_2_0() { return cNegacionesFinalesNoKeyword_1_2_0; }

		//right=MultiplicacionDivision
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//MultiplicacionDivision
		public RuleCall getRightMultiplicacionDivisionParserRuleCall_1_3_0() { return cRightMultiplicacionDivisionParserRuleCall_1_3_0; }
	}

	public class MultiplicacionDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.MultiplicacionDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cDivLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cSigno_opSignoDivParserRuleCall_1_0_2_1_0 = (RuleCall)cSigno_opAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_1_1_0 = (Keyword)cNegacionesFinalesAssignment_1_1.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cNegacionesFinalesNoKeyword_1_2_0 = (Keyword)cNegacionesFinalesAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPrimariaParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//MultiplicacionDivision operacion:
		//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision
		//	| {Div.left=current} signo_op=signoDiv) negacionesFinales+='-'* negacionesFinales+='no'* right=Primaria)*
		@Override public ParserRule getRule() { return rule; }

		//Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision |
		//{Div.left=current} signo_op=signoDiv) negacionesFinales+='-'* negacionesFinales+='no'* right=Primaria)*
		public Group getGroup() { return cGroup; }

		//Primaria
		public RuleCall getPrimariaParserRuleCall_0() { return cPrimariaParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision |
		//{Div.left=current} signo_op=signoDiv) negacionesFinales+='-'* negacionesFinales+='no'* right=Primaria)*
		public Group getGroup_1() { return cGroup_1; }

		//({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision |
		//{Div.left=current} signo_op=signoDiv)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{Division.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//{Div.left=current} signo_op=signoDiv
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_2_0() { return cDivLeftAction_1_0_2_0; }

		//signo_op=signoDiv
		public Assignment getSigno_opAssignment_1_0_2_1() { return cSigno_opAssignment_1_0_2_1; }

		//signoDiv
		public RuleCall getSigno_opSignoDivParserRuleCall_1_0_2_1_0() { return cSigno_opSignoDivParserRuleCall_1_0_2_1_0; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_1_1() { return cNegacionesFinalesAssignment_1_1; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_1_1_0() { return cNegacionesFinalesHyphenMinusKeyword_1_1_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_1_2() { return cNegacionesFinalesAssignment_1_2; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_1_2_0() { return cNegacionesFinalesNoKeyword_1_2_0; }

		//right=Primaria
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//Primaria
		public RuleCall getRightPrimariaParserRuleCall_1_3_0() { return cRightPrimariaParserRuleCall_1_3_0; }
	}

	public class OperacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.operacionIndice");
		private final RuleCall cOrIndiceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//operacionIndice operacion:
		//	OrIndice
		@Override public ParserRule getRule() { return rule; }

		//OrIndice
		public RuleCall getOrIndiceParserRuleCall() { return cOrIndiceParserRuleCall; }
	}

	public class OrIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.OrIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoOrParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrIndice operacion:
		//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
		@Override public ParserRule getRule() { return rule; }

		//AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup() { return cGroup; }

		//AndIndice
		public RuleCall getAndIndiceParserRuleCall_0() { return cAndIndiceParserRuleCall_0; }

		//({Or.left=current} signo_op=signoOr right=AndIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//signo_op=signoOr
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoOr
		public RuleCall getSigno_opSignoOrParserRuleCall_1_1_0() { return cSigno_opSignoOrParserRuleCall_1_1_0; }

		//right=AndIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndIndice
		public RuleCall getRightAndIndiceParserRuleCall_1_2_0() { return cRightAndIndiceParserRuleCall_1_2_0; }
	}

	public class AndIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.AndIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIgualdadIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoAndParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIgualdadIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndIndice operacion:
		//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		@Override public ParserRule getRule() { return rule; }

		//IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup() { return cGroup; }

		//IgualdadIndice
		public RuleCall getIgualdadIndiceParserRuleCall_0() { return cIgualdadIndiceParserRuleCall_0; }

		//({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//signo_op=signoAnd
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoAnd
		public RuleCall getSigno_opSignoAndParserRuleCall_1_1_0() { return cSigno_opSignoAndParserRuleCall_1_1_0; }

		//right=IgualdadIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//IgualdadIndice
		public RuleCall getRightIgualdadIndiceParserRuleCall_1_2_0() { return cRightIgualdadIndiceParserRuleCall_1_2_0; }
	}

	public class IgualdadIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.IgualdadIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIgualdadLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoIgualdadParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparacionIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IgualdadIndice operacion:
		//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		@Override public ParserRule getRule() { return rule; }

		//ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup() { return cGroup; }

		//ComparacionIndice
		public RuleCall getComparacionIndiceParserRuleCall_0() { return cComparacionIndiceParserRuleCall_0; }

		//({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Igualdad.left=current}
		public Action getIgualdadLeftAction_1_0() { return cIgualdadLeftAction_1_0; }

		//signo_op=signoIgualdad
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoIgualdad
		public RuleCall getSigno_opSignoIgualdadParserRuleCall_1_1_0() { return cSigno_opSignoIgualdadParserRuleCall_1_1_0; }

		//right=ComparacionIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparacionIndice
		public RuleCall getRightComparacionIndiceParserRuleCall_1_2_0() { return cRightComparacionIndiceParserRuleCall_1_2_0; }
	}

	public class ComparacionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.ComparacionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumaRestaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigno_opSignoComparacionParserRuleCall_1_1_0 = (RuleCall)cSigno_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSumaRestaIndiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparacionIndice operacion:
		//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		@Override public ParserRule getRule() { return rule; }

		//SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup() { return cGroup; }

		//SumaRestaIndice
		public RuleCall getSumaRestaIndiceParserRuleCall_0() { return cSumaRestaIndiceParserRuleCall_0; }

		//({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparacion.left=current}
		public Action getComparacionLeftAction_1_0() { return cComparacionLeftAction_1_0; }

		//signo_op=signoComparacion
		public Assignment getSigno_opAssignment_1_1() { return cSigno_opAssignment_1_1; }

		//signoComparacion
		public RuleCall getSigno_opSignoComparacionParserRuleCall_1_1_0() { return cSigno_opSignoComparacionParserRuleCall_1_1_0; }

		//right=SumaRestaIndice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SumaRestaIndice
		public RuleCall getRightSumaRestaIndiceParserRuleCall_1_2_0() { return cRightSumaRestaIndiceParserRuleCall_1_2_0; }
	}

	public class SumaRestaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.SumaRestaIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacionDivisionIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumaLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoSumaParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRestaLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoRestaParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SumaRestaIndice operacion:
		//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//	right=MultiplicacionDivisionIndice)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup() { return cGroup; }

		//MultiplicacionDivisionIndice
		public RuleCall getMultiplicacionDivisionIndiceParserRuleCall_0() { return cMultiplicacionDivisionIndiceParserRuleCall_0; }

		//(({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		//right=MultiplicacionDivisionIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Suma.left=current} signo_op=signoSuma
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Suma.left=current}
		public Action getSumaLeftAction_1_0_0_0() { return cSumaLeftAction_1_0_0_0; }

		//signo_op=signoSuma
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoSuma
		public RuleCall getSigno_opSignoSumaParserRuleCall_1_0_0_1_0() { return cSigno_opSignoSumaParserRuleCall_1_0_0_1_0; }

		//{Resta.left=current} signo_op=signoResta
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Resta.left=current}
		public Action getRestaLeftAction_1_0_1_0() { return cRestaLeftAction_1_0_1_0; }

		//signo_op=signoResta
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoResta
		public RuleCall getSigno_opSignoRestaParserRuleCall_1_0_1_1_0() { return cSigno_opSignoRestaParserRuleCall_1_0_1_1_0; }

		//right=MultiplicacionDivisionIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicacionDivisionIndice
		public RuleCall getRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0() { return cRightMultiplicacionDivisionIndiceParserRuleCall_1_1_0; }
	}

	public class MultiplicacionDivisionIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.MultiplicacionDivisionIndice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimariaIndiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicacionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0 = (RuleCall)cSigno_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0 = (RuleCall)cSigno_opAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cDivLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cSigno_opAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cSigno_opSignoDivParserRuleCall_1_0_2_1_0 = (RuleCall)cSigno_opAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimariaIndiceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicacionDivisionIndice operacion:
		//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
		//	signo_op=signoDivision | {Div.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		@Override public ParserRule getRule() { return rule; }

		//PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
		//signo_op=signoDivision | {Div.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		public Group getGroup() { return cGroup; }

		//PrimariaIndice
		public RuleCall getPrimariaIndiceParserRuleCall_0() { return cPrimariaIndiceParserRuleCall_0; }

		//(({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision |
		//{Div.left=current} signo_op=signoDiv) right=PrimariaIndice)*
		public Group getGroup_1() { return cGroup_1; }

		//({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision |
		//{Div.left=current} signo_op=signoDiv)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplicacion.left=current} signo_op=signoMultiplicacion
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplicacion.left=current}
		public Action getMultiplicacionLeftAction_1_0_0_0() { return cMultiplicacionLeftAction_1_0_0_0; }

		//signo_op=signoMultiplicacion
		public Assignment getSigno_opAssignment_1_0_0_1() { return cSigno_opAssignment_1_0_0_1; }

		//signoMultiplicacion
		public RuleCall getSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0() { return cSigno_opSignoMultiplicacionParserRuleCall_1_0_0_1_0; }

		//{Division.left=current} signo_op=signoDivision
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//signo_op=signoDivision
		public Assignment getSigno_opAssignment_1_0_1_1() { return cSigno_opAssignment_1_0_1_1; }

		//signoDivision
		public RuleCall getSigno_opSignoDivisionParserRuleCall_1_0_1_1_0() { return cSigno_opSignoDivisionParserRuleCall_1_0_1_1_0; }

		//{Div.left=current} signo_op=signoDiv
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_2_0() { return cDivLeftAction_1_0_2_0; }

		//signo_op=signoDiv
		public Assignment getSigno_opAssignment_1_0_2_1() { return cSigno_opAssignment_1_0_2_1; }

		//signoDiv
		public RuleCall getSigno_opSignoDivParserRuleCall_1_0_2_1_0() { return cSigno_opSignoDivParserRuleCall_1_0_2_1_0; }

		//right=PrimariaIndice
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimariaIndice
		public RuleCall getRightPrimariaIndiceParserRuleCall_1_1_0() { return cRightPrimariaIndiceParserRuleCall_1_1_0; }
	}

	public class PrimariaIndiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.PrimariaIndice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumeroEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableIDAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		
		//PrimariaIndice operacion:
		//	{NumeroEntero} valor=EInt
		//	| {VariableID} nombre=EString
		@Override public ParserRule getRule() { return rule; }

		//{NumeroEntero} valor=EInt | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumeroEntero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{NumeroEntero}
		public Action getNumeroEnteroAction_0_0() { return cNumeroEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_1() { return cGroup_1; }

		//{VariableID}
		public Action getVariableIDAction_1_0() { return cVariableIDAction_1_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_1_0() { return cNombreEStringParserRuleCall_1_1_0; }
	}

	public class PrimariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Primaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariablesBasicasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariablesComplejasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncionesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperacionParentesisParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primaria operacion:
		//	VariablesBasicas | VariablesComplejas
		//	| Funciones
		//	| OperacionParentesis
		@Override public ParserRule getRule() { return rule; }

		//VariablesBasicas | VariablesComplejas | Funciones | OperacionParentesis
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariablesBasicas
		public RuleCall getVariablesBasicasParserRuleCall_0() { return cVariablesBasicasParserRuleCall_0; }

		//VariablesComplejas
		public RuleCall getVariablesComplejasParserRuleCall_1() { return cVariablesComplejasParserRuleCall_1; }

		//Funciones
		public RuleCall getFuncionesParserRuleCall_2() { return cFuncionesParserRuleCall_2; }

		//OperacionParentesis
		public RuleCall getOperacionParentesisParserRuleCall_3() { return cOperacionParentesisParserRuleCall_3; }
	}

	public class OperacionCompletaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.OperacionCompleta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperacionCompletaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNegacionesInicialesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegacionesInicialesHyphenMinusKeyword_1_0 = (Keyword)cNegacionesInicialesAssignment_1.eContents().get(0);
		private final Assignment cNegacionesInicialesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegacionesInicialesNoKeyword_2_0 = (Keyword)cNegacionesInicialesAssignment_2.eContents().get(0);
		private final Assignment cValor_operacionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValor_operacionOperacionParserRuleCall_3_0 = (RuleCall)cValor_operacionAssignment_3.eContents().get(0);
		
		//OperacionCompleta operacion:
		//	{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=operacion
		@Override public ParserRule getRule() { return rule; }

		//{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=operacion
		public Group getGroup() { return cGroup; }

		//{OperacionCompleta}
		public Action getOperacionCompletaAction_0() { return cOperacionCompletaAction_0; }

		//negacionesIniciales+='-'*
		public Assignment getNegacionesInicialesAssignment_1() { return cNegacionesInicialesAssignment_1; }

		//'-'
		public Keyword getNegacionesInicialesHyphenMinusKeyword_1_0() { return cNegacionesInicialesHyphenMinusKeyword_1_0; }

		//negacionesIniciales+='no'*
		public Assignment getNegacionesInicialesAssignment_2() { return cNegacionesInicialesAssignment_2; }

		//'no'
		public Keyword getNegacionesInicialesNoKeyword_2_0() { return cNegacionesInicialesNoKeyword_2_0; }

		//valor_operacion=operacion
		public Assignment getValor_operacionAssignment_3() { return cValor_operacionAssignment_3; }

		//operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_3_0() { return cValor_operacionOperacionParserRuleCall_3_0; }
	}

	public class OperacionParentesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.OperacionParentesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperacionParentesisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegacionesFinalesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegacionesFinalesHyphenMinusKeyword_2_0 = (Keyword)cNegacionesFinalesAssignment_2.eContents().get(0);
		private final Assignment cNegacionesFinalesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNegacionesFinalesNoKeyword_3_0 = (Keyword)cNegacionesFinalesAssignment_3.eContents().get(0);
		private final Assignment cValor_operacionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValor_operacionOperacionParserRuleCall_4_0 = (RuleCall)cValor_operacionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperacionParentesis operacion:
		//	{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=operacion ')'
		@Override public ParserRule getRule() { return rule; }

		//{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=operacion ')'
		public Group getGroup() { return cGroup; }

		//{OperacionParentesis}
		public Action getOperacionParentesisAction_0() { return cOperacionParentesisAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//negacionesFinales+='-'*
		public Assignment getNegacionesFinalesAssignment_2() { return cNegacionesFinalesAssignment_2; }

		//'-'
		public Keyword getNegacionesFinalesHyphenMinusKeyword_2_0() { return cNegacionesFinalesHyphenMinusKeyword_2_0; }

		//negacionesFinales+='no'*
		public Assignment getNegacionesFinalesAssignment_3() { return cNegacionesFinalesAssignment_3; }

		//'no'
		public Keyword getNegacionesFinalesNoKeyword_3_0() { return cNegacionesFinalesNoKeyword_3_0; }

		//valor_operacion=operacion
		public Assignment getValor_operacionAssignment_4() { return cValor_operacionAssignment_4; }

		//operacion
		public RuleCall getValor_operacionOperacionParserRuleCall_4_0() { return cValor_operacionOperacionParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FuncionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Funciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLlamadaFuncionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNombreAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_0_1_0 = (RuleCall)cNombreAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cOperadoresAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cOperadoresOperacionCompletaParserRuleCall_0_2_0_0 = (RuleCall)cOperadoresAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cOperadoresAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cOperadoresOperacionCompletaParserRuleCall_0_2_1_1_0 = (RuleCall)cOperadoresAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInternasAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNombreAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombreNombreInternaParserRuleCall_1_1_0 = (RuleCall)cNombreAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOperadoresAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOperadoresOperacionCompletaParserRuleCall_1_2_0_0 = (RuleCall)cOperadoresAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cOperadoresAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cOperadoresOperacionCompletaParserRuleCall_1_2_1_1_0 = (RuleCall)cOperadoresAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Funciones operacion:
		//	{LlamadaFuncion} nombre=NOMBRE_FUN (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')' |
		//	{Internas} nombre=NombreInterna (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')'
		@Override public ParserRule getRule() { return rule; }

		//{LlamadaFuncion} nombre=NOMBRE_FUN (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')' |
		//{Internas} nombre=NombreInterna (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LlamadaFuncion} nombre=NOMBRE_FUN (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')'
		public Group getGroup_0() { return cGroup_0; }

		//{LlamadaFuncion}
		public Action getLlamadaFuncionAction_0_0() { return cLlamadaFuncionAction_0_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_0_1() { return cNombreAssignment_0_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_0_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_0_1_0; }

		//(operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//operadores+=OperacionCompleta
		public Assignment getOperadoresAssignment_0_2_0() { return cOperadoresAssignment_0_2_0; }

		//OperacionCompleta
		public RuleCall getOperadoresOperacionCompletaParserRuleCall_0_2_0_0() { return cOperadoresOperacionCompletaParserRuleCall_0_2_0_0; }

		//(',' operadores+=OperacionCompleta)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }

		//operadores+=OperacionCompleta
		public Assignment getOperadoresAssignment_0_2_1_1() { return cOperadoresAssignment_0_2_1_1; }

		//OperacionCompleta
		public RuleCall getOperadoresOperacionCompletaParserRuleCall_0_2_1_1_0() { return cOperadoresOperacionCompletaParserRuleCall_0_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//{Internas} nombre=NombreInterna (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')'
		public Group getGroup_1() { return cGroup_1; }

		//{Internas}
		public Action getInternasAction_1_0() { return cInternasAction_1_0; }

		//nombre=NombreInterna
		public Assignment getNombreAssignment_1_1() { return cNombreAssignment_1_1; }

		//NombreInterna
		public RuleCall getNombreNombreInternaParserRuleCall_1_1_0() { return cNombreNombreInternaParserRuleCall_1_1_0; }

		//(operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//operadores+=OperacionCompleta
		public Assignment getOperadoresAssignment_1_2_0() { return cOperadoresAssignment_1_2_0; }

		//OperacionCompleta
		public RuleCall getOperadoresOperacionCompletaParserRuleCall_1_2_0_0() { return cOperadoresOperacionCompletaParserRuleCall_1_2_0_0; }

		//(',' operadores+=OperacionCompleta)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//operadores+=OperacionCompleta
		public Assignment getOperadoresAssignment_1_2_1_1() { return cOperadoresAssignment_1_2_1_1; }

		//OperacionCompleta
		public RuleCall getOperadoresOperacionCompletaParserRuleCall_1_2_1_1_0() { return cOperadoresOperacionCompletaParserRuleCall_1_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class VariablesComplejasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.VariablesComplejas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValorVectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNombre_vectorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNombre_vectorEStringParserRuleCall_0_1_0_0 = (RuleCall)cNombre_vectorAssignment_0_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cIndiceAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cIndiceOperacionIndiceParserRuleCall_0_1_2_0 = (RuleCall)cIndiceAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cCampoAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_0_2_1_0 = (RuleCall)cCampoAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValorMatrizAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cNombre_matrizAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNombre_matrizEStringParserRuleCall_1_1_0_0 = (RuleCall)cNombre_matrizAssignment_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPrimerIndiceAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0 = (RuleCall)cPrimerIndiceAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cSegundoIndiceAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0 = (RuleCall)cSegundoIndiceAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cCampoAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_1_2_1_0 = (RuleCall)cCampoAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValorRegistroAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNombre_registroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNombre_registroEStringParserRuleCall_2_1_0 = (RuleCall)cNombre_registroAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cCampoAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_3_0_0 = (RuleCall)cCampoAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cFullStopKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cCampoAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_3_1_1_0 = (RuleCall)cCampoAssignment_2_3_1_1.eContents().get(0);
		
		//VariablesComplejas operacion:
		//	{ValorVector} (nombre_vector=EString '[' indice=operacionIndice ']') ('.' campo+=CampoRegistro)?
		//	| {ValorMatriz} (nombre_matriz=EString '[' primerIndice=operacionIndice '][' segundoIndice=operacionIndice ']') ('.'
		//	campo+=CampoRegistro)?
		//	| {ValorRegistro} nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)*)
		@Override public ParserRule getRule() { return rule; }

		//{ValorVector} (nombre_vector=EString '[' indice=operacionIndice ']') ('.' campo+=CampoRegistro)? | {ValorMatriz}
		//(nombre_matriz=EString '[' primerIndice=operacionIndice '][' segundoIndice=operacionIndice ']') ('.'
		//campo+=CampoRegistro)? | {ValorRegistro} nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)*)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ValorVector} (nombre_vector=EString '[' indice=operacionIndice ']') ('.' campo+=CampoRegistro)?
		public Group getGroup_0() { return cGroup_0; }

		//{ValorVector}
		public Action getValorVectorAction_0_0() { return cValorVectorAction_0_0; }

		//(nombre_vector=EString '[' indice=operacionIndice ']')
		public Group getGroup_0_1() { return cGroup_0_1; }

		//nombre_vector=EString
		public Assignment getNombre_vectorAssignment_0_1_0() { return cNombre_vectorAssignment_0_1_0; }

		//EString
		public RuleCall getNombre_vectorEStringParserRuleCall_0_1_0_0() { return cNombre_vectorEStringParserRuleCall_0_1_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }

		//indice=operacionIndice
		public Assignment getIndiceAssignment_0_1_2() { return cIndiceAssignment_0_1_2; }

		//operacionIndice
		public RuleCall getIndiceOperacionIndiceParserRuleCall_0_1_2_0() { return cIndiceOperacionIndiceParserRuleCall_0_1_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }

		//('.' campo+=CampoRegistro)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//'.'
		public Keyword getFullStopKeyword_0_2_0() { return cFullStopKeyword_0_2_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_0_2_1() { return cCampoAssignment_0_2_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_0_2_1_0() { return cCampoCampoRegistroParserRuleCall_0_2_1_0; }

		//{ValorMatriz} (nombre_matriz=EString '[' primerIndice=operacionIndice '][' segundoIndice=operacionIndice ']') ('.'
		//campo+=CampoRegistro)?
		public Group getGroup_1() { return cGroup_1; }

		//{ValorMatriz}
		public Action getValorMatrizAction_1_0() { return cValorMatrizAction_1_0; }

		//(nombre_matriz=EString '[' primerIndice=operacionIndice '][' segundoIndice=operacionIndice ']')
		public Group getGroup_1_1() { return cGroup_1_1; }

		//nombre_matriz=EString
		public Assignment getNombre_matrizAssignment_1_1_0() { return cNombre_matrizAssignment_1_1_0; }

		//EString
		public RuleCall getNombre_matrizEStringParserRuleCall_1_1_0_0() { return cNombre_matrizEStringParserRuleCall_1_1_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//primerIndice=operacionIndice
		public Assignment getPrimerIndiceAssignment_1_1_2() { return cPrimerIndiceAssignment_1_1_2; }

		//operacionIndice
		public RuleCall getPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0() { return cPrimerIndiceOperacionIndiceParserRuleCall_1_1_2_0; }

		//']['
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_1_1_3() { return cRightSquareBracketLeftSquareBracketKeyword_1_1_3; }

		//segundoIndice=operacionIndice
		public Assignment getSegundoIndiceAssignment_1_1_4() { return cSegundoIndiceAssignment_1_1_4; }

		//operacionIndice
		public RuleCall getSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0() { return cSegundoIndiceOperacionIndiceParserRuleCall_1_1_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_1_5() { return cRightSquareBracketKeyword_1_1_5; }

		//('.' campo+=CampoRegistro)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_1_2_1() { return cCampoAssignment_1_2_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_1_2_1_0() { return cCampoCampoRegistroParserRuleCall_1_2_1_0; }

		//{ValorRegistro} nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)*)
		public Group getGroup_2() { return cGroup_2; }

		//{ValorRegistro}
		public Action getValorRegistroAction_2_0() { return cValorRegistroAction_2_0; }

		//nombre_registro=EString
		public Assignment getNombre_registroAssignment_2_1() { return cNombre_registroAssignment_2_1; }

		//EString
		public RuleCall getNombre_registroEStringParserRuleCall_2_1_0() { return cNombre_registroEStringParserRuleCall_2_1_0; }

		//'.'
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }

		//(campo+=CampoRegistro ('.' campo+=CampoRegistro)*)
		public Group getGroup_2_3() { return cGroup_2_3; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_3_0() { return cCampoAssignment_2_3_0; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_3_0_0() { return cCampoCampoRegistroParserRuleCall_2_3_0_0; }

		//('.' campo+=CampoRegistro)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//'.'
		public Keyword getFullStopKeyword_2_3_1_0() { return cFullStopKeyword_2_3_1_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_3_1_1() { return cCampoAssignment_2_3_1_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_3_1_1_0() { return cCampoCampoRegistroParserRuleCall_2_3_1_1_0; }
	}

	public class VariablesBasicasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.VariablesBasicas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumeroEnteroAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumeroDecimalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValorEFloatParserRuleCall_1_1_0 = (RuleCall)cValorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstCadenaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cContenidoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContenidoCADTerminalRuleCall_2_1_0 = (RuleCall)cContenidoAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCaracterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cContenidoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContenidoCARTerminalRuleCall_3_1_0 = (RuleCall)cContenidoAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cValorBooleanoAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValorBooleanoParserRuleCall_4_1_0 = (RuleCall)cValorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableIDAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNombreAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_5_1_0 = (RuleCall)cNombreAssignment_5_1.eContents().get(0);
		
		//VariablesBasicas operacion:
		//	{NumeroEntero} valor=EInt
		//	| {NumeroDecimal} valor=EFloat
		//	| {ConstCadena} contenido=CAD
		//	| {Caracter} contenido=CAR
		//	| {ValorBooleano} valor=Booleano
		//	| {VariableID} nombre=EString
		@Override public ParserRule getRule() { return rule; }

		//{NumeroEntero} valor=EInt | {NumeroDecimal} valor=EFloat | {ConstCadena} contenido=CAD | {Caracter} contenido=CAR |
		//{ValorBooleano} valor=Booleano | {VariableID} nombre=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumeroEntero} valor=EInt
		public Group getGroup_0() { return cGroup_0; }

		//{NumeroEntero}
		public Action getNumeroEnteroAction_0_0() { return cNumeroEnteroAction_0_0; }

		//valor=EInt
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0_1_0() { return cValorEIntParserRuleCall_0_1_0; }

		//{NumeroDecimal} valor=EFloat
		public Group getGroup_1() { return cGroup_1; }

		//{NumeroDecimal}
		public Action getNumeroDecimalAction_1_0() { return cNumeroDecimalAction_1_0; }

		//valor=EFloat
		public Assignment getValorAssignment_1_1() { return cValorAssignment_1_1; }

		//EFloat
		public RuleCall getValorEFloatParserRuleCall_1_1_0() { return cValorEFloatParserRuleCall_1_1_0; }

		//{ConstCadena} contenido=CAD
		public Group getGroup_2() { return cGroup_2; }

		//{ConstCadena}
		public Action getConstCadenaAction_2_0() { return cConstCadenaAction_2_0; }

		//contenido=CAD
		public Assignment getContenidoAssignment_2_1() { return cContenidoAssignment_2_1; }

		//CAD
		public RuleCall getContenidoCADTerminalRuleCall_2_1_0() { return cContenidoCADTerminalRuleCall_2_1_0; }

		//{Caracter} contenido=CAR
		public Group getGroup_3() { return cGroup_3; }

		//{Caracter}
		public Action getCaracterAction_3_0() { return cCaracterAction_3_0; }

		//contenido=CAR
		public Assignment getContenidoAssignment_3_1() { return cContenidoAssignment_3_1; }

		//CAR
		public RuleCall getContenidoCARTerminalRuleCall_3_1_0() { return cContenidoCARTerminalRuleCall_3_1_0; }

		//{ValorBooleano} valor=Booleano
		public Group getGroup_4() { return cGroup_4; }

		//{ValorBooleano}
		public Action getValorBooleanoAction_4_0() { return cValorBooleanoAction_4_0; }

		//valor=Booleano
		public Assignment getValorAssignment_4_1() { return cValorAssignment_4_1; }

		//Booleano
		public RuleCall getValorBooleanoParserRuleCall_4_1_0() { return cValorBooleanoParserRuleCall_4_1_0; }

		//{VariableID} nombre=EString
		public Group getGroup_5() { return cGroup_5; }

		//{VariableID}
		public Action getVariableIDAction_5_0() { return cVariableIDAction_5_0; }

		//nombre=EString
		public Assignment getNombreAssignment_5_1() { return cNombreAssignment_5_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_5_1_0() { return cNombreEStringParserRuleCall_5_1_0; }
	}

	public class SinoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Sino");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSinoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_0_0 = (RuleCall)cSentenciasAssignment_2_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_1_0 = (RuleCall)cSentenciasAssignment_2_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveDevolverParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		
		//Sino:
		//	{Sino}
		//	'else' (sentencias+=Sentencias sentencias+=Sentencias*)?
		//	devuelve=Devolver?;
		@Override public ParserRule getRule() { return rule; }

		//{Sino} 'else' (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//{Sino}
		public Action getSinoAction_0() { return cSinoAction_0; }

		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_2() { return cGroup_2; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_2_0() { return cSentenciasAssignment_2_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_0_0() { return cSentenciasSentenciasParserRuleCall_2_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_2_1() { return cSentenciasAssignment_2_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_1_0() { return cSentenciasSentenciasParserRuleCall_2_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_3_0() { return cDevuelveDevolverParserRuleCall_3_0; }
	}

	public class DevolverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Devolver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDevolverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDevuelveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDevuelveOperacionCompletaParserRuleCall_2_0 = (RuleCall)cDevuelveAssignment_2.eContents().get(0);
		
		//Devolver:
		//	{Devolver}
		//	'return' devuelve=OperacionCompleta;
		@Override public ParserRule getRule() { return rule; }

		//{Devolver} 'return' devuelve=OperacionCompleta
		public Group getGroup() { return cGroup; }

		//{Devolver}
		public Action getDevolverAction_0() { return cDevolverAction_0; }

		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//devuelve=OperacionCompleta
		public Assignment getDevuelveAssignment_2() { return cDevuelveAssignment_2; }

		//OperacionCompleta
		public RuleCall getDevuelveOperacionCompletaParserRuleCall_2_0() { return cDevuelveOperacionCompletaParserRuleCall_2_0; }
	}

	public class ParametroFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.ParametroFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPasoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPasoTipoPasoParserRuleCall_0_0 = (RuleCall)cPasoAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		////neg returns neg:
		////	"no" / * TODO: implement this rule and an appropriate IValueConverter * /;
		//ParametroFuncion:
		//	paso=TipoPaso
		//	tipo=Tipo ": "
		//	variable=Variable;
		@Override public ParserRule getRule() { return rule; }

		//paso=TipoPaso tipo=Tipo ": " variable=Variable
		public Group getGroup() { return cGroup; }

		//paso=TipoPaso
		public Assignment getPasoAssignment_0() { return cPasoAssignment_0; }

		//TipoPaso
		public RuleCall getPasoTipoPasoParserRuleCall_0_0() { return cPasoTipoPasoParserRuleCall_0_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}

	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclaracionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_5_1_0 = (RuleCall)cDeclaracionAssignment_5_1.eContents().get(0);
		private final Keyword cInitiationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSentenciasAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSentenciasSentenciasParserRuleCall_7_0 = (RuleCall)cSentenciasAssignment_7.eContents().get(0);
		private final Assignment cDevuelveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDevuelveDevolverParserRuleCall_8_0 = (RuleCall)cDevuelveAssignment_8.eContents().get(0);
		private final Keyword cEnd_functionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Funcion:
		//	tipo=TipoVariable 'function'
		//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')' ('var'
		//	declaracion+=Declaracion*)?
		//	'initiation'
		//	sentencias+=Sentencias*
		//	devuelve=Devolver?
		//	'end_function';
		@Override public ParserRule getRule() { return rule; }

		//tipo=TipoVariable 'function' nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ')' ('var' declaracion+=Declaracion*)? 'initiation' sentencias+=Sentencias*
		//devuelve=Devolver? 'end_function'
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_2_0() { return cNombreNOMBRE_FUNTerminalRuleCall_2_0; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//('var' declaracion+=Declaracion*)?
		public Group getGroup_5() { return cGroup_5; }

		//'var'
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_5_1() { return cDeclaracionAssignment_5_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_5_1_0() { return cDeclaracionDeclaracionParserRuleCall_5_1_0; }

		//'initiation'
		public Keyword getInitiationKeyword_6() { return cInitiationKeyword_6; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_7() { return cSentenciasAssignment_7; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_7_0() { return cSentenciasSentenciasParserRuleCall_7_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_8() { return cDevuelveAssignment_8; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_8_0() { return cDevuelveDevolverParserRuleCall_8_0; }

		//'end_function'
		public Keyword getEnd_functionKeyword_9() { return cEnd_functionKeyword_9; }
	}

	public class ProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Procedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreNOMBRE_FUNTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametrofuncionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_2_0_0 = (RuleCall)cParametrofuncionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_2_1_1_0 = (RuleCall)cParametrofuncionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclaracionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_4_1_0 = (RuleCall)cDeclaracionAssignment_4_1.eContents().get(0);
		private final Keyword cInitiationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSentenciasSentenciasParserRuleCall_6_0 = (RuleCall)cSentenciasAssignment_6.eContents().get(0);
		private final Keyword cEnd_procedureKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Procedimiento:
		//	'procedure'
		//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')' ('var'
		//	declaracion+=Declaracion*)?
		//	'initiation'
		//	sentencias+=Sentencias*
		//	'end_procedure';
		@Override public ParserRule getRule() { return rule; }

		//'procedure' nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')' ('var'
		//declaracion+=Declaracion*)? 'initiation' sentencias+=Sentencias* 'end_procedure'
		public Group getGroup() { return cGroup; }

		//'procedure'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//nombre=NOMBRE_FUN
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//NOMBRE_FUN
		public RuleCall getNombreNOMBRE_FUNTerminalRuleCall_1_0() { return cNombreNOMBRE_FUNTerminalRuleCall_1_0; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_2_0() { return cParametrofuncionAssignment_2_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_2_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_2_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_2_1_1() { return cParametrofuncionAssignment_2_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_2_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//('var' declaracion+=Declaracion*)?
		public Group getGroup_4() { return cGroup_4; }

		//'var'
		public Keyword getVarKeyword_4_0() { return cVarKeyword_4_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_4_1() { return cDeclaracionAssignment_4_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_4_1_0() { return cDeclaracionDeclaracionParserRuleCall_4_1_0; }

		//'initiation'
		public Keyword getInitiationKeyword_5() { return cInitiationKeyword_5; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_6() { return cSentenciasAssignment_6; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_6_0() { return cSentenciasSentenciasParserRuleCall_6_0; }

		//'end_procedure'
		public Keyword getEnd_procedureKeyword_7() { return cEnd_procedureKeyword_7; }
	}

	public class TipoPasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.TipoPaso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIOKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TipoPaso:
		//	'I' | 'I/O' | 'O';
		@Override public ParserRule getRule() { return rule; }

		//'I' | 'I/O' | 'O'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'I'
		public Keyword getIKeyword_0() { return cIKeyword_0; }

		//'I/O'
		public Keyword getIOKeyword_1() { return cIOKeyword_1; }

		//'O'
		public Keyword getOKeyword_2() { return cOKeyword_2; }
	}

	public class BooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.Booleano");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Booleano:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }

		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final CodigoElements pCodigo;
	private final AlgoritmoElements pAlgoritmo;
	private final ModuloElements pModulo;
	private final ImplementacionElements pImplementacion;
	private final CabeceraSubprocesoElements pCabeceraSubproceso;
	private final CabeceraProcedimientoElements pCabeceraProcedimiento;
	private final CabeceraFuncionElements pCabeceraFuncion;
	private final TipoComplejoElements pTipoComplejo;
	private final SubprocesoElements pSubproceso;
	private final TerminalRule tSL_COMMENT;
	private final ComentarioElements pComentario;
	private final SentenciasElements pSentencias;
	private final BloqueElements pBloque;
	private final DeclaracionElements pDeclaracion;
	private final FuncionFicheroAbrirElements pFuncionFicheroAbrir;
	private final FuncionFicheroCerrarElements pFuncionFicheroCerrar;
	private final ModoAperturaElements pModoApertura;
	private final TerminalRule tNOMBRE_FUN;
	private final NombreInternaElements pNombreInterna;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final CampoRegistroElements pCampoRegistro;
	private final TipoElements pTipo;
	private final TipoDefinidoElements pTipoDefinido;
	private final TipoExistenteElements pTipoExistente;
	private final ConstantesElements pConstantes;
	private final VectorElements pVector;
	private final MatrizElements pMatriz;
	private final RegistroElements pRegistro;
	private final ArchivoElements pArchivo;
	private final EnumeradoElements pEnumerado;
	private final SubrangoElements pSubrango;
	private final SubrangoNumericoElements pSubrangoNumerico;
	private final SubrangoEnumeradoElements pSubrangoEnumerado;
	private final InicioElements pInicio;
	private final EStringElements pEString;
	private final DeclaracionVariableElements pDeclaracionVariable;
	private final DeclaracionPropiaElements pDeclaracionPropia;
	private final AsignacionElements pAsignacion;
	private final AsignacionNormalElements pAsignacionNormal;
	private final AsignacionComplejaElements pAsignacionCompleja;
	private final EscribirElements pEscribir;
	private final LeerElements pLeer;
	private final SiElements pSi;
	private final MientrasElements pMientras;
	private final RepetirElements pRepetir;
	private final DesdeElements pDesde;
	private final CasoElements pCaso;
	private final SegunElements pSegun;
	private final TipoVariableElements pTipoVariable;
	private final VariableElements pVariable;
	private final TerminalRule tCAD;
	private final TerminalRule tCAR;
	private final TerminalRule tCOMENT;
	private final SignoElements pSigno;
	private final SignoOrElements pSignoOr;
	private final SignoAndElements pSignoAnd;
	private final SignoIgualdadElements pSignoIgualdad;
	private final SignoComparacionElements pSignoComparacion;
	private final SignoSumaElements pSignoSuma;
	private final SignoRestaElements pSignoResta;
	private final SignoMultiplicacionElements pSignoMultiplicacion;
	private final SignoDivisionElements pSignoDivision;
	private final SignoModuloElements pSignoModulo;
	private final SignoDivElements pSignoDiv;
	private final OperacionElements pOperacion;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final ModElements pMod;
	private final IgualdadElements pIgualdad;
	private final ComparacionElements pComparacion;
	private final SumaRestaElements pSumaResta;
	private final MultiplicacionDivisionElements pMultiplicacionDivision;
	private final OperacionIndiceElements pOperacionIndice;
	private final OrIndiceElements pOrIndice;
	private final AndIndiceElements pAndIndice;
	private final IgualdadIndiceElements pIgualdadIndice;
	private final ComparacionIndiceElements pComparacionIndice;
	private final SumaRestaIndiceElements pSumaRestaIndice;
	private final MultiplicacionDivisionIndiceElements pMultiplicacionDivisionIndice;
	private final PrimariaIndiceElements pPrimariaIndice;
	private final PrimariaElements pPrimaria;
	private final OperacionCompletaElements pOperacionCompleta;
	private final OperacionParentesisElements pOperacionParentesis;
	private final FuncionesElements pFunciones;
	private final VariablesComplejasElements pVariablesComplejas;
	private final VariablesBasicasElements pVariablesBasicas;
	private final SinoElements pSino;
	private final DevolverElements pDevolver;
	private final ParametroFuncionElements pParametroFuncion;
	private final FuncionElements pFuncion;
	private final ProcedimientoElements pProcedimiento;
	private final TipoPasoElements pTipoPaso;
	private final BooleanoElements pBooleano;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VaryGrammarEnglishGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCodigo = new CodigoElements();
		this.pAlgoritmo = new AlgoritmoElements();
		this.pModulo = new ModuloElements();
		this.pImplementacion = new ImplementacionElements();
		this.pCabeceraSubproceso = new CabeceraSubprocesoElements();
		this.pCabeceraProcedimiento = new CabeceraProcedimientoElements();
		this.pCabeceraFuncion = new CabeceraFuncionElements();
		this.pTipoComplejo = new TipoComplejoElements();
		this.pSubproceso = new SubprocesoElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.SL_COMMENT");
		this.pComentario = new ComentarioElements();
		this.pSentencias = new SentenciasElements();
		this.pBloque = new BloqueElements();
		this.pDeclaracion = new DeclaracionElements();
		this.pFuncionFicheroAbrir = new FuncionFicheroAbrirElements();
		this.pFuncionFicheroCerrar = new FuncionFicheroCerrarElements();
		this.pModoApertura = new ModoAperturaElements();
		this.tNOMBRE_FUN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.NOMBRE_FUN");
		this.pNombreInterna = new NombreInternaElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.pCampoRegistro = new CampoRegistroElements();
		this.pTipo = new TipoElements();
		this.pTipoDefinido = new TipoDefinidoElements();
		this.pTipoExistente = new TipoExistenteElements();
		this.pConstantes = new ConstantesElements();
		this.pVector = new VectorElements();
		this.pMatriz = new MatrizElements();
		this.pRegistro = new RegistroElements();
		this.pArchivo = new ArchivoElements();
		this.pEnumerado = new EnumeradoElements();
		this.pSubrango = new SubrangoElements();
		this.pSubrangoNumerico = new SubrangoNumericoElements();
		this.pSubrangoEnumerado = new SubrangoEnumeradoElements();
		this.pInicio = new InicioElements();
		this.pEString = new EStringElements();
		this.pDeclaracionVariable = new DeclaracionVariableElements();
		this.pDeclaracionPropia = new DeclaracionPropiaElements();
		this.pAsignacion = new AsignacionElements();
		this.pAsignacionNormal = new AsignacionNormalElements();
		this.pAsignacionCompleja = new AsignacionComplejaElements();
		this.pEscribir = new EscribirElements();
		this.pLeer = new LeerElements();
		this.pSi = new SiElements();
		this.pMientras = new MientrasElements();
		this.pRepetir = new RepetirElements();
		this.pDesde = new DesdeElements();
		this.pCaso = new CasoElements();
		this.pSegun = new SegunElements();
		this.pTipoVariable = new TipoVariableElements();
		this.pVariable = new VariableElements();
		this.tCAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CAD");
		this.tCAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.CAR");
		this.tCOMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish.COMENT");
		this.pSigno = new SignoElements();
		this.pSignoOr = new SignoOrElements();
		this.pSignoAnd = new SignoAndElements();
		this.pSignoIgualdad = new SignoIgualdadElements();
		this.pSignoComparacion = new SignoComparacionElements();
		this.pSignoSuma = new SignoSumaElements();
		this.pSignoResta = new SignoRestaElements();
		this.pSignoMultiplicacion = new SignoMultiplicacionElements();
		this.pSignoDivision = new SignoDivisionElements();
		this.pSignoModulo = new SignoModuloElements();
		this.pSignoDiv = new SignoDivElements();
		this.pOperacion = new OperacionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pMod = new ModElements();
		this.pIgualdad = new IgualdadElements();
		this.pComparacion = new ComparacionElements();
		this.pSumaResta = new SumaRestaElements();
		this.pMultiplicacionDivision = new MultiplicacionDivisionElements();
		this.pOperacionIndice = new OperacionIndiceElements();
		this.pOrIndice = new OrIndiceElements();
		this.pAndIndice = new AndIndiceElements();
		this.pIgualdadIndice = new IgualdadIndiceElements();
		this.pComparacionIndice = new ComparacionIndiceElements();
		this.pSumaRestaIndice = new SumaRestaIndiceElements();
		this.pMultiplicacionDivisionIndice = new MultiplicacionDivisionIndiceElements();
		this.pPrimariaIndice = new PrimariaIndiceElements();
		this.pPrimaria = new PrimariaElements();
		this.pOperacionCompleta = new OperacionCompletaElements();
		this.pOperacionParentesis = new OperacionParentesisElements();
		this.pFunciones = new FuncionesElements();
		this.pVariablesComplejas = new VariablesComplejasElements();
		this.pVariablesBasicas = new VariablesBasicasElements();
		this.pSino = new SinoElements();
		this.pDevolver = new DevolverElements();
		this.pParametroFuncion = new ParametroFuncionElements();
		this.pFuncion = new FuncionElements();
		this.pProcedimiento = new ProcedimientoElements();
		this.pTipoPaso = new TipoPasoElements();
		this.pBooleano = new BooleanoElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("vary.pseudocodigo.dsl.c.english.VaryGrammarEnglish".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Codigo:
	//	Algoritmo | Modulo;
	public CodigoElements getCodigoAccess() {
		return pCodigo;
	}
	
	public ParserRule getCodigoRule() {
		return getCodigoAccess().getRule();
	}

	//Algoritmo:
	//	'Algorithm' nombre=EString ('import'
	//	importaciones+=[Modulo]*
	//	'end_import')? ('const'
	//	constantes+=Constantes*)? ('type'
	//	tipocomplejo+=TipoComplejo*)? ('var'
	//	global+=Declaracion*)?
	//	funcion+=Subproceso*
	//	tiene=Inicio
	//	'end_algorithm';
	public AlgoritmoElements getAlgoritmoAccess() {
		return pAlgoritmo;
	}
	
	public ParserRule getAlgoritmoRule() {
		return getAlgoritmoAccess().getRule();
	}

	//Modulo:
	//	'Module' nombre=ID
	//	'import'
	//	importaciones+=[Modulo]*
	//	'end_import'
	//	'export' ('const'
	//	exporta_constantes+=EString*)? ('type'
	//	exporta_tipos+=EString*)? ('var'
	//	exporta_global+=Declaracion*)?
	//	exporta_funciones+=CabeceraSubproceso*
	//	'end_export'
	//	implementacion=Implementacion
	//	'end_module';
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}

	//Implementacion:
	//	{Implementacion}
	//	'implementation' ('const'
	//	constantes+=Constantes*)? ('type'
	//	tipocomplejo+=TipoComplejo*)? ('var'
	//	global+=Declaracion*)?
	//	funcion+=Subproceso*
	//	'end_implementation';
	public ImplementacionElements getImplementacionAccess() {
		return pImplementacion;
	}
	
	public ParserRule getImplementacionRule() {
		return getImplementacionAccess().getRule();
	}

	//CabeceraSubproceso:
	//	CabeceraProcedimiento | CabeceraFuncion;
	public CabeceraSubprocesoElements getCabeceraSubprocesoAccess() {
		return pCabeceraSubproceso;
	}
	
	public ParserRule getCabeceraSubprocesoRule() {
		return getCabeceraSubprocesoAccess().getRule();
	}

	//CabeceraProcedimiento:
	//	'procedure'
	//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')';
	public CabeceraProcedimientoElements getCabeceraProcedimientoAccess() {
		return pCabeceraProcedimiento;
	}
	
	public ParserRule getCabeceraProcedimientoRule() {
		return getCabeceraProcedimientoAccess().getRule();
	}

	//CabeceraFuncion:
	//	tipo=TipoVariable 'function'
	//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')';
	public CabeceraFuncionElements getCabeceraFuncionAccess() {
		return pCabeceraFuncion;
	}
	
	public ParserRule getCabeceraFuncionRule() {
		return getCabeceraFuncionAccess().getRule();
	}

	//TipoComplejo:
	//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
	public TipoComplejoElements getTipoComplejoAccess() {
		return pTipoComplejo;
	}
	
	public ParserRule getTipoComplejoRule() {
		return getTipoComplejoAccess().getRule();
	}

	//Subproceso:
	//	Funcion | Procedimiento;
	public SubprocesoElements getSubprocesoAccess() {
		return pSubproceso;
	}
	
	public ParserRule getSubprocesoRule() {
		return getSubprocesoAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//Comentario:
	//	{Comentario} SL_COMMENT mensaje=COMENT;
	public ComentarioElements getComentarioAccess() {
		return pComentario;
	}
	
	public ParserRule getComentarioRule() {
		return getComentarioAccess().getRule();
	}

	//Sentencias:
	//	Escribir | Leer | Bloque | FuncionFicheroAbrir | FuncionFicheroCerrar | Asignacion | Funciones;
	public SentenciasElements getSentenciasAccess() {
		return pSentencias;
	}
	
	public ParserRule getSentenciasRule() {
		return getSentenciasAccess().getRule();
	}

	//Bloque:
	//	Si | mientras | repetir | desde | segun;
	public BloqueElements getBloqueAccess() {
		return pBloque;
	}
	
	public ParserRule getBloqueRule() {
		return getBloqueAccess().getRule();
	}

	//Declaracion:
	//	DeclaracionVariable | DeclaracionPropia;
	public DeclaracionElements getDeclaracionAccess() {
		return pDeclaracion;
	}
	
	public ParserRule getDeclaracionRule() {
		return getDeclaracionAccess().getRule();
	}

	//FuncionFicheroAbrir:
	//	'open'
	//	'(' (variable+=Primaria ',' modo=ModoApertura ',' variable+=Primaria)
	//	')';
	public FuncionFicheroAbrirElements getFuncionFicheroAbrirAccess() {
		return pFuncionFicheroAbrir;
	}
	
	public ParserRule getFuncionFicheroAbrirRule() {
		return getFuncionFicheroAbrirAccess().getRule();
	}

	//FuncionFicheroCerrar:
	//	'close'
	//	'('
	//	variable=Primaria ')';
	public FuncionFicheroCerrarElements getFuncionFicheroCerrarAccess() {
		return pFuncionFicheroCerrar;
	}
	
	public ParserRule getFuncionFicheroCerrarRule() {
		return getFuncionFicheroCerrarAccess().getRule();
	}

	//ModoApertura ModoApertura:
	//	'writing' | 'reading'
	public ModoAperturaElements getModoAperturaAccess() {
		return pModoApertura;
	}
	
	public ParserRule getModoAperturaRule() {
		return getModoAperturaAccess().getRule();
	}

	//terminal NOMBRE_FUN:
	//	('a'..'z' | 'A'..'Z' | '0'..'9' | '_')* '(';
	public TerminalRule getNOMBRE_FUNRule() {
		return tNOMBRE_FUN;
	} 

	//NombreInterna:
	//	'cos(' | 'square(' | 'exp(' | 'ln(' | 'log(' | 'sin(' | 'sqrt(' | 'length(' | 'concatena(' | 'copy(';
	public NombreInternaElements getNombreInternaAccess() {
		return pNombreInterna;
	}
	
	public ParserRule getNombreInternaRule() {
		return getNombreInternaAccess().getRule();
	}

	//EInt ecore::EInt:
	//	INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	////terminal EXPONENT: ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
	//EFloat ecore::EFloat:
	//	INT '.' INT (('E' | 'e') ('+' | '-')? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	////('0'..'9')+ '.' ('0'..'9')* EXPONENT?
	////|   '.' ('0'..'9')+ EXPONENT?
	////|   ('0'..'9')+ EXPONENT
	////;
	////ValorRegistro returns ValorRegistro:
	////	nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)* );
	////ValorVector returns ValorVector:
	////	((nombre_vector=EString)'['(indice=NumeroEntero | indice=VariableID)']') ('.' (campo+=CampoRegistro) )?;
	//CampoRegistro:
	//	nombre_campo=EString;
	public CampoRegistroElements getCampoRegistroAccess() {
		return pCampoRegistro;
	}
	
	public ParserRule getCampoRegistroRule() {
		return getCampoRegistroAccess().getRule();
	}

	//Tipo:
	//	TipoDefinido | TipoExistente;
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}

	//TipoDefinido:
	//	tipo=EString;
	public TipoDefinidoElements getTipoDefinidoAccess() {
		return pTipoDefinido;
	}
	
	public ParserRule getTipoDefinidoRule() {
		return getTipoDefinidoAccess().getRule();
	}

	//TipoExistente:
	//	tipo=TipoVariable;
	public TipoExistenteElements getTipoExistenteAccess() {
		return pTipoExistente;
	}
	
	public ParserRule getTipoExistenteRule() {
		return getTipoExistenteAccess().getRule();
	}

	//Constantes:
	//	variable=Variable '=' valor=Primaria;
	public ConstantesElements getConstantesAccess() {
		return pConstantes;
	}
	
	public ParserRule getConstantesRule() {
		return getConstantesAccess().getRule();
	}

	//Vector:
	//	'vector' '[' valor=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString;
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Matriz:
	//	'matrix' '[' valor+=Primaria '][' valor+=Primaria ']' 'of' tipo=Tipo ': ' nombre=EString;
	public MatrizElements getMatrizAccess() {
		return pMatriz;
	}
	
	public ParserRule getMatrizRule() {
		return getMatrizAccess().getRule();
	}

	//Registro:
	//	'registry:' nombre=EString
	//	variable+=Declaracion+
	//	'end_registry';
	public RegistroElements getRegistroAccess() {
		return pRegistro;
	}
	
	public ParserRule getRegistroRule() {
		return getRegistroAccess().getRule();
	}

	//Archivo:
	//	'file of ' tipo=Tipo ': ' nombre=EString;
	public ArchivoElements getArchivoAccess() {
		return pArchivo;
	}
	
	public ParserRule getArchivoRule() {
		return getArchivoAccess().getRule();
	}

	//Enumerado:
	//	nombre=EString '=' '{' (valor+=Primaria (',' valor+=Primaria)*) '}';
	public EnumeradoElements getEnumeradoAccess() {
		return pEnumerado;
	}
	
	public ParserRule getEnumeradoRule() {
		return getEnumeradoAccess().getRule();
	}

	//Subrango:
	//	SubrangoNumerico | SubrangoEnumerado;
	public SubrangoElements getSubrangoAccess() {
		return pSubrango;
	}
	
	public ParserRule getSubrangoRule() {
		return getSubrangoAccess().getRule();
	}

	//SubrangoNumerico:
	//	nombre=EString '=' (limite_inf=EInt '..' limite_sup=EInt);
	public SubrangoNumericoElements getSubrangoNumericoAccess() {
		return pSubrangoNumerico;
	}
	
	public ParserRule getSubrangoNumericoRule() {
		return getSubrangoNumericoAccess().getRule();
	}

	//SubrangoEnumerado:
	//	nombre=EString '=' (limite_inf=EString '..' limite_sup=EString);
	public SubrangoEnumeradoElements getSubrangoEnumeradoAccess() {
		return pSubrangoEnumerado;
	}
	
	public ParserRule getSubrangoEnumeradoRule() {
		return getSubrangoEnumeradoAccess().getRule();
	}

	//Inicio:
	//	'main' {Inicio}
	//	'var'
	//	declaracion+=Declaracion*
	//	'initiation'
	//	tiene+=Sentencias*
	//	'end_main';
	public InicioElements getInicioAccess() {
		return pInicio;
	}
	
	public ParserRule getInicioRule() {
		return getInicioAccess().getRule();
	}

	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DeclaracionVariable:
	//	tipo=TipoVariable ': '
	//	variable+=Variable (',' variable+=Variable)*;
	public DeclaracionVariableElements getDeclaracionVariableAccess() {
		return pDeclaracionVariable;
	}
	
	public ParserRule getDeclaracionVariableRule() {
		return getDeclaracionVariableAccess().getRule();
	}

	//DeclaracionPropia:
	//	tipo=EString ': '
	//	variable+=Variable (',' variable+=Variable)*;
	public DeclaracionPropiaElements getDeclaracionPropiaAccess() {
		return pDeclaracionPropia;
	}
	
	public ParserRule getDeclaracionPropiaRule() {
		return getDeclaracionPropiaAccess().getRule();
	}

	//Asignacion:
	//	AsignacionNormal | AsignacionCompleja;
	public AsignacionElements getAsignacionAccess() {
		return pAsignacion;
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//AsignacionNormal:
	//	valor_asignacion=EString
	//	//	 Mat+=MAT*
	//	'<-'
	//	operador=OperacionCompleta;
	public AsignacionNormalElements getAsignacionNormalAccess() {
		return pAsignacionNormal;
	}
	
	public ParserRule getAsignacionNormalRule() {
		return getAsignacionNormalAccess().getRule();
	}

	//AsignacionCompleja:
	//	valor_asignacion=VariablesComplejas
	//	'<-'
	//	operador=OperacionCompleta;
	public AsignacionComplejaElements getAsignacionComplejaAccess() {
		return pAsignacionCompleja;
	}
	
	public ParserRule getAsignacionComplejaRule() {
		return getAsignacionComplejaAccess().getRule();
	}

	////AsignacionCompleja returns AsignacionCompleja:
	////	operadores+=Primaria
	////	Mat+=MAT*
	////	 '='
	////	operadores+=Primaria;
	//Escribir:
	//	'write('
	//	operador+=Primaria ("," operador+=Primaria | operador+=operacion)*
	//	')';
	public EscribirElements getEscribirAccess() {
		return pEscribir;
	}
	
	public ParserRule getEscribirRule() {
		return getEscribirAccess().getRule();
	}

	//Leer:
	//	'read('
	//	variable+=Primaria ("," variable+=Primaria)*
	//	')';
	public LeerElements getLeerAccess() {
		return pLeer;
	}
	
	public ParserRule getLeerRule() {
		return getLeerAccess().getRule();
	}

	//Si:
	//	('if'
	//	'(' | 'if(') valor=OperacionCompleta
	//	')' 'then'
	//	sentencias+=Sentencias*
	//	devuelve=Devolver?
	//	sino=Sino?
	//	'end_if';
	public SiElements getSiAccess() {
		return pSi;
	}
	
	public ParserRule getSiRule() {
		return getSiAccess().getRule();
	}

	//mientras:
	//	('while'
	//	'(' | 'while(') valor=OperacionCompleta
	//	')' 'do'
	//	sentencias+=Sentencias*
	//	'end_while';
	public MientrasElements getMientrasAccess() {
		return pMientras;
	}
	
	public ParserRule getMientrasRule() {
		return getMientrasAccess().getRule();
	}

	//repetir:
	//	'repeat'
	//	sentencias+=Sentencias* ('until'
	//	'(' | 'until(') valor=OperacionCompleta ')';
	public RepetirElements getRepetirAccess() {
		return pRepetir;
	}
	
	public ParserRule getRepetirRule() {
		return getRepetirAccess().getRule();
	}

	//desde:
	//	'for' asignacion=AsignacionNormal 'to' valor=OperacionCompleta 'do'
	//	sentencias+=Sentencias*
	//	'end_for';
	public DesdeElements getDesdeAccess() {
		return pDesde;
	}
	
	public ParserRule getDesdeRule() {
		return getDesdeAccess().getRule();
	}

	//Caso:
	//	'case' operador=Primaria ': ' sentencias+=Sentencias*
	//	devuelve=Devolver?;
	public CasoElements getCasoAccess() {
		return pCaso;
	}
	
	public ParserRule getCasoRule() {
		return getCasoAccess().getRule();
	}

	//segun:
	//	('according_to' '(' | 'according_to(') valor=OperacionCompleta ')' 'do'
	//	caso+=Caso*
	//	'otherwise:'
	//	sentencias+=Sentencias*
	//	devuelve=Devolver?
	//	'end_according_to';
	public SegunElements getSegunAccess() {
		return pSegun;
	}
	
	public ParserRule getSegunRule() {
		return getSegunAccess().getRule();
	}

	////negacion returns negacion:
	////	nombre=EString
	////	ssigno=neg;
	////unaria returns unaria:
	////	ssigno=neg
	////	variable=Primaria;
	//TipoVariable:
	//	'integer' | 'character' | 'real' | 'boolean' | 'string';
	public TipoVariableElements getTipoVariableAccess() {
		return pTipoVariable;
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}

	//Variable:
	//	{Variable} nombre=EString;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//terminal CAD:
	//	'"' ('a'..'z' | 'A'..'Z' | '_' | '-' | ' ' | '!' | '#' | '@' | '%' | '&' | '(' | ')' | '=' | '?' | '\\' | '0'..'9' |
	//	':' | ',' | '.')* '"';
	public TerminalRule getCADRule() {
		return tCAD;
	} 

	//terminal CAR:
	//	"'" ('a'..'z' | 'A'..'Z' | '_' | ' ' | '!' | '#' | '@' | '%' | '&' | '(' | ')' | '=' | '?' | '\\' | '0'..'9') "'";
	public TerminalRule getCARRule() {
		return tCAR;
	} 

	//terminal COMENT:
	//	'/ *' ('a'..'z' | 'A'..'Z' | '_' | ' ' | '!' | '#' | '@' | '%' | '&' | '(' | ')' | '=' | '?' | '\\' | '0'..'9')* '* /';
	public TerminalRule getCOMENTRule() {
		return tCOMENT;
	} 

	////terminal MAT: 
	////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
	////ConstCadena returns ConstCadena:
	////	{ConstCadena} contenido=CAD;
	////NumeroEntero returns NumeroEntero:
	////	 {NumeroEntero} valor=INTEGER;
	////NumeroDecimal returns NumeroDecimal:
	////	 {NumeroDecimal} valor=FLOAT;
	////ValorBooleano returns ValorBooleano:
	////	 {ValorBooleano} valor=booleano;
	//signo signo:
	//	'+' | '-' | '*' | '/' | '<' | '>' | '>=' | '<=' | 'y' | 'o' | '=' | '!=' | 'mod' | 'div'
	public SignoElements getSignoAccess() {
		return pSigno;
	}
	
	public ParserRule getSignoRule() {
		return getSignoAccess().getRule();
	}

	//signoOr signo:
	//	'or'
	public SignoOrElements getSignoOrAccess() {
		return pSignoOr;
	}
	
	public ParserRule getSignoOrRule() {
		return getSignoOrAccess().getRule();
	}

	//signoAnd signo:
	//	'and'
	public SignoAndElements getSignoAndAccess() {
		return pSignoAnd;
	}
	
	public ParserRule getSignoAndRule() {
		return getSignoAndAccess().getRule();
	}

	//signoIgualdad signo:
	//	'=' | '!='
	public SignoIgualdadElements getSignoIgualdadAccess() {
		return pSignoIgualdad;
	}
	
	public ParserRule getSignoIgualdadRule() {
		return getSignoIgualdadAccess().getRule();
	}

	//signoComparacion signo:
	//	'<' | '>' | '>=' | '<='
	public SignoComparacionElements getSignoComparacionAccess() {
		return pSignoComparacion;
	}
	
	public ParserRule getSignoComparacionRule() {
		return getSignoComparacionAccess().getRule();
	}

	//signoSuma signo:
	//	'+'
	public SignoSumaElements getSignoSumaAccess() {
		return pSignoSuma;
	}
	
	public ParserRule getSignoSumaRule() {
		return getSignoSumaAccess().getRule();
	}

	//signoResta signo:
	//	'-'
	public SignoRestaElements getSignoRestaAccess() {
		return pSignoResta;
	}
	
	public ParserRule getSignoRestaRule() {
		return getSignoRestaAccess().getRule();
	}

	//signoMultiplicacion signo:
	//	'*'
	public SignoMultiplicacionElements getSignoMultiplicacionAccess() {
		return pSignoMultiplicacion;
	}
	
	public ParserRule getSignoMultiplicacionRule() {
		return getSignoMultiplicacionAccess().getRule();
	}

	//signoDivision signo:
	//	'/'
	public SignoDivisionElements getSignoDivisionAccess() {
		return pSignoDivision;
	}
	
	public ParserRule getSignoDivisionRule() {
		return getSignoDivisionAccess().getRule();
	}

	//signoModulo signo:
	//	'mod'
	public SignoModuloElements getSignoModuloAccess() {
		return pSignoModulo;
	}
	
	public ParserRule getSignoModuloRule() {
		return getSignoModuloAccess().getRule();
	}

	//signoDiv signo:
	//	'div'
	public SignoDivElements getSignoDivAccess() {
		return pSignoDiv;
	}
	
	public ParserRule getSignoDivRule() {
		return getSignoDivAccess().getRule();
	}

	//operacion:
	//	Or;
	public OperacionElements getOperacionAccess() {
		return pOperacion;
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}

	//Or operacion:
	//	And ({Or.left=current} signo_op=signoOr negacionesFinales+='-'* negacionesFinales+='no'* right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And operacion:
	//	Mod ({And.left=current} signo_op=signoAnd negacionesFinales+='-'* negacionesFinales+='no'* right=Mod)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Mod operacion:
	//	Igualdad ({Mod.left=current} signo_op=signoModulo negacionesFinales+='-'* negacionesFinales+='no'* right=Igualdad)*
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}

	//Igualdad operacion:
	//	Comparacion ({Igualdad.left=current} signo_op=signoIgualdad negacionesFinales+='-'* negacionesFinales+='no'*
	//	right=Comparacion)*
	public IgualdadElements getIgualdadAccess() {
		return pIgualdad;
	}
	
	public ParserRule getIgualdadRule() {
		return getIgualdadAccess().getRule();
	}

	//Comparacion operacion:
	//	SumaResta ({Comparacion.left=current} signo_op=signoComparacion negacionesFinales+='-'* negacionesFinales+='no'*
	//	right=SumaResta)*
	public ComparacionElements getComparacionAccess() {
		return pComparacion;
	}
	
	public ParserRule getComparacionRule() {
		return getComparacionAccess().getRule();
	}

	//SumaResta operacion:
	//	MultiplicacionDivision (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	negacionesFinales+='-'* negacionesFinales+='no'* right=MultiplicacionDivision)*
	public SumaRestaElements getSumaRestaAccess() {
		return pSumaResta;
	}
	
	public ParserRule getSumaRestaRule() {
		return getSumaRestaAccess().getRule();
	}

	//MultiplicacionDivision operacion:
	//	Primaria (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current} signo_op=signoDivision
	//	| {Div.left=current} signo_op=signoDiv) negacionesFinales+='-'* negacionesFinales+='no'* right=Primaria)*
	public MultiplicacionDivisionElements getMultiplicacionDivisionAccess() {
		return pMultiplicacionDivision;
	}
	
	public ParserRule getMultiplicacionDivisionRule() {
		return getMultiplicacionDivisionAccess().getRule();
	}

	//operacionIndice operacion:
	//	OrIndice
	public OperacionIndiceElements getOperacionIndiceAccess() {
		return pOperacionIndice;
	}
	
	public ParserRule getOperacionIndiceRule() {
		return getOperacionIndiceAccess().getRule();
	}

	//OrIndice operacion:
	//	AndIndice ({Or.left=current} signo_op=signoOr right=AndIndice)*
	public OrIndiceElements getOrIndiceAccess() {
		return pOrIndice;
	}
	
	public ParserRule getOrIndiceRule() {
		return getOrIndiceAccess().getRule();
	}

	//AndIndice operacion:
	//	IgualdadIndice ({And.left=current} signo_op=signoAnd right=IgualdadIndice)*
	public AndIndiceElements getAndIndiceAccess() {
		return pAndIndice;
	}
	
	public ParserRule getAndIndiceRule() {
		return getAndIndiceAccess().getRule();
	}

	//IgualdadIndice operacion:
	//	ComparacionIndice ({Igualdad.left=current} signo_op=signoIgualdad right=ComparacionIndice)*
	public IgualdadIndiceElements getIgualdadIndiceAccess() {
		return pIgualdadIndice;
	}
	
	public ParserRule getIgualdadIndiceRule() {
		return getIgualdadIndiceAccess().getRule();
	}

	//ComparacionIndice operacion:
	//	SumaRestaIndice ({Comparacion.left=current} signo_op=signoComparacion right=SumaRestaIndice)*
	public ComparacionIndiceElements getComparacionIndiceAccess() {
		return pComparacionIndice;
	}
	
	public ParserRule getComparacionIndiceRule() {
		return getComparacionIndiceAccess().getRule();
	}

	//SumaRestaIndice operacion:
	//	MultiplicacionDivisionIndice (({Suma.left=current} signo_op=signoSuma | {Resta.left=current} signo_op=signoResta)
	//	right=MultiplicacionDivisionIndice)*
	public SumaRestaIndiceElements getSumaRestaIndiceAccess() {
		return pSumaRestaIndice;
	}
	
	public ParserRule getSumaRestaIndiceRule() {
		return getSumaRestaIndiceAccess().getRule();
	}

	//MultiplicacionDivisionIndice operacion:
	//	PrimariaIndice (({Multiplicacion.left=current} signo_op=signoMultiplicacion | {Division.left=current}
	//	signo_op=signoDivision | {Div.left=current} signo_op=signoDiv) right=PrimariaIndice)*
	public MultiplicacionDivisionIndiceElements getMultiplicacionDivisionIndiceAccess() {
		return pMultiplicacionDivisionIndice;
	}
	
	public ParserRule getMultiplicacionDivisionIndiceRule() {
		return getMultiplicacionDivisionIndiceAccess().getRule();
	}

	//PrimariaIndice operacion:
	//	{NumeroEntero} valor=EInt
	//	| {VariableID} nombre=EString
	public PrimariaIndiceElements getPrimariaIndiceAccess() {
		return pPrimariaIndice;
	}
	
	public ParserRule getPrimariaIndiceRule() {
		return getPrimariaIndiceAccess().getRule();
	}

	//Primaria operacion:
	//	VariablesBasicas | VariablesComplejas
	//	| Funciones
	//	| OperacionParentesis
	public PrimariaElements getPrimariaAccess() {
		return pPrimaria;
	}
	
	public ParserRule getPrimariaRule() {
		return getPrimariaAccess().getRule();
	}

	//OperacionCompleta operacion:
	//	{OperacionCompleta} negacionesIniciales+='-'* negacionesIniciales+='no'* valor_operacion=operacion
	public OperacionCompletaElements getOperacionCompletaAccess() {
		return pOperacionCompleta;
	}
	
	public ParserRule getOperacionCompletaRule() {
		return getOperacionCompletaAccess().getRule();
	}

	//OperacionParentesis operacion:
	//	{OperacionParentesis} '(' negacionesFinales+='-'* negacionesFinales+='no'* valor_operacion=operacion ')'
	public OperacionParentesisElements getOperacionParentesisAccess() {
		return pOperacionParentesis;
	}
	
	public ParserRule getOperacionParentesisRule() {
		return getOperacionParentesisAccess().getRule();
	}

	//Funciones operacion:
	//	{LlamadaFuncion} nombre=NOMBRE_FUN (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')' |
	//	{Internas} nombre=NombreInterna (operadores+=OperacionCompleta (',' operadores+=OperacionCompleta)*)? ')'
	public FuncionesElements getFuncionesAccess() {
		return pFunciones;
	}
	
	public ParserRule getFuncionesRule() {
		return getFuncionesAccess().getRule();
	}

	//VariablesComplejas operacion:
	//	{ValorVector} (nombre_vector=EString '[' indice=operacionIndice ']') ('.' campo+=CampoRegistro)?
	//	| {ValorMatriz} (nombre_matriz=EString '[' primerIndice=operacionIndice '][' segundoIndice=operacionIndice ']') ('.'
	//	campo+=CampoRegistro)?
	//	| {ValorRegistro} nombre_registro=EString '.' (campo+=CampoRegistro ('.' campo+=CampoRegistro)*)
	public VariablesComplejasElements getVariablesComplejasAccess() {
		return pVariablesComplejas;
	}
	
	public ParserRule getVariablesComplejasRule() {
		return getVariablesComplejasAccess().getRule();
	}

	//VariablesBasicas operacion:
	//	{NumeroEntero} valor=EInt
	//	| {NumeroDecimal} valor=EFloat
	//	| {ConstCadena} contenido=CAD
	//	| {Caracter} contenido=CAR
	//	| {ValorBooleano} valor=Booleano
	//	| {VariableID} nombre=EString
	public VariablesBasicasElements getVariablesBasicasAccess() {
		return pVariablesBasicas;
	}
	
	public ParserRule getVariablesBasicasRule() {
		return getVariablesBasicasAccess().getRule();
	}

	//Sino:
	//	{Sino}
	//	'else' (sentencias+=Sentencias sentencias+=Sentencias*)?
	//	devuelve=Devolver?;
	public SinoElements getSinoAccess() {
		return pSino;
	}
	
	public ParserRule getSinoRule() {
		return getSinoAccess().getRule();
	}

	//Devolver:
	//	{Devolver}
	//	'return' devuelve=OperacionCompleta;
	public DevolverElements getDevolverAccess() {
		return pDevolver;
	}
	
	public ParserRule getDevolverRule() {
		return getDevolverAccess().getRule();
	}

	////neg returns neg:
	////	"no" / * TODO: implement this rule and an appropriate IValueConverter * /;
	//ParametroFuncion:
	//	paso=TipoPaso
	//	tipo=Tipo ": "
	//	variable=Variable;
	public ParametroFuncionElements getParametroFuncionAccess() {
		return pParametroFuncion;
	}
	
	public ParserRule getParametroFuncionRule() {
		return getParametroFuncionAccess().getRule();
	}

	//Funcion:
	//	tipo=TipoVariable 'function'
	//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')' ('var'
	//	declaracion+=Declaracion*)?
	//	'initiation'
	//	sentencias+=Sentencias*
	//	devuelve=Devolver?
	//	'end_function';
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}

	//Procedimiento:
	//	'procedure'
	//	nombre=NOMBRE_FUN (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ')' ('var'
	//	declaracion+=Declaracion*)?
	//	'initiation'
	//	sentencias+=Sentencias*
	//	'end_procedure';
	public ProcedimientoElements getProcedimientoAccess() {
		return pProcedimiento;
	}
	
	public ParserRule getProcedimientoRule() {
		return getProcedimientoAccess().getRule();
	}

	//TipoPaso:
	//	'I' | 'I/O' | 'O';
	public TipoPasoElements getTipoPasoAccess() {
		return pTipoPaso;
	}
	
	public ParserRule getTipoPasoRule() {
		return getTipoPasoAccess().getRule();
	}

	//Booleano:
	//	'true' | 'false';
	public BooleanoElements getBooleanoAccess() {
		return pBooleano;
	}
	
	public ParserRule getBooleanoRule() {
		return getBooleanoAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
